{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 2067,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/imgui/imgui_ext.h",
			"settings":
			{
				"buffer_size": 26474,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Tackwin/Documents/Soft/nim-1.2.6/examples/talk/dsl.nim",
			"settings":
			{
				"buffer_size": 631,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/imgui/imgui_ext.cpp",
			"settings":
			{
				"buffer_size": 158657,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/Mouse.cpp",
			"settings":
			{
				"buffer_size": 13520,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "// dear imgui, v1.77\n// (headers)\n\n// Help:\n// - Read FAQ at http://dearimgui.org/faq\n// - Newcomers, read 'Programmer guide' in imgui.cpp for notes on how to setup Dear ImGui in your codebase.\n// - Call and read ImGui::ShowDemoWindow() in imgui_demo.cpp. All applications in examples/ are doing that.\n// Read imgui.cpp for details, links and comments.\n\n// Resources:\n// - FAQ                   http://dearimgui.org/faq\n// - Homepage & latest     https://github.com/ocornut/imgui\n// - Releases & changelog  https://github.com/ocornut/imgui/releases\n// - Gallery               https://github.com/ocornut/imgui/issues/3075 (please post your screenshots/video there!)\n// - Glossary              https://github.com/ocornut/imgui/wiki/Glossary\n// - Wiki                  https://github.com/ocornut/imgui/wiki\n// - Issues & support      https://github.com/ocornut/imgui/issues\n\n/*\n\nIndex of this file:\n// Header mess\n// Forward declarations and basic types\n// ImGui API (Dear ImGui end-user API)\n// Flags & Enumerations\n// Memory allocations macros\n// ImVector<>\n// ImGuiStyle\n// ImGuiIO\n// Misc data structures (ImGuiInputTextCallbackData, ImGuiSizeCallbackData, ImGuiWindowClass, ImGuiPayload)\n// Obsolete functions\n// Helpers (ImGuiOnceUponAFrame, ImGuiTextFilter, ImGuiTextBuffer, ImGuiStorage, ImGuiListClipper, ImColor)\n// Draw List API (ImDrawCallback, ImDrawCmd, ImDrawIdx, ImDrawVert, ImDrawChannel, ImDrawListSplitter, ImDrawListFlags, ImDrawList, ImDrawData)\n// Font API (ImFontConfig, ImFontGlyph, ImFontGlyphRangesBuilder, ImFontAtlasFlags, ImFontAtlas, ImFont)\n// Platform interface for multi-viewport support (ImGuiPlatformIO, ImGuiPlatformMonitor, ImGuiViewportFlags, ImGuiViewport)\n\n*/\n\n#pragma once\n\n// Configuration file with compile-time options (edit imconfig.h or #define IMGUI_USER_CONFIG to your own filename)\n#ifdef IMGUI_USER_CONFIG\n#include IMGUI_USER_CONFIG\n#endif\n#if !defined(IMGUI_DISABLE_INCLUDE_IMCONFIG_H) || defined(IMGUI_INCLUDE_IMCONFIG_H)\n#include \"imconfig.h\"\n#endif\n\n#ifndef IMGUI_DISABLE\n\n//-----------------------------------------------------------------------------\n// Header mess\n//-----------------------------------------------------------------------------\n\n// Includes\n#include <float.h>                  // FLT_MIN, FLT_MAX\n#include <stdarg.h>                 // va_list, va_start, va_end\n#include <stddef.h>                 // ptrdiff_t, NULL\n#include <string.h>                 // memset, memmove, memcpy, strlen, strchr, strcpy, strcmp\n\n// Version\n// (Integer encoded as XYYZZ for use in #if preprocessor conditionals. Work in progress versions typically starts at XYY99 then bounce up to XYY00, XYY01 etc. when release tagging happens)\n#define IMGUI_VERSION               \"1.77\"\n#define IMGUI_VERSION_NUM           17701\n#define IMGUI_CHECKVERSION()        ImGui::DebugCheckVersionAndDataLayout(IMGUI_VERSION, sizeof(ImGuiIO), sizeof(ImGuiStyle), sizeof(ImVec2), sizeof(ImVec4), sizeof(ImDrawVert), sizeof(ImDrawIdx))\n#define IMGUI_HAS_VIEWPORT          1 // Viewport WIP branch\n#define IMGUI_HAS_DOCK              1 // Docking WIP branch\n\n// Define attributes of all API symbols declarations (e.g. for DLL under Windows)\n// IMGUI_API is used for core imgui functions, IMGUI_IMPL_API is used for the default bindings files (imgui_impl_xxx.h)\n// Using dear imgui via a shared library is not recommended, because we don't guarantee backward nor forward ABI compatibility (also function call overhead, as dear imgui is a call-heavy API)\n#ifndef IMGUI_API\n#define IMGUI_API\n#endif\n#ifndef IMGUI_IMPL_API\n#define IMGUI_IMPL_API              IMGUI_API\n#endif\n\n// Helper Macros\n#ifndef IM_ASSERT\n#include <assert.h>\n#define IM_ASSERT(_EXPR)            assert(_EXPR)                               // You can override the default assert handler by editing imconfig.h\n#endif\n#if !defined(IMGUI_USE_STB_SPRINTF) && (defined(__clang__) || defined(__GNUC__))\n#define IM_FMTARGS(FMT)             __attribute__((format(printf, FMT, FMT+1))) // To apply printf-style warnings to our functions.\n#define IM_FMTLIST(FMT)             __attribute__((format(printf, FMT, 0)))\n#else\n#define IM_FMTARGS(FMT)\n#define IM_FMTLIST(FMT)\n#endif\n#define IM_ARRAYSIZE(_ARR)          ((int)(sizeof(_ARR) / sizeof(*(_ARR))))     // Size of a static C-style array. Don't use on pointers!\n#define IM_UNUSED(_VAR)             ((void)(_VAR))                              // Used to silence \"unused variable warnings\". Often useful as asserts may be stripped out from final builds.\n#if (__cplusplus >= 201100)\n#define IM_OFFSETOF(_TYPE,_MEMBER)  offsetof(_TYPE, _MEMBER)                    // Offset of _MEMBER within _TYPE. Standardized as offsetof() in C++11\n#else\n#define IM_OFFSETOF(_TYPE,_MEMBER)  ((size_t)&(((_TYPE*)0)->_MEMBER))           // Offset of _MEMBER within _TYPE. Old style macro.\n#endif\n\n// Warnings\n#if defined(__clang__)\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wold-style-cast\"\n#if __has_warning(\"-Wzero-as-null-pointer-constant\")\n#pragma clang diagnostic ignored \"-Wzero-as-null-pointer-constant\"\n#endif\n#elif defined(__GNUC__)\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wpragmas\"                  // warning: unknown option after '#pragma GCC diagnostic' kind\n#pragma GCC diagnostic ignored \"-Wclass-memaccess\"          // [__GNUC__ >= 8] warning: 'memset/memcpy' clearing/writing an object of type 'xxxx' with no trivial copy-assignment; use assignment or value-initialization instead\n#endif\n\n//-----------------------------------------------------------------------------\n// Forward declarations and basic types\n//-----------------------------------------------------------------------------\n\n// Forward declarations\nstruct ImDrawChannel;               // Temporary storage to output draw commands out of order, used by ImDrawListSplitter and ImDrawList::ChannelsSplit()\nstruct ImDrawCmd;                   // A single draw command within a parent ImDrawList (generally maps to 1 GPU draw call, unless it is a callback)\nstruct ImDrawData;                  // All draw command lists required to render the frame + pos/size coordinates to use for the projection matrix.\nstruct ImDrawList;                  // A single draw command list (generally one per window, conceptually you may see this as a dynamic \"mesh\" builder)\nstruct ImDrawListSharedData;        // Data shared among multiple draw lists (typically owned by parent ImGui context, but you may create one yourself)\nstruct ImDrawListSplitter;          // Helper to split a draw list into different layers which can be drawn into out of order, then flattened back.\nstruct ImDrawVert;                  // A single vertex (pos + uv + col = 20 bytes by default. Override layout with IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT)\nstruct ImFont;                      // Runtime data for a single font within a parent ImFontAtlas\nstruct ImFontAtlas;                 // Runtime data for multiple fonts, bake multiple fonts into a single texture, TTF/OTF font loader\nstruct ImFontConfig;                // Configuration data when adding a font or merging fonts\nstruct ImFontGlyph;                 // A single font glyph (code point + coordinates within in ImFontAtlas + offset)\nstruct ImFontGlyphRangesBuilder;    // Helper to build glyph ranges from text/string data\nstruct ImColor;                     // Helper functions to create a color that can be converted to either u32 or float4 (*OBSOLETE* please avoid using)\nstruct ImGuiContext;                // Dear ImGui context (opaque structure, unless including imgui_internal.h)\nstruct ImGuiIO;                     // Main configuration and I/O between your application and ImGui\nstruct ImGuiInputTextCallbackData;  // Shared state of InputText() when using custom ImGuiInputTextCallback (rare/advanced use)\nstruct ImGuiListClipper;            // Helper to manually clip large list of items\nstruct ImGuiOnceUponAFrame;         // Helper for running a block of code not more than once a frame, used by IMGUI_ONCE_UPON_A_FRAME macro\nstruct ImGuiPayload;                // User data payload for drag and drop operations\nstruct ImGuiPlatformIO;             // Multi-viewport support: interface for Platform/Renderer back-ends + viewports to render\nstruct ImGuiPlatformMonitor;        // Multi-viewport support: user-provided bounds for each connected monitor/display. Used when positioning popups and tooltips to avoid them straddling monitors\nstruct ImGuiSizeCallbackData;       // Callback data when using SetNextWindowSizeConstraints() (rare/advanced use)\nstruct ImGuiStorage;                // Helper for key->value storage\nstruct ImGuiStyle;                  // Runtime data for styling/colors\nstruct ImGuiTextBuffer;             // Helper to hold and append into a text buffer (~string builder)\nstruct ImGuiTextFilter;             // Helper to parse and apply text filters (e.g. \"aaaaa[,bbbbb][,ccccc]\")\nstruct ImGuiViewport;               // Viewport (generally ~1 per window to output to at the OS level. Need per-platform support to use multiple viewports)\nstruct ImGuiWindowClass;            // Window class (rare/advanced uses: provide hints to the platform back-end via altered viewport flags and parent/child info)\n\n// Enums/Flags (declared as int for compatibility with old C++, to allow using as flags and to not pollute the top of this file)\n// - Tip: Use your programming IDE navigation facilities on the names in the _central column_ below to find the actual flags/enum lists!\n//   In Visual Studio IDE: CTRL+comma (\"Edit.NavigateTo\") can follow symbols in comments, whereas CTRL+F12 (\"Edit.GoToImplementation\") cannot.\n//   With Visual Assist installed: ALT+G (\"VAssistX.GoToImplementation\") can also follow symbols in comments.\ntypedef int ImGuiCol;               // -> enum ImGuiCol_             // Enum: A color identifier for styling\ntypedef int ImGuiCond;              // -> enum ImGuiCond_            // Enum: A condition for many Set*() functions\ntypedef int ImGuiDataType;          // -> enum ImGuiDataType_        // Enum: A primary data type\ntypedef int ImGuiDir;               // -> enum ImGuiDir_             // Enum: A cardinal direction\ntypedef int ImGuiKey;               // -> enum ImGuiKey_             // Enum: A key identifier (ImGui-side enum)\ntypedef int ImGuiNavInput;          // -> enum ImGuiNavInput_        // Enum: An input identifier for navigation\ntypedef int ImGuiMouseButton;       // -> enum ImGuiMouseButton_     // Enum: A mouse button identifier (0=left, 1=right, 2=middle)\ntypedef int ImGuiMouseCursor;       // -> enum ImGuiMouseCursor_     // Enum: A mouse cursor identifier\ntypedef int ImGuiStyleVar;          // -> enum ImGuiStyleVar_        // Enum: A variable identifier for styling\ntypedef int ImDrawCornerFlags;      // -> enum ImDrawCornerFlags_    // Flags: for ImDrawList::AddRect(), AddRectFilled() etc.\ntypedef int ImDrawListFlags;        // -> enum ImDrawListFlags_      // Flags: for ImDrawList\ntypedef int ImFontAtlasFlags;       // -> enum ImFontAtlasFlags_     // Flags: for ImFontAtlas\ntypedef int ImGuiBackendFlags;      // -> enum ImGuiBackendFlags_    // Flags: for io.BackendFlags\ntypedef int ImGuiColorEditFlags;    // -> enum ImGuiColorEditFlags_  // Flags: for ColorEdit4(), ColorPicker4() etc.\ntypedef int ImGuiConfigFlags;       // -> enum ImGuiConfigFlags_     // Flags: for io.ConfigFlags\ntypedef int ImGuiComboFlags;        // -> enum ImGuiComboFlags_      // Flags: for BeginCombo()\ntypedef int ImGuiDockNodeFlags;     // -> enum ImGuiDockNodeFlags_   // Flags: for DockSpace()\ntypedef int ImGuiDragDropFlags;     // -> enum ImGuiDragDropFlags_   // Flags: for BeginDragDropSource(), AcceptDragDropPayload()\ntypedef int ImGuiFocusedFlags;      // -> enum ImGuiFocusedFlags_    // Flags: for IsWindowFocused()\ntypedef int ImGuiHoveredFlags;      // -> enum ImGuiHoveredFlags_    // Flags: for IsItemHovered(), IsWindowHovered() etc.\ntypedef int ImGuiInputTextFlags;    // -> enum ImGuiInputTextFlags_  // Flags: for InputText(), InputTextMultiline()\ntypedef int ImGuiKeyModFlags;       // -> enum ImGuiKeyModFlags_     // Flags: for io.KeyMods (Ctrl/Shift/Alt/Super)\ntypedef int ImGuiPopupFlags;        // -> enum ImGuiPopupFlags_      // Flags: for OpenPopup*(), BeginPopupContext*(), IsPopupOpen()\ntypedef int ImGuiSelectableFlags;   // -> enum ImGuiSelectableFlags_ // Flags: for Selectable()\ntypedef int ImGuiTabBarFlags;       // -> enum ImGuiTabBarFlags_     // Flags: for BeginTabBar()\ntypedef int ImGuiTabItemFlags;      // -> enum ImGuiTabItemFlags_    // Flags: for BeginTabItem()\ntypedef int ImGuiTreeNodeFlags;     // -> enum ImGuiTreeNodeFlags_   // Flags: for TreeNode(), TreeNodeEx(), CollapsingHeader()\ntypedef int ImGuiViewportFlags;     // -> enum ImGuiViewportFlags_   // Flags: for ImGuiViewport\ntypedef int ImGuiWindowFlags;       // -> enum ImGuiWindowFlags_     // Flags: for Begin(), BeginChild()\n\n// Other types\n#ifndef ImTextureID                 // ImTextureID [configurable type: override in imconfig.h with '#define ImTextureID xxx']\ntypedef void* ImTextureID;          // User data for rendering back-end to identify a texture. This is whatever to you want it to be! read the FAQ about ImTextureID for details.\n#endif\ntypedef unsigned int ImGuiID;       // A unique ID used by widgets, typically hashed from a stack of string.\ntypedef int (*ImGuiInputTextCallback)(ImGuiInputTextCallbackData* data);\ntypedef void (*ImGuiSizeCallback)(ImGuiSizeCallbackData* data);\n\n// Decoded character types\n// (we generally use UTF-8 encoded string in the API. This is storage specifically for a decoded character used for keyboard input and display)\ntypedef unsigned short ImWchar16;   // A single decoded U16 character/code point. We encode them as multi bytes UTF-8 when used in strings.\ntypedef unsigned int ImWchar32;     // A single decoded U32 character/code point. We encode them as multi bytes UTF-8 when used in strings.\n#ifdef IMGUI_USE_WCHAR32            // ImWchar [configurable type: override in imconfig.h with '#define IMGUI_USE_WCHAR32' to support Unicode planes 1-16]\ntypedef ImWchar32 ImWchar;\n#else\ntypedef ImWchar16 ImWchar;\n#endif\n\n// Basic scalar data types\ntypedef signed char         ImS8;   // 8-bit signed integer\ntypedef unsigned char       ImU8;   // 8-bit unsigned integer\ntypedef signed short        ImS16;  // 16-bit signed integer\ntypedef unsigned short      ImU16;  // 16-bit unsigned integer\ntypedef signed int          ImS32;  // 32-bit signed integer == int\ntypedef unsigned int        ImU32;  // 32-bit unsigned integer (often used to store packed colors)\n#if defined(_MSC_VER) && !defined(__clang__)\ntypedef signed   __int64    ImS64;  // 64-bit signed integer (pre and post C++11 with Visual Studio)\ntypedef unsigned __int64    ImU64;  // 64-bit unsigned integer (pre and post C++11 with Visual Studio)\n#elif (defined(__clang__) || defined(__GNUC__)) && (__cplusplus < 201100)\n#include <stdint.h>\ntypedef int64_t             ImS64;  // 64-bit signed integer (pre C++11)\ntypedef uint64_t            ImU64;  // 64-bit unsigned integer (pre C++11)\n#else\ntypedef signed   long long  ImS64;  // 64-bit signed integer (post C++11)\ntypedef unsigned long long  ImU64;  // 64-bit unsigned integer (post C++11)\n#endif\n\n// 2D vector (often used to store positions or sizes)\nstruct ImVec2\n{\n    float                                   x, y;\n    ImVec2() { x = y = 0.0f; }\n    ImVec2(float _x, float _y) { x = _x; y = _y; }\n    float  operator[] (size_t idx) const { IM_ASSERT(idx <= 1); return (&x)[idx]; }    // We very rarely use this [] operator, the assert overhead is fine.\n    float& operator[] (size_t idx) { IM_ASSERT(idx <= 1); return (&x)[idx]; }    // We very rarely use this [] operator, the assert overhead is fine.\n#ifdef IM_VEC2_CLASS_EXTRA\n    IM_VEC2_CLASS_EXTRA     // Define additional constructors and implicit cast operators in imconfig.h to convert back and forth between your math types and ImVec2.\n#endif\n};\n\n// 4D vector (often used to store floating-point colors)\nstruct ImVec4\n{\n    float                                   x, y, z, w;\n    ImVec4() { x = y = z = w = 0.0f; }\n    ImVec4(float _x, float _y, float _z, float _w) { x = _x; y = _y; z = _z; w = _w; }\n#ifdef IM_VEC4_CLASS_EXTRA\n    IM_VEC4_CLASS_EXTRA     // Define additional constructors and implicit cast operators in imconfig.h to convert back and forth between your math types and ImVec4.\n#endif\n};\n\n//-----------------------------------------------------------------------------\n// ImGui: Dear ImGui end-user API\n// (This is a namespace. You can add extra ImGui:: functions in your own separate file. Please don't modify imgui source files!)\n//-----------------------------------------------------------------------------\n\nnamespace ImGui\n{\n    // Context creation and access\n    // Each context create its own ImFontAtlas by default. You may instance one yourself and pass it to CreateContext() to share a font atlas between imgui contexts.\n    // None of those functions is reliant on the current context.\n    IMGUI_API ImGuiContext* CreateContext(ImFontAtlas* shared_font_atlas = NULL);\n    IMGUI_API void          DestroyContext(ImGuiContext* ctx = NULL);   // NULL = destroy current context\n    IMGUI_API ImGuiContext* GetCurrentContext();\n    IMGUI_API void          SetCurrentContext(ImGuiContext* ctx);\n\n    // Main\n    IMGUI_API ImGuiIO& GetIO();                                    // access the IO structure (mouse/keyboard/gamepad inputs, time, various configuration options/flags)\n    IMGUI_API ImGuiStyle& GetStyle();                                 // access the Style structure (colors, sizes). Always use PushStyleCol(), PushStyleVar() to modify style mid-frame!\n    IMGUI_API void          NewFrame();                                 // start a new Dear ImGui frame, you can submit any command from this point until Render()/EndFrame().\n    IMGUI_API void          EndFrame();                                 // ends the Dear ImGui frame. automatically called by Render(). If you don't need to render data (skipping rendering) you may call EndFrame() without Render()... but you'll have wasted CPU already! If you don't need to render, better to not create any windows and not call NewFrame() at all!\n    IMGUI_API void          Render();                                   // ends the Dear ImGui frame, finalize the draw data. You can get call GetDrawData() to obtain it and run your rendering function (up to v1.60, this used to call io.RenderDrawListsFn(). Nowadays, we allow and prefer calling your render function yourself.)\n    IMGUI_API ImDrawData* GetDrawData();                              // valid after Render() and until the next call to NewFrame(). this is what you have to render.\n\n    // Demo, Debug, Information\n    IMGUI_API void          ShowDemoWindow(bool* p_open = NULL);        // create Demo window (previously called ShowTestWindow). demonstrate most ImGui features. call this to learn about the library! try to make it always available in your application!\n    IMGUI_API void          ShowAboutWindow(bool* p_open = NULL);       // create About window. display Dear ImGui version, credits and build/system information.\n    IMGUI_API void          ShowMetricsWindow(bool* p_open = NULL);     // create Debug/Metrics window. display Dear ImGui internals: draw commands (with individual draw calls and vertices), window list, basic internal state, etc.\n    IMGUI_API void          ShowStyleEditor(ImGuiStyle* ref = NULL);    // add style editor block (not a window). you can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it uses the default style)\n    IMGUI_API bool          ShowStyleSelector(const char* label);       // add style selector block (not a window), essentially a combo listing the default styles.\n    IMGUI_API void          ShowFontSelector(const char* label);        // add font selector block (not a window), essentially a combo listing the loaded fonts.\n    IMGUI_API void          ShowUserGuide();                            // add basic help/info block (not a window): how to manipulate ImGui as a end-user (mouse/keyboard controls).\n    IMGUI_API const char* GetVersion();                               // get the compiled version string e.g. \"1.23\" (essentially the compiled value for IMGUI_VERSION)\n\n    // Styles\n    IMGUI_API void          StyleColorsDark(ImGuiStyle* dst = NULL);    // new, recommended style (default)\n    IMGUI_API void          StyleColorsClassic(ImGuiStyle* dst = NULL); // classic imgui style\n    IMGUI_API void          StyleColorsLight(ImGuiStyle* dst = NULL);   // best used with borders and a custom, thicker font\n\n    // Windows\n    // - Begin() = push window to the stack and start appending to it. End() = pop window from the stack.\n    // - Passing 'bool* p_open != NULL' shows a window-closing widget in the upper-right corner of the window,\n    //   which clicking will set the boolean to false when clicked.\n    // - You may append multiple times to the same window during the same frame by calling Begin()/End() pairs multiple times.\n    //   Some information such as 'flags' or 'p_open' will only be considered by the first call to Begin().\n    // - Begin() return false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting\n    //   anything to the window. Always call a matching End() for each Begin() call, regardless of its return value!\n    //   [Important: due to legacy reason, this is inconsistent with most other functions such as BeginMenu/EndMenu,\n    //    BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function\n    //    returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]\n    // - Note that the bottom of window stack always contains a window called \"Debug\".\n    IMGUI_API bool          Begin(const char* name, bool* p_open = NULL, ImGuiWindowFlags flags = 0);\n    IMGUI_API void          End();\n\n    // Child Windows\n    // - Use child windows to begin into a self-contained independent scrolling/clipping regions within a host window. Child windows can embed their own child.\n    // - For each independent axis of 'size': ==0.0f: use remaining host window size / >0.0f: fixed size / <0.0f: use remaining window size minus abs(size) / Each axis can use a different mode, e.g. ImVec2(0,400).\n    // - BeginChild() returns false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting anything to the window.\n    //   Always call a matching EndChild() for each BeginChild() call, regardless of its return value [as with Begin: this is due to legacy reason and inconsistent with most BeginXXX functions apart from the regular Begin() which behaves like BeginChild().]\n    IMGUI_API bool          BeginChild(const char* str_id, const ImVec2& size = ImVec2(0, 0), bool border = false, ImGuiWindowFlags flags = 0);\n    IMGUI_API bool          BeginChild(ImGuiID id, const ImVec2& size = ImVec2(0, 0), bool border = false, ImGuiWindowFlags flags = 0);\n    IMGUI_API void          EndChild();\n\n    // Windows Utilities\n    // - 'current window' = the window we are appending into while inside a Begin()/End() block. 'next window' = next window we will Begin() into.\n    IMGUI_API bool          IsWindowAppearing();\n    IMGUI_API bool          IsWindowCollapsed();\n    IMGUI_API bool          IsWindowFocused(ImGuiFocusedFlags flags = 0); // is current window focused? or its root/child, depending on flags. see flags for options.\n    IMGUI_API bool          IsWindowHovered(ImGuiHoveredFlags flags = 0); // is current window hovered (and typically: not blocked by a popup/modal)? see flags for options. NB: If you are trying to check whether your mouse should be dispatched to imgui or to your app, you should use the 'io.WantCaptureMouse' boolean for that! Please read the FAQ!\n    IMGUI_API ImDrawList* GetWindowDrawList();                        // get draw list associated to the current window, to append your own drawing primitives\n    IMGUI_API float         GetWindowDpiScale();                        // get DPI scale currently associated to the current window's viewport.\n    IMGUI_API ImGuiViewport* GetWindowViewport();                        // get viewport currently associated to the current window.\n    IMGUI_API ImVec2        GetWindowPos();                             // get current window position in screen space (useful if you want to do your own drawing via the DrawList API)\n    IMGUI_API ImVec2        GetWindowSize();                            // get current window size\n    IMGUI_API float         GetWindowWidth();                           // get current window width (shortcut for GetWindowSize().x)\n    IMGUI_API float         GetWindowHeight();                          // get current window height (shortcut for GetWindowSize().y)\n\n    // Prefer using SetNextXXX functions (before Begin) rather that SetXXX functions (after Begin).\n    IMGUI_API void          SetNextWindowPos(const ImVec2& pos, ImGuiCond cond = 0, const ImVec2& pivot = ImVec2(0, 0)); // set next window position. call before Begin(). use pivot=(0.5f,0.5f) to center on given point, etc.\n    IMGUI_API void          SetNextWindowSize(const ImVec2& size, ImGuiCond cond = 0);                  // set next window size. set axis to 0.0f to force an auto-fit on this axis. call before Begin()\n    IMGUI_API void          SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeCallback custom_callback = NULL, void* custom_callback_data = NULL); // set next window size limits. use -1,-1 on either X/Y axis to preserve the current size. Sizes will be rounded down. Use callback to apply non-trivial programmatic constraints.\n    IMGUI_API void          SetNextWindowContentSize(const ImVec2& size);                               // set next window content size (~ scrollable client area, which enforce the range of scrollbars). Not including window decorations (title bar, menu bar, etc.) nor WindowPadding. set an axis to 0.0f to leave it automatic. call before Begin()\n    IMGUI_API void          SetNextWindowCollapsed(bool collapsed, ImGuiCond cond = 0);                 // set next window collapsed state. call before Begin()\n    IMGUI_API void          SetNextWindowFocus();                                                       // set next window to be focused / top-most. call before Begin()\n    IMGUI_API void          SetNextWindowBgAlpha(float alpha);                                          // set next window background color alpha. helper to easily override the Alpha component of ImGuiCol_WindowBg/ChildBg/PopupBg. you may also use ImGuiWindowFlags_NoBackground.\n    IMGUI_API void          SetNextWindowViewport(ImGuiID viewport_id);                                 // set next window viewport\n    IMGUI_API void          SetWindowPos(const ImVec2& pos, ImGuiCond cond = 0);                        // (not recommended) set current window position - call within Begin()/End(). prefer using SetNextWindowPos(), as this may incur tearing and side-effects.\n    IMGUI_API void          SetWindowSize(const ImVec2& size, ImGuiCond cond = 0);                      // (not recommended) set current window size - call within Begin()/End(). set to ImVec2(0, 0) to force an auto-fit. prefer using SetNextWindowSize(), as this may incur tearing and minor side-effects.\n    IMGUI_API void          SetWindowCollapsed(bool collapsed, ImGuiCond cond = 0);                     // (not recommended) set current window collapsed state. prefer using SetNextWindowCollapsed().\n    IMGUI_API void          SetWindowFocus();                                                           // (not recommended) set current window to be focused / top-most. prefer using SetNextWindowFocus().\n    IMGUI_API void          SetWindowFontScale(float scale);                                            // set font scale. Adjust IO.FontGlobalScale if you want to scale all windows. This is an old API! For correct scaling, prefer to reload font + rebuild ImFontAtlas + call style.ScaleAllSizes().\n    IMGUI_API void          SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond = 0);      // set named window position.\n    IMGUI_API void          SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond = 0);    // set named window size. set axis to 0.0f to force an auto-fit on this axis.\n    IMGUI_API void          SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond = 0);   // set named window collapsed state\n    IMGUI_API void          SetWindowFocus(const char* name);                                           // set named window to be focused / top-most. use NULL to remove focus.\n\n    // Content region\n    // - Those functions are bound to be redesigned soon (they are confusing, incomplete and return values in local window coordinates which increases confusion)\n    IMGUI_API ImVec2        GetContentRegionMax();                                          // current content boundaries (typically window boundaries including scrolling, or current column boundaries), in windows coordinates\n    IMGUI_API ImVec2        GetContentRegionAvail();                                        // == GetContentRegionMax() - GetCursorPos()\n    IMGUI_API ImVec2        GetWindowContentRegionMin();                                    // content boundaries min (roughly (0,0)-Scroll), in window coordinates\n    IMGUI_API ImVec2        GetWindowContentRegionMax();                                    // content boundaries max (roughly (0,0)+Size-Scroll) where Size can be override with SetNextWindowContentSize(), in window coordinates\n    IMGUI_API float         GetWindowContentRegionWidth();                                  //\n\n    // Windows Scrolling\n    IMGUI_API float         GetScrollX();                                                   // get scrolling amount [0..GetScrollMaxX()]\n    IMGUI_API float         GetScrollY();                                                   // get scrolling amount [0..GetScrollMaxY()]\n    IMGUI_API float         GetScrollMaxX();                                                // get maximum scrolling amount ~~ ContentSize.X - WindowSize.X\n    IMGUI_API float         GetScrollMaxY();                                                // get maximum scrolling amount ~~ ContentSize.Y - WindowSize.Y\n    IMGUI_API void          SetScrollX(float scroll_x);                                     // set scrolling amount [0..GetScrollMaxX()]\n    IMGUI_API void          SetScrollY(float scroll_y);                                     // set scrolling amount [0..GetScrollMaxY()]\n    IMGUI_API void          SetScrollHereX(float center_x_ratio = 0.5f);                    // adjust scrolling amount to make current cursor position visible. center_x_ratio=0.0: left, 0.5: center, 1.0: right. When using to make a \"default/current item\" visible, consider using SetItemDefaultFocus() instead.\n    IMGUI_API void          SetScrollHereY(float center_y_ratio = 0.5f);                    // adjust scrolling amount to make current cursor position visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. When using to make a \"default/current item\" visible, consider using SetItemDefaultFocus() instead.\n    IMGUI_API void          SetScrollFromPosX(float local_x, float center_x_ratio = 0.5f);  // adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.\n    IMGUI_API void          SetScrollFromPosY(float local_y, float center_y_ratio = 0.5f);  // adjust scrolling amount to make given position visible. Generally GetCursorStartPos() + offset to compute a valid position.\n\n    // Parameters stacks (shared)\n    IMGUI_API void          PushFont(ImFont* font);                                         // use NULL as a shortcut to push default font\n    IMGUI_API void          PopFont();\n    IMGUI_API void          PushStyleColor(ImGuiCol idx, ImU32 col);\n    IMGUI_API void          PushStyleColor(ImGuiCol idx, const ImVec4& col);\n    IMGUI_API void          PopStyleColor(int count = 1);\n    IMGUI_API void          PushStyleVar(ImGuiStyleVar idx, float val);\n    IMGUI_API void          PushStyleVar(ImGuiStyleVar idx, const ImVec2& val);\n    IMGUI_API void          PopStyleVar(int count = 1);\n    IMGUI_API const ImVec4& GetStyleColorVec4(ImGuiCol idx);                                // retrieve style color as stored in ImGuiStyle structure. use to feed back into PushStyleColor(), otherwise use GetColorU32() to get style color with style alpha baked in.\n    IMGUI_API ImFont* GetFont();                                                      // get current font\n    IMGUI_API float         GetFontSize();                                                  // get current font size (= height in pixels) of current font with current scale applied\n    IMGUI_API ImVec2        GetFontTexUvWhitePixel();                                       // get UV coordinate for a while pixel, useful to draw custom shapes via the ImDrawList API\n    IMGUI_API ImU32         GetColorU32(ImGuiCol idx, float alpha_mul = 1.0f);              // retrieve given style color with style alpha applied and optional extra alpha multiplier\n    IMGUI_API ImU32         GetColorU32(const ImVec4& col);                                 // retrieve given color with style alpha applied\n    IMGUI_API ImU32         GetColorU32(ImU32 col);                                         // retrieve given color with style alpha applied\n\n    // Parameters stacks (current window)\n    IMGUI_API void          PushItemWidth(float item_width);                                // push width of items for common large \"item+label\" widgets. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -1.0f always align width to the right side). 0.0f = default to ~2/3 of windows width,\n    IMGUI_API void          PopItemWidth();\n    IMGUI_API void          SetNextItemWidth(float item_width);                             // set width of the _next_ common large \"item+label\" widget. >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -1.0f always align width to the right side)\n    IMGUI_API float         CalcItemWidth();                                                // width of item given pushed settings and current cursor position. NOT necessarily the width of last item unlike most 'Item' functions.\n    IMGUI_API void          PushTextWrapPos(float wrap_local_pos_x = 0.0f);                 // push word-wrapping position for Text*() commands. < 0.0f: no wrapping; 0.0f: wrap to end of window (or column); > 0.0f: wrap at 'wrap_pos_x' position in window local space\n    IMGUI_API void          PopTextWrapPos();\n    IMGUI_API void          PushAllowKeyboardFocus(bool allow_keyboard_focus);              // allow focusing using TAB/Shift-TAB, enabled by default but you can disable it for certain widgets\n    IMGUI_API void          PopAllowKeyboardFocus();\n    IMGUI_API void          PushButtonRepeat(bool repeat);                                  // in 'repeat' mode, Button*() functions return repeated true in a typematic manner (using io.KeyRepeatDelay/io.KeyRepeatRate setting). Note that you can call IsItemActive() after any Button() to tell if the button is held in the current frame.\n    IMGUI_API void          PopButtonRepeat();\n\n    // Cursor / Layout\n    // - By \"cursor\" we mean the current output position.\n    // - The typical widget behavior is to output themselves at the current cursor position, then move the cursor one line down.\n    // - You can call SameLine() between widgets to undo the last carriage return and output at the right of the preceding widget.\n    // - Attention! We currently have inconsistencies between window-local and absolute positions we will aim to fix with future API:\n    //    Window-local coordinates:   SameLine(), GetCursorPos(), SetCursorPos(), GetCursorStartPos(), GetContentRegionMax(), GetWindowContentRegion*(), PushTextWrapPos()\n    //    Absolute coordinate:        GetCursorScreenPos(), SetCursorScreenPos(), all ImDrawList:: functions.\n    IMGUI_API void          Separator();                                                    // separator, generally horizontal. inside a menu bar or in horizontal layout mode, this becomes a vertical separator.\n    IMGUI_API void          SameLine(float offset_from_start_x = 0.0f, float spacing = -1.0f);  // call between widgets or groups to layout them horizontally. X position given in window coordinates.\n    IMGUI_API void          NewLine();                                                      // undo a SameLine() or force a new line when in an horizontal-layout context.\n    IMGUI_API void          Spacing();                                                      // add vertical spacing.\n    IMGUI_API void          Dummy(const ImVec2& size);                                      // add a dummy item of given size. unlike InvisibleButton(), Dummy() won't take the mouse click or be navigable into.\n    IMGUI_API void          Indent(float indent_w = 0.0f);                                  // move content position toward the right, by style.IndentSpacing or indent_w if != 0\n    IMGUI_API void          Unindent(float indent_w = 0.0f);                                // move content position back to the left, by style.IndentSpacing or indent_w if != 0\n    IMGUI_API void          BeginGroup();                                                   // lock horizontal starting position\n    IMGUI_API void          EndGroup();                                                     // unlock horizontal starting position + capture the whole group bounding box into one \"item\" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)\n    IMGUI_API ImVec2        GetCursorPos();                                                 // cursor position in window coordinates (relative to window position)\n    IMGUI_API float         GetCursorPosX();                                                //   (some functions are using window-relative coordinates, such as: GetCursorPos, GetCursorStartPos, GetContentRegionMax, GetWindowContentRegion* etc.\n    IMGUI_API float         GetCursorPosY();                                                //    other functions such as GetCursorScreenPos or everything in ImDrawList::\n    IMGUI_API void          SetCursorPos(const ImVec2& local_pos);                          //    are using the main, absolute coordinate system.\n    IMGUI_API void          SetCursorPosX(float local_x);                                   //    GetWindowPos() + GetCursorPos() == GetCursorScreenPos() etc.)\n    IMGUI_API void          SetCursorPosY(float local_y);                                   //\n    IMGUI_API ImVec2        GetCursorStartPos();                                            // initial cursor position in window coordinates\n    IMGUI_API ImVec2        GetCursorScreenPos();                                           // cursor position in absolute screen coordinates (0..io.DisplaySize) or natural OS coordinates when using multiple viewport. Useful to work with ImDrawList API.\n    IMGUI_API void          SetCursorScreenPos(const ImVec2& pos);                          // cursor position in absolute screen coordinates (0..io.DisplaySize) or natural OS coordinates when using multiple viewport.\n    IMGUI_API void          AlignTextToFramePadding();                                      // vertically align upcoming text baseline to FramePadding.y so that it will align properly to regularly framed items (call if you have text on a line before a framed item)\n    IMGUI_API float         GetTextLineHeight();                                            // ~ FontSize\n    IMGUI_API float         GetTextLineHeightWithSpacing();                                 // ~ FontSize + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of text)\n    IMGUI_API float         GetFrameHeight();                                               // ~ FontSize + style.FramePadding.y * 2\n    IMGUI_API float         GetFrameHeightWithSpacing();                                    // ~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)\n\n    // ID stack/scopes\n    // - Read the FAQ for more details about how ID are handled in dear imgui. If you are creating widgets in a loop you most\n    //   likely want to push a unique identifier (e.g. object pointer, loop index) to uniquely differentiate them.\n    // - The resulting ID are hashes of the entire stack.\n    // - You can also use the \"Label##foobar\" syntax within widget label to distinguish them from each others.\n    // - In this header file we use the \"label\"/\"name\" terminology to denote a string that will be displayed and used as an ID,\n    //   whereas \"str_id\" denote a string that is only used as an ID and not normally displayed.\n    IMGUI_API void          PushID(const char* str_id);                                     // push string into the ID stack (will hash string).\n    IMGUI_API void          PushID(const char* str_id_begin, const char* str_id_end);       // push string into the ID stack (will hash string).\n    IMGUI_API void          PushID(const void* ptr_id);                                     // push pointer into the ID stack (will hash pointer).\n    IMGUI_API void          PushID(int int_id);                                             // push integer into the ID stack (will hash integer).\n    IMGUI_API void          PopID();                                                        // pop from the ID stack.\n    IMGUI_API ImGuiID       GetID(const char* str_id);                                      // calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself\n    IMGUI_API ImGuiID       GetID(const char* str_id_begin, const char* str_id_end);\n    IMGUI_API ImGuiID       GetID(const void* ptr_id);\n\n    // Widgets: Text\n    IMGUI_API void          TextUnformatted(const char* text, const char* text_end = NULL); // raw text without formatting. Roughly equivalent to Text(\"%s\", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.\n    IMGUI_API void          Text(const char* fmt, ...)                                      IM_FMTARGS(1); // formatted text\n    IMGUI_API void          TextV(const char* fmt, va_list args)                            IM_FMTLIST(1);\n    IMGUI_API void          TextColored(const ImVec4& col, const char* fmt, ...)            IM_FMTARGS(2); // shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...); PopStyleColor();\n    IMGUI_API void          TextColoredV(const ImVec4& col, const char* fmt, va_list args)  IM_FMTLIST(2);\n    IMGUI_API void          TextDisabled(const char* fmt, ...)                              IM_FMTARGS(1); // shortcut for PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...); PopStyleColor();\n    IMGUI_API void          TextDisabledV(const char* fmt, va_list args)                    IM_FMTLIST(1);\n    IMGUI_API void          TextWrapped(const char* fmt, ...)                               IM_FMTARGS(1); // shortcut for PushTextWrapPos(0.0f); Text(fmt, ...); PopTextWrapPos();. Note that this won't work on an auto-resizing window if there's no other widgets to extend the window width, yoy may need to set a size using SetNextWindowSize().\n    IMGUI_API void          TextWrappedV(const char* fmt, va_list args)                     IM_FMTLIST(1);\n    IMGUI_API void          LabelText(const char* label, const char* fmt, ...)              IM_FMTARGS(2); // display text+label aligned the same way as value+label widgets\n    IMGUI_API void          LabelTextV(const char* label, const char* fmt, va_list args)    IM_FMTLIST(2);\n    IMGUI_API void          BulletText(const char* fmt, ...)                                IM_FMTARGS(1); // shortcut for Bullet()+Text()\n    IMGUI_API void          BulletTextV(const char* fmt, va_list args)                      IM_FMTLIST(1);\n\n    // Widgets: Main\n    // - Most widgets return true when the value has been changed or when pressed/selected\n    // - You may also use one of the many IsItemXXX functions (e.g. IsItemActive, IsItemHovered, etc.) to query widget state.\n    IMGUI_API bool          Button(const char* label, const ImVec2& size = ImVec2(0, 0));   // button\n    IMGUI_API bool          SmallButton(const char* label);                                 // button with FramePadding=(0,0) to easily embed within text\n    IMGUI_API bool          InvisibleButton(const char* str_id, const ImVec2& size);        // button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)\n    IMGUI_API bool          ArrowButton(const char* str_id, ImGuiDir dir);                  // square button with an arrow shape\n    IMGUI_API void          Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0, 0), const ImVec2& uv1 = ImVec2(1, 1), const ImVec4& tint_col = ImVec4(1, 1, 1, 1), const ImVec4& border_col = ImVec4(0, 0, 0, 0));\n    IMGUI_API bool          ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0 = ImVec2(0, 0), const ImVec2& uv1 = ImVec2(1, 1), int frame_padding = -1, const ImVec4& bg_col = ImVec4(0, 0, 0, 0), const ImVec4& tint_col = ImVec4(1, 1, 1, 1));    // <0 frame_padding uses default frame padding settings. 0 for no padding\n    IMGUI_API bool          Checkbox(const char* label, bool* v);\n    IMGUI_API bool          CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value);\n    IMGUI_API bool          RadioButton(const char* label, bool active);                    // use with e.g. if (RadioButton(\"one\", my_value==1)) { my_value = 1; }\n    IMGUI_API bool          RadioButton(const char* label, int* v, int v_button);           // shortcut to handle the above pattern when value is an integer\n    IMGUI_API void          ProgressBar(float fraction, const ImVec2& size_arg = ImVec2(-1, 0), const char* overlay = NULL);\n    IMGUI_API void          Bullet();                                                       // draw a small circle and keep the cursor on the same line. advance cursor x position by GetTreeNodeToLabelSpacing(), same distance that TreeNode() uses\n\n    // Widgets: Combo Box\n    // - The BeginCombo()/EndCombo() api allows you to manage your contents and selection state however you want it, by creating e.g. Selectable() items.\n    // - The old Combo() api are helpers over BeginCombo()/EndCombo() which are kept available for convenience purpose.\n    IMGUI_API bool          BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags = 0);\n    IMGUI_API void          EndCombo(); // only call EndCombo() if BeginCombo() returns true!\n    IMGUI_API bool          Combo(const char* label, int* current_item, const char* const items[], int items_count, int popup_max_height_in_items = -1);\n    IMGUI_API bool          Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int popup_max_height_in_items = -1);      // Separate items with \\0 within a string, end item-list with \\0\\0. e.g. \"One\\0Two\\0Three\\0\"\n    IMGUI_API bool          Combo(const char* label, int* current_item, bool(*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count, int popup_max_height_in_items = -1);\n\n    // Widgets: Drags\n    // - CTRL+Click on any drag box to turn them into an input box. Manually input values aren't clamped and can go off-bounds.\n    // - For all the Float2/Float3/Float4/Int2/Int3/Int4 versions of every functions, note that a 'float v[X]' function argument is the same as 'float* v', the array syntax is just a way to document the number of elements that are expected to be accessible. You can pass address of your first element out of a contiguous set, e.g. &myvector.x\n    // - Adjust format string to decorate the value with a prefix, a suffix, or adapt the editing and display precision e.g. \"%.3f\" -> 1.234; \"%5.2f secs\" -> 01.23 secs; \"Biscuit: %.0f\" -> Biscuit: 1; etc.\n    // - Speed are per-pixel of mouse movement (v_speed=0.2f: mouse needs to move by 5 pixels to increase value by 1). For gamepad/keyboard navigation, minimum speed is Max(v_speed, minimum_step_at_given_precision).\n    // - Use v_min < v_max to clamp edits to given limits. Note that CTRL+Click manual input can override those limits.\n    // - Use v_max = FLT_MAX / INT_MAX etc to avoid clamping to a maximum, same with v_min = -FLT_MAX / INT_MIN to avoid clamping to a minimum.\n    // - Use v_min > v_max to lock edits.\n    IMGUI_API bool          DragFloat(const char* label, float* v, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = \"%.3f\", float power = 1.0f);     // If v_min >= v_max we have no bound\n    IMGUI_API bool          DragFloat2(const char* label, float v[2], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = \"%.3f\", float power = 1.0f);\n    IMGUI_API bool          DragFloat3(const char* label, float v[3], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = \"%.3f\", float power = 1.0f);\n    IMGUI_API bool          DragFloat4(const char* label, float v[4], float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = \"%.3f\", float power = 1.0f);\n    IMGUI_API bool          DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed = 1.0f, float v_min = 0.0f, float v_max = 0.0f, const char* format = \"%.3f\", const char* format_max = NULL, float power = 1.0f);\n    IMGUI_API bool          DragInt(const char* label, int* v, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = \"%d\");                                       // If v_min >= v_max we have no bound\n    IMGUI_API bool          DragInt2(const char* label, int v[2], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = \"%d\");\n    IMGUI_API bool          DragInt3(const char* label, int v[3], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = \"%d\");\n    IMGUI_API bool          DragInt4(const char* label, int v[4], float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = \"%d\");\n    IMGUI_API bool          DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed = 1.0f, int v_min = 0, int v_max = 0, const char* format = \"%d\", const char* format_max = NULL);\n    IMGUI_API bool          DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed, const void* p_min = NULL, const void* p_max = NULL, const char* format = NULL, float power = 1.0f);\n    IMGUI_API bool          DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, float v_speed, const void* p_min = NULL, const void* p_max = NULL, const char* format = NULL, float power = 1.0f);\n\n    // Widgets: Sliders\n    // - CTRL+Click on any slider to turn them into an input box. Manually input values aren't clamped and can go off-bounds.\n    // - Adjust format string to decorate the value with a prefix, a suffix, or adapt the editing and display precision e.g. \"%.3f\" -> 1.234; \"%5.2f secs\" -> 01.23 secs; \"Biscuit: %.0f\" -> Biscuit: 1; etc.\n    IMGUI_API bool          SliderFloat(const char* label, float* v, float v_min, float v_max, const char* format = \"%.3f\", float power = 1.0f);     // adjust format to decorate the value with a prefix or a suffix for in-slider labels or unit display. Use power!=1.0 for power curve sliders\n    IMGUI_API bool          SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* format = \"%.3f\", float power = 1.0f);\n    IMGUI_API bool          SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* format = \"%.3f\", float power = 1.0f);\n    IMGUI_API bool          SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* format = \"%.3f\", float power = 1.0f);\n    IMGUI_API bool          SliderAngle(const char* label, float* v_rad, float v_degrees_min = -360.0f, float v_degrees_max = +360.0f, const char* format = \"%.0f deg\");\n    IMGUI_API bool          SliderInt(const char* label, int* v, int v_min, int v_max, const char* format = \"%d\");\n    IMGUI_API bool          SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format = \"%d\");\n    IMGUI_API bool          SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format = \"%d\");\n    IMGUI_API bool          SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format = \"%d\");\n    IMGUI_API bool          SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format = NULL, float power = 1.0f);\n    IMGUI_API bool          SliderScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format = NULL, float power = 1.0f);\n    IMGUI_API bool          VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_max, const char* format = \"%.3f\", float power = 1.0f);\n    IMGUI_API bool          VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, const char* format = \"%d\");\n    IMGUI_API bool          VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* p_data, const void* p_min, const void* p_max, const char* format = NULL, float power = 1.0f);\n\n    // Widgets: Input with Keyboard\n    // - If you want to use InputText() with std::string or any custom dynamic string type, see misc/cpp/imgui_stdlib.h and comments in imgui_demo.cpp.\n    // - Most of the ImGuiInputTextFlags flags are only useful for InputText() and not for InputFloatX, InputIntX, InputDouble etc.\n    IMGUI_API bool          InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);\n    IMGUI_API bool          InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size = ImVec2(0, 0), ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);\n    IMGUI_API bool          InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, ImGuiInputTextFlags flags = 0, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);\n    IMGUI_API bool          InputFloat(const char* label, float* v, float step = 0.0f, float step_fast = 0.0f, const char* format = \"%.3f\", ImGuiInputTextFlags flags = 0);\n    IMGUI_API bool          InputFloat2(const char* label, float v[2], const char* format = \"%.3f\", ImGuiInputTextFlags flags = 0);\n    IMGUI_API bool          InputFloat3(const char* label, float v[3], const char* format = \"%.3f\", ImGuiInputTextFlags flags = 0);\n    IMGUI_API bool          InputFloat4(const char* label, float v[4], const char* format = \"%.3f\", ImGuiInputTextFlags flags = 0);\n    IMGUI_API bool          InputInt(const char* label, int* v, int step = 1, int step_fast = 100, ImGuiInputTextFlags flags = 0);\n    IMGUI_API bool          InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags = 0);\n    IMGUI_API bool          InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags = 0);\n    IMGUI_API bool          InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags = 0);\n    IMGUI_API bool          InputDouble(const char* label, double* v, double step = 0.0, double step_fast = 0.0, const char* format = \"%.6f\", ImGuiInputTextFlags flags = 0);\n    IMGUI_API bool          InputScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_step = NULL, const void* p_step_fast = NULL, const char* format = NULL, ImGuiInputTextFlags flags = 0);\n    IMGUI_API bool          InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_step = NULL, const void* p_step_fast = NULL, const char* format = NULL, ImGuiInputTextFlags flags = 0);\n\n    // Widgets: Color Editor/Picker (tip: the ColorEdit* functions have a little colored preview square that can be left-clicked to open a picker, and right-clicked to open an option menu.)\n    // - Note that in C++ a 'float v[X]' function argument is the _same_ as 'float* v', the array syntax is just a way to document the number of elements that are expected to be accessible.\n    // - You can pass the address of a first float element out of a contiguous structure, e.g. &myvector.x\n    IMGUI_API bool          ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags = 0);\n    IMGUI_API bool          ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags = 0);\n    IMGUI_API bool          ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags = 0);\n    IMGUI_API bool          ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags = 0, const float* ref_col = NULL);\n    IMGUI_API bool          ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags = 0, ImVec2 size = ImVec2(0, 0)); // display a colored square/button, hover for details, return true when pressed.\n    IMGUI_API void          SetColorEditOptions(ImGuiColorEditFlags flags);                     // initialize current options (generally on application startup) if you want to select a default format, picker type, etc. User will be able to change many settings, unless you pass the _NoOptions flag to your calls.\n\n    // Widgets: Trees\n    // - TreeNode functions return true when the node is open, in which case you need to also call TreePop() when you are finished displaying the tree node contents.\n    IMGUI_API bool          TreeNode(const char* label);\n    IMGUI_API bool          TreeNode(const char* str_id, const char* fmt, ...) IM_FMTARGS(2);   // helper variation to easily decorelate the id from the displayed string. Read the FAQ about why and how to use ID. to align arbitrary text at the same level as a TreeNode() you can use Bullet().\n    IMGUI_API bool          TreeNode(const void* ptr_id, const char* fmt, ...) IM_FMTARGS(2);   // \"\n    IMGUI_API bool          TreeNodeV(const char* str_id, const char* fmt, va_list args) IM_FMTLIST(2);\n    IMGUI_API bool          TreeNodeV(const void* ptr_id, const char* fmt, va_list args) IM_FMTLIST(2);\n    IMGUI_API bool          TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags = 0);\n    IMGUI_API bool          TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...) IM_FMTARGS(3);\n    IMGUI_API bool          TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...) IM_FMTARGS(3);\n    IMGUI_API bool          TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args) IM_FMTLIST(3);\n    IMGUI_API bool          TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args) IM_FMTLIST(3);\n    IMGUI_API void          TreePush(const char* str_id);                                       // ~ Indent()+PushId(). Already called by TreeNode() when returning true, but you can call TreePush/TreePop yourself if desired.\n    IMGUI_API void          TreePush(const void* ptr_id = NULL);                                // \"\n    IMGUI_API void          TreePop();                                                          // ~ Unindent()+PopId()\n    IMGUI_API float         GetTreeNodeToLabelSpacing();                                        // horizontal distance preceding label when using TreeNode*() or Bullet() == (g.FontSize + style.FramePadding.x*2) for a regular unframed TreeNode\n    IMGUI_API bool          CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags = 0);  // if returning 'true' the header is open. doesn't indent nor push on ID stack. user doesn't have to call TreePop().\n    IMGUI_API bool          CollapsingHeader(const char* label, bool* p_open, ImGuiTreeNodeFlags flags = 0); // when 'p_open' isn't NULL, display an additional small close button on upper right of the header\n    IMGUI_API void          SetNextItemOpen(bool is_open, ImGuiCond cond = 0);                  // set next TreeNode/CollapsingHeader open state.\n\n    // Widgets: Selectables\n    // - A selectable highlights when hovered, and can display another color when selected.\n    // - Neighbors selectable extend their highlight bounds in order to leave no gap between them. This is so a series of selected Selectable appear contiguous.\n    IMGUI_API bool          Selectable(const char* label, bool selected = false, ImGuiSelectableFlags flags = 0, const ImVec2& size = ImVec2(0, 0)); // \"bool selected\" carry the selection state (read-only). Selectable() is clicked is returns true so you can modify your selection state. size.x==0.0: use remaining width, size.x>0.0: specify width. size.y==0.0: use label height, size.y>0.0: specify height\n    IMGUI_API bool          Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags = 0, const ImVec2& size = ImVec2(0, 0));      // \"bool* p_selected\" point to the selection state (read-write), as a convenient helper.\n\n    // Widgets: List Boxes\n    // - FIXME: To be consistent with all the newer API, ListBoxHeader/ListBoxFooter should in reality be called BeginListBox/EndListBox. Will rename them.\n    IMGUI_API bool          ListBox(const char* label, int* current_item, const char* const items[], int items_count, int height_in_items = -1);\n    IMGUI_API bool          ListBox(const char* label, int* current_item, bool (*items_getter)(void* data, int idx, const char** out_text), void* data, int items_count, int height_in_items = -1);\n    IMGUI_API bool          ListBoxHeader(const char* label, const ImVec2& size = ImVec2(0, 0)); // use if you want to reimplement ListBox() will custom data or interactions. if the function return true, you can output elements then call ListBoxFooter() afterwards.\n    IMGUI_API bool          ListBoxHeader(const char* label, int items_count, int height_in_items = -1); // \"\n    IMGUI_API void          ListBoxFooter();                                                    // terminate the scrolling region. only call ListBoxFooter() if ListBoxHeader() returned true!\n\n    // Widgets: Data Plotting\n    IMGUI_API void          PlotLines(const char* label, const float* values, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0), int stride = sizeof(float));\n    IMGUI_API void          PlotLines(const char* label, float(*values_getter)(void* data, int idx), void* data, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0));\n    IMGUI_API void          PlotHistogram(const char* label, const float* values, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0), int stride = sizeof(float));\n    IMGUI_API void          PlotHistogram(const char* label, float(*values_getter)(void* data, int idx), void* data, int values_count, int values_offset = 0, const char* overlay_text = NULL, float scale_min = FLT_MAX, float scale_max = FLT_MAX, ImVec2 graph_size = ImVec2(0, 0));\n\n    // Widgets: Value() Helpers.\n    // - Those are merely shortcut to calling Text() with a format string. Output single value in \"name: value\" format (tip: freely declare more in your code to handle your types. you can add functions to the ImGui namespace)\n    IMGUI_API void          Value(const char* prefix, bool b);\n    IMGUI_API void          Value(const char* prefix, int v);\n    IMGUI_API void          Value(const char* prefix, unsigned int v);\n    IMGUI_API void          Value(const char* prefix, float v, const char* float_format = NULL);\n\n    // Widgets: Menus\n    // - Use BeginMenuBar() on a window ImGuiWindowFlags_MenuBar to append to its menu bar.\n    // - Use BeginMainMenuBar() to create a menu bar at the top of the screen and append to it.\n    // - Use BeginMenu() to create a menu. You can call BeginMenu() multiple time with the same identifier to append more items to it.\n    IMGUI_API bool          BeginMenuBar();                                                     // append to menu-bar of current window (requires ImGuiWindowFlags_MenuBar flag set on parent window).\n    IMGUI_API void          EndMenuBar();                                                       // only call EndMenuBar() if BeginMenuBar() returns true!\n    IMGUI_API bool          BeginMainMenuBar();                                                 // create and append to a full screen menu-bar.\n    IMGUI_API void          EndMainMenuBar();                                                   // only call EndMainMenuBar() if BeginMainMenuBar() returns true!\n    IMGUI_API bool          BeginMenu(const char* label, bool enabled = true);                  // create a sub-menu entry. only call EndMenu() if this returns true!\n    IMGUI_API void          EndMenu();                                                          // only call EndMenu() if BeginMenu() returns true!\n    IMGUI_API bool          MenuItem(const char* label, const char* shortcut = NULL, bool selected = false, bool enabled = true);  // return true when activated. shortcuts are displayed for convenience but not processed by ImGui at the moment\n    IMGUI_API bool          MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled = true);              // return true when activated + toggle (*p_selected) if p_selected != NULL\n\n    // Tooltips\n    // - Tooltip are windows following the mouse which do not take focus away.\n    IMGUI_API void          BeginTooltip();                                                     // begin/append a tooltip window. to create full-featured tooltip (with any kind of items).\n    IMGUI_API void          EndTooltip();\n    IMGUI_API void          SetTooltip(const char* fmt, ...) IM_FMTARGS(1);                     // set a text-only tooltip, typically use with ImGui::IsItemHovered(). override any previous call to SetTooltip().\n    IMGUI_API void          SetTooltipV(const char* fmt, va_list args) IM_FMTLIST(1);\n\n    // Popups, Modals\n    //  - They block normal mouse hovering detection (and therefore most mouse interactions) behind them.\n    //  - If not modal: they can be closed by clicking anywhere outside them, or by pressing ESCAPE.\n    //  - Their visibility state (~bool) is held internally instead of being held by the programmer as we are used to with regular Begin*() calls.\n    //  - The 3 properties above are related: we need to retain popup visibility state in the library because popups may be closed as any time.\n    //  - You can bypass the hovering restriction by using ImGuiHoveredFlags_AllowWhenBlockedByPopup when calling IsItemHovered() or IsWindowHovered().\n    //  - IMPORTANT: Popup identifiers are relative to the current ID stack, so OpenPopup and BeginPopup generally needs to be at the same level of the stack.\n    //    This is sometimes leading to confusing mistakes. May rework this in the future.\n    // Popups: begin/end functions\n    //  - BeginPopup(): query popup state, if open start appending into the window. Call EndPopup() afterwards. ImGuiWindowFlags are forwarded to the window.\n    //  - BeginPopupModal(): block every interactions behind the window, cannot be closed by user, add a dimming background, has a title bar.\n    IMGUI_API bool          BeginPopup(const char* str_id, ImGuiWindowFlags flags = 0);                         // return true if the popup is open, and you can start outputting to it.\n    IMGUI_API bool          BeginPopupModal(const char* name, bool* p_open = NULL, ImGuiWindowFlags flags = 0); // return true if the modal is open, and you can start outputting to it.\n    IMGUI_API void          EndPopup();                                                                         // only call EndPopup() if BeginPopupXXX() returns true!\n    // Popups: open/close functions\n    //  - OpenPopup(): set popup state to open. ImGuiPopupFlags are available for opening options.\n    //  - If not modal: they can be closed by clicking anywhere outside them, or by pressing ESCAPE.\n    //  - CloseCurrentPopup(): use inside the BeginPopup()/EndPopup() scope to close manually.\n    //  - CloseCurrentPopup() is called by default by Selectable()/MenuItem() when activated (FIXME: need some options).\n    //  - Use ImGuiPopupFlags_NoOpenOverExistingPopup to avoid opening a popup if there's already one at the same level. This is equivalent to e.g. testing for !IsAnyPopupOpen() prior to OpenPopup().\n    IMGUI_API void          OpenPopup(const char* str_id, ImGuiPopupFlags popup_flags = 0);                     // call to mark popup as open (don't call every frame!).\n    IMGUI_API bool          OpenPopupContextItem(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1);   // helper to open popup when clicked on last item. return true when just opened. (note: actually triggers on the mouse _released_ event to be consistent with popup behaviors)\n    IMGUI_API void          CloseCurrentPopup();                                                                // manually close the popup we have begin-ed into.\n    // Popups: open+begin combined functions helpers\n    //  - Helpers to do OpenPopup+BeginPopup where the Open action is triggered by e.g. hovering an item and right-clicking.\n    //  - They are convenient to easily create context menus, hence the name.\n    //  - IMPORTANT: Notice that BeginPopupContextXXX takes ImGuiPopupFlags just like OpenPopup() and unlike BeginPopup(). For full consistency, we may add ImGuiWindowFlags to the BeginPopupContextXXX functions in the future.\n    //  - We exceptionally default their flags to 1 (== ImGuiPopupFlags_MouseButtonRight) for backward compatibility with older API taking 'int mouse_button = 1' parameter. Passing a mouse button to ImGuiPopupFlags is guaranteed to be legal.\n    IMGUI_API bool          BeginPopupContextItem(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1);  // open+begin popup when clicked on last item. if you can pass a NULL str_id only if the previous item had an id. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!\n    IMGUI_API bool          BeginPopupContextWindow(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1);// open+begin popup when clicked on current window.\n    IMGUI_API bool          BeginPopupContextVoid(const char* str_id = NULL, ImGuiPopupFlags popup_flags = 1);  // open+begin popup when clicked in void (where there are no windows).\n    // Popups: test function\n    //  - IsPopupOpen(): return true if the popup is open at the current BeginPopup() level of the popup stack.\n    //  - IsPopupOpen() with ImGuiPopupFlags_AnyPopupId: return true if any popup is open at the current BeginPopup() level of the popup stack.\n    //  - IsPopupOpen() with ImGuiPopupFlags_AnyPopupId + ImGuiPopupFlags_AnyPopupLevel: return true if any popup is open.\n    IMGUI_API bool          IsPopupOpen(const char* str_id, ImGuiPopupFlags flags = 0);                         // return true if the popup is open.\n\n    // Columns\n    // - You can also use SameLine(pos_x) to mimic simplified columns.\n    // - The columns API is work-in-progress and rather lacking (columns are arguably the worst part of dear imgui at the moment!)\n    // - There is a maximum of 64 columns.\n    // - Currently working on new 'Tables' api which will replace columns around Q2 2020 (see GitHub #2957).\n    IMGUI_API void          Columns(int count = 1, const char* id = NULL, bool border = true);\n    IMGUI_API void          NextColumn();                                                       // next column, defaults to current row or next row if the current row is finished\n    IMGUI_API int           GetColumnIndex();                                                   // get current column index\n    IMGUI_API float         GetColumnWidth(int column_index = -1);                              // get column width (in pixels). pass -1 to use current column\n    IMGUI_API void          SetColumnWidth(int column_index, float width);                      // set column width (in pixels). pass -1 to use current column\n    IMGUI_API float         GetColumnOffset(int column_index = -1);                             // get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetColumnsCount() inclusive. column 0 is typically 0.0f\n    IMGUI_API void          SetColumnOffset(int column_index, float offset_x);                  // set position of column line (in pixels, from the left side of the contents region). pass -1 to use current column\n    IMGUI_API int           GetColumnsCount();\n\n    // Tab Bars, Tabs\n    // Note: Tabs are automatically created by the docking system. Use this to create tab bars/tabs yourself without docking being involved.\n    IMGUI_API bool          BeginTabBar(const char* str_id, ImGuiTabBarFlags flags = 0);        // create and append into a TabBar\n    IMGUI_API void          EndTabBar();                                                        // only call EndTabBar() if BeginTabBar() returns true!\n    IMGUI_API bool          BeginTabItem(const char* label, bool* p_open = NULL, ImGuiTabItemFlags flags = 0);// create a Tab. Returns true if the Tab is selected.\n    IMGUI_API void          EndTabItem();                                                       // only call EndTabItem() if BeginTabItem() returns true!\n    IMGUI_API void          SetTabItemClosed(const char* tab_or_docked_window_label);           // notify TabBar or Docking system of a closed tab/window ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name.\n\n    // Docking\n    // [BETA API] Enable with io.ConfigFlags |= ImGuiConfigFlags_DockingEnable.\n    // Note: You can use most Docking facilities without calling any API. You DO NOT need to call DockSpace() to use Docking!\n    // - To dock windows: if io.ConfigDockingWithShift == false (default) drag window from their title bar.\n    // - To dock windows: if io.ConfigDockingWithShift == true: hold SHIFT anywhere while moving windows.\n    // About DockSpace:\n    // - Use DockSpace() to create an explicit dock node _within_ an existing window. See Docking demo for details.\n    // - DockSpace() needs to be submitted _before_ any window they can host. If you use a dockspace, submit it early in your app.\n    IMGUI_API void          DockSpace(ImGuiID id, const ImVec2& size = ImVec2(0, 0), ImGuiDockNodeFlags flags = 0, const ImGuiWindowClass* window_class = NULL);\n    IMGUI_API ImGuiID       DockSpaceOverViewport(ImGuiViewport* viewport = NULL, ImGuiDockNodeFlags flags = 0, const ImGuiWindowClass* window_class = NULL);\n    IMGUI_API void          SetNextWindowDockID(ImGuiID dock_id, ImGuiCond cond = 0);           // set next window dock id (FIXME-DOCK)\n    IMGUI_API void          SetNextWindowClass(const ImGuiWindowClass* window_class);           // set next window class (rare/advanced uses: provide hints to the platform back-end via altered viewport flags and parent/child info)\n    IMGUI_API ImGuiID       GetWindowDockID();\n    IMGUI_API bool          IsWindowDocked();                                                   // is current window docked into another window?\n\n    // Logging/Capture\n    // - All text output from the interface can be captured into tty/file/clipboard. By default, tree nodes are automatically opened during logging.\n    IMGUI_API void          LogToTTY(int auto_open_depth = -1);                                 // start logging to tty (stdout)\n    IMGUI_API void          LogToFile(int auto_open_depth = -1, const char* filename = NULL);   // start logging to file\n    IMGUI_API void          LogToClipboard(int auto_open_depth = -1);                           // start logging to OS clipboard\n    IMGUI_API void          LogFinish();                                                        // stop logging (close file, etc.)\n    IMGUI_API void          LogButtons();                                                       // helper to display buttons for logging to tty/file/clipboard\n    IMGUI_API void          LogText(const char* fmt, ...) IM_FMTARGS(1);                        // pass text data straight to log (without being displayed)\n\n    // Drag and Drop\n    // - [BETA API] API may evolve!\n    // - If you stop calling BeginDragDropSource() the payload is preserved however it won't have a preview tooltip (we currently display a fallback \"...\" tooltip as replacement)\n    IMGUI_API bool          BeginDragDropSource(ImGuiDragDropFlags flags = 0);                                      // call when the current item is active. If this return true, you can call SetDragDropPayload() + EndDragDropSource()\n    IMGUI_API bool          SetDragDropPayload(const char* type, const void* data, size_t sz, ImGuiCond cond = 0);  // type is a user defined string of maximum 32 characters. Strings starting with '_' are reserved for dear imgui internal types. Data is copied and held by imgui.\n    IMGUI_API void          EndDragDropSource();                                                                    // only call EndDragDropSource() if BeginDragDropSource() returns true!\n    IMGUI_API bool                  BeginDragDropTarget();                                                          // call after submitting an item that may receive a payload. If this returns true, you can call AcceptDragDropPayload() + EndDragDropTarget()\n    IMGUI_API const ImGuiPayload* AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags = 0);          // accept contents of a given type. If ImGuiDragDropFlags_AcceptBeforeDelivery is set you can peek into the payload before the mouse button is released.\n    IMGUI_API void                  EndDragDropTarget();                                                            // only call EndDragDropTarget() if BeginDragDropTarget() returns true!\n    IMGUI_API const ImGuiPayload* GetDragDropPayload();                                                           // peek directly into the current payload from anywhere. may return NULL. use ImGuiPayload::IsDataType() to test for the payload type.\n\n    // Clipping\n    IMGUI_API void          PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect);\n    IMGUI_API void          PopClipRect();\n\n    // Focus, Activation\n    // - Prefer using \"SetItemDefaultFocus()\" over \"if (IsWindowAppearing()) SetScrollHereY()\" when applicable to signify \"this is the default item\"\n    IMGUI_API void          SetItemDefaultFocus();                                              // make last item the default focused item of a window.\n    IMGUI_API void          SetKeyboardFocusHere(int offset = 0);                               // focus keyboard on the next widget. Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget.\n\n    // Item/Widgets Utilities\n    // - Most of the functions are referring to the last/previous item we submitted.\n    // - See Demo Window under \"Widgets->Querying Status\" for an interactive visualization of most of those functions.\n    IMGUI_API bool          IsItemHovered(ImGuiHoveredFlags flags = 0);                         // is the last item hovered? (and usable, aka not blocked by a popup, etc.). See ImGuiHoveredFlags for more options.\n    IMGUI_API bool          IsItemActive();                                                     // is the last item active? (e.g. button being held, text field being edited. This will continuously return true while holding mouse button on an item. Items that don't interact will always return false)\n    IMGUI_API bool          IsItemFocused();                                                    // is the last item focused for keyboard/gamepad navigation?\n    IMGUI_API bool          IsItemClicked(ImGuiMouseButton mouse_button = 0);                   // is the last item clicked? (e.g. button/node just clicked on) == IsMouseClicked(mouse_button) && IsItemHovered()\n    IMGUI_API bool          IsItemVisible();                                                    // is the last item visible? (items may be out of sight because of clipping/scrolling)\n    IMGUI_API bool          IsItemEdited();                                                     // did the last item modify its underlying value this frame? or was pressed? This is generally the same as the \"bool\" return value of many widgets.\n    IMGUI_API bool          IsItemActivated();                                                  // was the last item just made active (item was previously inactive).\n    IMGUI_API bool          IsItemDeactivated();                                                // was the last item just made inactive (item was previously active). Useful for Undo/Redo patterns with widgets that requires continuous editing.\n    IMGUI_API bool          IsItemDeactivatedAfterEdit();                                       // was the last item just made inactive and made a value change when it was active? (e.g. Slider/Drag moved). Useful for Undo/Redo patterns with widgets that requires continuous editing. Note that you may get false positives (some widgets such as Combo()/ListBox()/Selectable() will return true even when clicking an already selected item).\n    IMGUI_API bool          IsItemToggledOpen();                                                // was the last item open state toggled? set by TreeNode().\n    IMGUI_API bool          IsAnyItemHovered();                                                 // is any item hovered?\n    IMGUI_API bool          IsAnyItemActive();                                                  // is any item active?\n    IMGUI_API bool          IsAnyItemFocused();                                                 // is any item focused?\n    IMGUI_API ImVec2        GetItemRectMin();                                                   // get upper-left bounding rectangle of the last item (screen space)\n    IMGUI_API ImVec2        GetItemRectMax();                                                   // get lower-right bounding rectangle of the last item (screen space)\n    IMGUI_API ImVec2        GetItemRectSize();                                                  // get size of last item\n    IMGUI_API void          SetItemAllowOverlap();                                              // allow last item to be overlapped by a subsequent item. sometimes useful with invisible buttons, selectables, etc. to catch unused area.\n\n    // Miscellaneous Utilities\n    IMGUI_API bool          IsRectVisible(const ImVec2& size);                                  // test if rectangle (of given size, starting from cursor position) is visible / not clipped.\n    IMGUI_API bool          IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max);      // test if rectangle (in screen space) is visible / not clipped. to perform coarse clipping on user's side.\n    IMGUI_API double        GetTime();                                                          // get global imgui time. incremented by io.DeltaTime every frame.\n    IMGUI_API int           GetFrameCount();                                                    // get global imgui frame count. incremented by 1 every frame.\n    IMGUI_API ImDrawList* GetBackgroundDrawList();                                            // get background draw list for the viewport associated to the current window. this draw list will be the first rendering one. Useful to quickly draw shapes/text behind dear imgui contents.\n    IMGUI_API ImDrawList* GetForegroundDrawList();                                            // get foreground draw list for the viewport associated to the current window. this draw list will be the last rendered one. Useful to quickly draw shapes/text over dear imgui contents.\n    IMGUI_API ImDrawList* GetBackgroundDrawList(ImGuiViewport* viewport);                     // get background draw list for the given viewport. this draw list will be the first rendering one. Useful to quickly draw shapes/text behind dear imgui contents.\n    IMGUI_API ImDrawList* GetForegroundDrawList(ImGuiViewport* viewport);                     // get foreground draw list for the given viewport. this draw list will be the last rendered one. Useful to quickly draw shapes/text over dear imgui contents.\n    IMGUI_API ImDrawListSharedData* GetDrawListSharedData();                                    // you may use this when creating your own ImDrawList instances.\n    IMGUI_API const char* GetStyleColorName(ImGuiCol idx);                                    // get a string corresponding to the enum value (for display, saving, etc.).\n    IMGUI_API void          SetStateStorage(ImGuiStorage* storage);                             // replace current window storage with our own (if you want to manipulate it yourself, typically clear subsection of it)\n    IMGUI_API ImGuiStorage* GetStateStorage();\n    IMGUI_API void          CalcListClipping(int items_count, float items_height, int* out_items_display_start, int* out_items_display_end);    // calculate coarse clipping for large list of evenly sized items. Prefer using the ImGuiListClipper higher-level helper if you can.\n    IMGUI_API bool          BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags flags = 0); // helper to create a child window / scrolling region that looks like a normal widget frame\n    IMGUI_API void          EndChildFrame();                                                    // always call EndChildFrame() regardless of BeginChildFrame() return values (which indicates a collapsed/clipped window)\n\n    // Text Utilities\n    IMGUI_API ImVec2        CalcTextSize(const char* text, const char* text_end = NULL, bool hide_text_after_double_hash = false, float wrap_width = -1.0f);\n\n    // Color Utilities\n    IMGUI_API ImVec4        ColorConvertU32ToFloat4(ImU32 in);\n    IMGUI_API ImU32         ColorConvertFloat4ToU32(const ImVec4& in);\n    IMGUI_API void          ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& out_v);\n    IMGUI_API void          ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& out_b);\n\n    // Inputs Utilities: Keyboard\n    // - For 'int user_key_index' you can use your own indices/enums according to how your back-end/engine stored them in io.KeysDown[].\n    // - We don't know the meaning of those value. You can use GetKeyIndex() to map a ImGuiKey_ value into the user index.\n    IMGUI_API int           GetKeyIndex(ImGuiKey imgui_key);                                    // map ImGuiKey_* values into user's key index. == io.KeyMap[key]\n    IMGUI_API bool          IsKeyDown(int user_key_index);                                      // is key being held. == io.KeysDown[user_key_index].\n    IMGUI_API bool          IsKeyPressed(int user_key_index, bool repeat = true);               // was key pressed (went from !Down to Down)? if repeat=true, uses io.KeyRepeatDelay / KeyRepeatRate\n    IMGUI_API bool          IsKeyReleased(int user_key_index);                                  // was key released (went from Down to !Down)?\n    IMGUI_API int           GetKeyPressedAmount(int key_index, float repeat_delay, float rate); // uses provided repeat rate/delay. return a count, most often 0 or 1 but might be >1 if RepeatRate is small enough that DeltaTime > RepeatRate\n    IMGUI_API void          CaptureKeyboardFromApp(bool want_capture_keyboard_value = true);    // attention: misleading name! manually override io.WantCaptureKeyboard flag next frame (said flag is entirely left for your application to handle). e.g. force capture keyboard when your widget is being hovered. This is equivalent to setting \"io.WantCaptureKeyboard = want_capture_keyboard_value\"; after the next NewFrame() call.\n\n    // Inputs Utilities: Mouse\n    // - To refer to a mouse button, you may use named enums in your code e.g. ImGuiMouseButton_Left, ImGuiMouseButton_Right.\n    // - You can also use regular integer: it is forever guaranteed that 0=Left, 1=Right, 2=Middle.\n    // - Dragging operations are only reported after mouse has moved a certain distance away from the initial clicking position (see 'lock_threshold' and 'io.MouseDraggingThreshold')\n    IMGUI_API bool          IsMouseDown(ImGuiMouseButton button);                               // is mouse button held?\n    IMGUI_API bool          IsMouseClicked(ImGuiMouseButton button, bool repeat = false);       // did mouse button clicked? (went from !Down to Down)\n    IMGUI_API bool          IsMouseReleased(ImGuiMouseButton button);                           // did mouse button released? (went from Down to !Down)\n    IMGUI_API bool          IsMouseDoubleClicked(ImGuiMouseButton button);                      // did mouse button double-clicked? a double-click returns false in IsMouseClicked(). uses io.MouseDoubleClickTime.\n    IMGUI_API bool          IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip = true);// is mouse hovering given bounding rect (in screen space). clipped by current clipping settings, but disregarding of other consideration of focus/window ordering/popup-block.\n    IMGUI_API bool          IsMousePosValid(const ImVec2* mouse_pos = NULL);                    // by convention we use (-FLT_MAX,-FLT_MAX) to denote that there is no mouse available\n    IMGUI_API bool          IsAnyMouseDown();                                                   // is any mouse button held?\n    IMGUI_API ImVec2        GetMousePos();                                                      // shortcut to ImGui::GetIO().MousePos provided by user, to be consistent with other calls\n    IMGUI_API ImVec2        GetMousePosOnOpeningCurrentPopup();                                 // retrieve mouse position at the time of opening popup we have BeginPopup() into (helper to avoid user backing that value themselves)\n    IMGUI_API bool          IsMouseDragging(ImGuiMouseButton button, float lock_threshold = -1.0f);         // is mouse dragging? (if lock_threshold < -1.0f, uses io.MouseDraggingThreshold)\n    IMGUI_API ImVec2        GetMouseDragDelta(ImGuiMouseButton button = 0, float lock_threshold = -1.0f);   // return the delta from the initial clicking position while the mouse button is pressed or was just released. This is locked and return 0.0f until the mouse moves past a distance threshold at least once (if lock_threshold < -1.0f, uses io.MouseDraggingThreshold)\n    IMGUI_API void          ResetMouseDragDelta(ImGuiMouseButton button = 0);                   //\n    IMGUI_API ImGuiMouseCursor GetMouseCursor();                                                // get desired cursor type, reset in ImGui::NewFrame(), this is updated during the frame. valid before Render(). If you use software rendering by setting io.MouseDrawCursor ImGui will render those for you\n    IMGUI_API void          SetMouseCursor(ImGuiMouseCursor cursor_type);                       // set desired cursor type\n    IMGUI_API void          CaptureMouseFromApp(bool want_capture_mouse_value = true);          // attention: misleading name! manually override io.WantCaptureMouse flag next frame (said flag is entirely left for your application to handle). This is equivalent to setting \"io.WantCaptureMouse = want_capture_mouse_value;\" after the next NewFrame() call.\n\n    // Clipboard Utilities\n    // - Also see the LogToClipboard() function to capture GUI into clipboard, or easily output text data to the clipboard.\n    IMGUI_API const char* GetClipboardText();\n    IMGUI_API void          SetClipboardText(const char* text);\n\n    // Settings/.Ini Utilities\n    // - The disk functions are automatically called if io.IniFilename != NULL (default is \"imgui.ini\").\n    // - Set io.IniFilename to NULL to load/save manually. Read io.WantSaveIniSettings description about handling .ini saving manually.\n    IMGUI_API void          LoadIniSettingsFromDisk(const char* ini_filename);                  // call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename).\n    IMGUI_API void          LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size = 0); // call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.\n    IMGUI_API void          SaveIniSettingsToDisk(const char* ini_filename);                    // this is automatically called (if io.IniFilename is not empty) a few seconds after any modification that should be reflected in the .ini file (and also by DestroyContext).\n    IMGUI_API const char* SaveIniSettingsToMemory(size_t* out_ini_size = NULL);               // return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.\n\n    // Debug Utilities\n    IMGUI_API bool          DebugCheckVersionAndDataLayout(const char* version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx); // This is called by IMGUI_CHECKVERSION() macro.\n\n    // Memory Allocators\n    // - All those functions are not reliant on the current context.\n    // - If you reload the contents of imgui.cpp at runtime, you may need to call SetCurrentContext() + SetAllocatorFunctions() again because we use global storage for those.\n    IMGUI_API void          SetAllocatorFunctions(void* (*alloc_func)(size_t sz, void* user_data), void (*free_func)(void* ptr, void* user_data), void* user_data = NULL);\n    IMGUI_API void* MemAlloc(size_t size);\n    IMGUI_API void          MemFree(void* ptr);\n\n    // (Optional) Platform/OS interface for multi-viewport support\n    // Read comments around the ImGuiPlatformIO structure for more details.\n    // Note: You may use GetWindowViewport() to get the current viewport of the current window.\n    IMGUI_API ImGuiPlatformIO& GetPlatformIO();                                                // platform/renderer functions, for back-end to setup + viewports list.\n    IMGUI_API ImGuiViewport* GetMainViewport();                                              // main viewport. same as GetPlatformIO().MainViewport == GetPlatformIO().Viewports[0].\n    IMGUI_API void              UpdatePlatformWindows();                                        // call in main loop. will call CreateWindow/ResizeWindow/etc. platform functions for each secondary viewport, and DestroyWindow for each inactive viewport.\n    IMGUI_API void              RenderPlatformWindowsDefault(void* platform_render_arg = NULL, void* renderer_render_arg = NULL); // call in main loop. will call RenderWindow/SwapBuffers platform functions for each secondary viewport which doesn't have the ImGuiViewportFlags_Minimized flag set. May be reimplemented by user for custom rendering needs.\n    IMGUI_API void              DestroyPlatformWindows();                                       // call DestroyWindow platform functions for all viewports. call from back-end Shutdown() if you need to close platform windows before imgui shutdown. otherwise will be called by DestroyContext().\n    IMGUI_API ImGuiViewport* FindViewportByID(ImGuiID id);                                   // this is a helper for back-ends.\n    IMGUI_API ImGuiViewport* FindViewportByPlatformHandle(void* platform_handle);            // this is a helper for back-ends. the type platform_handle is decided by the back-end (e.g. HWND, MyWindow*, GLFWwindow* etc.)\n\n} // namespace ImGui\n\n//-----------------------------------------------------------------------------\n// Flags & Enumerations\n//-----------------------------------------------------------------------------\n\n// Flags for ImGui::Begin()\nenum ImGuiWindowFlags_\n{\n    ImGuiWindowFlags_None = 0,\n    ImGuiWindowFlags_NoTitleBar = 1 << 0,   // Disable title-bar\n    ImGuiWindowFlags_NoResize = 1 << 1,   // Disable user resizing with the lower-right grip\n    ImGuiWindowFlags_NoMove = 1 << 2,   // Disable user moving the window\n    ImGuiWindowFlags_NoScrollbar = 1 << 3,   // Disable scrollbars (window can still scroll with mouse or programmatically)\n    ImGuiWindowFlags_NoScrollWithMouse = 1 << 4,   // Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent unless NoScrollbar is also set.\n    ImGuiWindowFlags_NoCollapse = 1 << 5,   // Disable user collapsing window by double-clicking on it. Also referred to as \"window menu button\" within a docking node.\n    ImGuiWindowFlags_AlwaysAutoResize = 1 << 6,   // Resize every window to its content every frame\n    ImGuiWindowFlags_NoBackground = 1 << 7,   // Disable drawing background color (WindowBg, etc.) and outside border. Similar as using SetNextWindowBgAlpha(0.0f).\n    ImGuiWindowFlags_NoSavedSettings = 1 << 8,   // Never load/save settings in .ini file\n    ImGuiWindowFlags_NoMouseInputs = 1 << 9,   // Disable catching mouse, hovering test with pass through.\n    ImGuiWindowFlags_MenuBar = 1 << 10,  // Has a menu-bar\n    ImGuiWindowFlags_HorizontalScrollbar = 1 << 11,  // Allow horizontal scrollbar to appear (off by default). You may use SetNextWindowContentSize(ImVec2(width,0.0f)); prior to calling Begin() to specify width. Read code in imgui_demo in the \"Horizontal Scrolling\" section.\n    ImGuiWindowFlags_NoFocusOnAppearing = 1 << 12,  // Disable taking focus when transitioning from hidden to visible state\n    ImGuiWindowFlags_NoBringToFrontOnFocus = 1 << 13,  // Disable bringing window to front when taking focus (e.g. clicking on it or programmatically giving it focus)\n    ImGuiWindowFlags_AlwaysVerticalScrollbar = 1 << 14,  // Always show vertical scrollbar (even if ContentSize.y < Size.y)\n    ImGuiWindowFlags_AlwaysHorizontalScrollbar = 1 << 15,  // Always show horizontal scrollbar (even if ContentSize.x < Size.x)\n    ImGuiWindowFlags_AlwaysUseWindowPadding = 1 << 16,  // Ensure child windows without border uses style.WindowPadding (ignored by default for non-bordered child windows, because more convenient)\n    ImGuiWindowFlags_NoNavInputs = 1 << 18,  // No gamepad/keyboard navigation within the window\n    ImGuiWindowFlags_NoNavFocus = 1 << 19,  // No focusing toward this window with gamepad/keyboard navigation (e.g. skipped by CTRL+TAB)\n    ImGuiWindowFlags_UnsavedDocument = 1 << 20,  // Append '*' to title without affecting the ID, as a convenience to avoid using the ### operator. When used in a tab/docking context, tab is selected on closure and closure is deferred by one frame to allow code to cancel the closure (with a confirmation popup, etc.) without flicker.\n    ImGuiWindowFlags_NoDocking = 1 << 21,  // Disable docking of this window\n\n    ImGuiWindowFlags_NoNav = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,\n    ImGuiWindowFlags_NoDecoration = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoCollapse,\n    ImGuiWindowFlags_NoInputs = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,\n\n    // [Internal]\n    ImGuiWindowFlags_NavFlattened = 1 << 23,  // [BETA] Allow gamepad/keyboard navigation to cross over parent border to this child (only use on child that have no scrolling!)\n    ImGuiWindowFlags_ChildWindow = 1 << 24,  // Don't use! For internal use by BeginChild()\n    ImGuiWindowFlags_Tooltip = 1 << 25,  // Don't use! For internal use by BeginTooltip()\n    ImGuiWindowFlags_Popup = 1 << 26,  // Don't use! For internal use by BeginPopup()\n    ImGuiWindowFlags_Modal = 1 << 27,  // Don't use! For internal use by BeginPopupModal()\n    ImGuiWindowFlags_ChildMenu = 1 << 28,  // Don't use! For internal use by BeginMenu()\n    ImGuiWindowFlags_DockNodeHost = 1 << 29   // Don't use! For internal use by Begin()/NewFrame()\n\n    // [Obsolete]\n    //ImGuiWindowFlags_ShowBorders          = 1 << 7,   // --> Set style.FrameBorderSize=1.0f or style.WindowBorderSize=1.0f to enable borders around items or windows.\n    //ImGuiWindowFlags_ResizeFromAnySide    = 1 << 17,  // --> Set io.ConfigWindowsResizeFromEdges=true and make sure mouse cursors are supported by back-end (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors)\n};\n\n// Flags for ImGui::InputText()\nenum ImGuiInputTextFlags_\n{\n    ImGuiInputTextFlags_None = 0,\n    ImGuiInputTextFlags_CharsDecimal = 1 << 0,   // Allow 0123456789.+-*/\n    ImGuiInputTextFlags_CharsHexadecimal = 1 << 1,   // Allow 0123456789ABCDEFabcdef\n    ImGuiInputTextFlags_CharsUppercase = 1 << 2,   // Turn a..z into A..Z\n    ImGuiInputTextFlags_CharsNoBlank = 1 << 3,   // Filter out spaces, tabs\n    ImGuiInputTextFlags_AutoSelectAll = 1 << 4,   // Select entire text when first taking mouse focus\n    ImGuiInputTextFlags_EnterReturnsTrue = 1 << 5,   // Return 'true' when Enter is pressed (as opposed to every time the value was modified). Consider looking at the IsItemDeactivatedAfterEdit() function.\n    ImGuiInputTextFlags_CallbackCompletion = 1 << 6,   // Callback on pressing TAB (for completion handling)\n    ImGuiInputTextFlags_CallbackHistory = 1 << 7,   // Callback on pressing Up/Down arrows (for history handling)\n    ImGuiInputTextFlags_CallbackAlways = 1 << 8,   // Callback on each iteration. User code may query cursor position, modify text buffer.\n    ImGuiInputTextFlags_CallbackCharFilter = 1 << 9,   // Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.\n    ImGuiInputTextFlags_AllowTabInput = 1 << 10,  // Pressing TAB input a '\\t' character into the text field\n    ImGuiInputTextFlags_CtrlEnterForNewLine = 1 << 11,  // In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter (default is opposite: unfocus with Ctrl+Enter, add line with Enter).\n    ImGuiInputTextFlags_NoHorizontalScroll = 1 << 12,  // Disable following the cursor horizontally\n    ImGuiInputTextFlags_AlwaysInsertMode = 1 << 13,  // Insert mode\n    ImGuiInputTextFlags_ReadOnly = 1 << 14,  // Read-only mode\n    ImGuiInputTextFlags_Password = 1 << 15,  // Password mode, display all characters as '*'\n    ImGuiInputTextFlags_NoUndoRedo = 1 << 16,  // Disable undo/redo. Note that input text owns the text data while active, if you want to provide your own undo/redo stack you need e.g. to call ClearActiveID().\n    ImGuiInputTextFlags_CharsScientific = 1 << 17,  // Allow 0123456789.+-*/eE (Scientific notation input)\n    ImGuiInputTextFlags_CallbackResize = 1 << 18,  // Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow. Notify when the string wants to be resized (for string types which hold a cache of their Size). You will be provided a new BufSize in the callback and NEED to honor it. (see misc/cpp/imgui_stdlib.h for an example of using this)\n    // [Internal]\n    ImGuiInputTextFlags_Multiline = 1 << 20,  // For internal use by InputTextMultiline()\n    ImGuiInputTextFlags_NoMarkEdited = 1 << 21   // For internal use by functions using InputText() before reformatting data\n};\n\n// Flags for ImGui::TreeNodeEx(), ImGui::CollapsingHeader*()\nenum ImGuiTreeNodeFlags_\n{\n    ImGuiTreeNodeFlags_None = 0,\n    ImGuiTreeNodeFlags_Selected = 1 << 0,   // Draw as selected\n    ImGuiTreeNodeFlags_Framed = 1 << 1,   // Full colored frame (e.g. for CollapsingHeader)\n    ImGuiTreeNodeFlags_AllowItemOverlap = 1 << 2,   // Hit testing to allow subsequent widgets to overlap this one\n    ImGuiTreeNodeFlags_NoTreePushOnOpen = 1 << 3,   // Don't do a TreePush() when open (e.g. for CollapsingHeader) = no extra indent nor pushing on ID stack\n    ImGuiTreeNodeFlags_NoAutoOpenOnLog = 1 << 4,   // Don't automatically and temporarily open node when Logging is active (by default logging will automatically open tree nodes)\n    ImGuiTreeNodeFlags_DefaultOpen = 1 << 5,   // Default node to be open\n    ImGuiTreeNodeFlags_OpenOnDoubleClick = 1 << 6,   // Need double-click to open node\n    ImGuiTreeNodeFlags_OpenOnArrow = 1 << 7,   // Only open when clicking on the arrow part. If ImGuiTreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or double-click all box to open.\n    ImGuiTreeNodeFlags_Leaf = 1 << 8,   // No collapsing, no arrow (use as a convenience for leaf nodes).\n    ImGuiTreeNodeFlags_Bullet = 1 << 9,   // Display a bullet instead of arrow\n    ImGuiTreeNodeFlags_FramePadding = 1 << 10,  // Use FramePadding (even for an unframed text node) to vertically align text baseline to regular widget height. Equivalent to calling AlignTextToFramePadding().\n    ImGuiTreeNodeFlags_SpanAvailWidth = 1 << 11,  // Extend hit box to the right-most edge, even if not framed. This is not the default in order to allow adding other items on the same line. In the future we may refactor the hit system to be front-to-back, allowing natural overlaps and then this can become the default.\n    ImGuiTreeNodeFlags_SpanFullWidth = 1 << 12,  // Extend hit box to the left-most and right-most edges (bypass the indented area).\n    ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1 << 13,  // (WIP) Nav: left direction may move to this TreeNode() from any of its child (items submitted between TreeNode and TreePop)\n    //ImGuiTreeNodeFlags_NoScrollOnOpen     = 1 << 14,  // FIXME: TODO: Disable automatic scroll on TreePop() if node got just open and contents is not visible\n    ImGuiTreeNodeFlags_CollapsingHeader = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_NoAutoOpenOnLog\n};\n\n// Flags for OpenPopup*(), BeginPopupContext*(), IsPopupOpen() functions.\n// - To be backward compatible with older API which took an 'int mouse_button = 1' argument, we need to treat\n//   small flags values as a mouse button index, so we encode the mouse button in the first few bits of the flags.\n//   It is therefore guaranteed to be legal to pass a mouse button index in ImGuiPopupFlags.\n// - For the same reason, we exceptionally default the ImGuiPopupFlags argument of BeginPopupContextXXX functions to 1 instead of 0.\nenum ImGuiPopupFlags_\n{\n    ImGuiPopupFlags_None = 0,\n    ImGuiPopupFlags_MouseButtonLeft = 0,        // For BeginPopupContext*(): open on Left Mouse release. Guaranted to always be == 0 (same as ImGuiMouseButton_Left)\n    ImGuiPopupFlags_MouseButtonRight = 1,        // For BeginPopupContext*(): open on Right Mouse release. Guaranted to always be == 1 (same as ImGuiMouseButton_Right)\n    ImGuiPopupFlags_MouseButtonMiddle = 2,        // For BeginPopupContext*(): open on Middle Mouse release. Guaranted to always be == 2 (same as ImGuiMouseButton_Middle)\n    ImGuiPopupFlags_MouseButtonMask_ = 0x1F,\n    ImGuiPopupFlags_MouseButtonDefault_ = 1,\n    ImGuiPopupFlags_NoOpenOverExistingPopup = 1 << 5,   // For OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup at the same level of the popup stack\n    ImGuiPopupFlags_NoOpenOverItems = 1 << 6,   // For BeginPopupContextWindow(): don't return true when hovering items, only when hovering empty space\n    ImGuiPopupFlags_AnyPopupId = 1 << 7,   // For IsPopupOpen(): ignore the ImGuiID parameter and test for any popup.\n    ImGuiPopupFlags_AnyPopupLevel = 1 << 8,   // For IsPopupOpen(): search/test at any level of the popup stack (default test in the current level)\n    ImGuiPopupFlags_AnyPopup = ImGuiPopupFlags_AnyPopupId | ImGuiPopupFlags_AnyPopupLevel\n};\n\n// Flags for ImGui::Selectable()\nenum ImGuiSelectableFlags_\n{\n    ImGuiSelectableFlags_None = 0,\n    ImGuiSelectableFlags_DontClosePopups = 1 << 0,   // Clicking this don't close parent popup window\n    ImGuiSelectableFlags_SpanAllColumns = 1 << 1,   // Selectable frame can span all columns (text will still fit in current column)\n    ImGuiSelectableFlags_AllowDoubleClick = 1 << 2,   // Generate press events on double clicks too\n    ImGuiSelectableFlags_Disabled = 1 << 3,   // Cannot be selected, display grayed out text\n    ImGuiSelectableFlags_AllowItemOverlap = 1 << 4    // (WIP) Hit testing to allow subsequent widgets to overlap this one\n};\n\n// Flags for ImGui::BeginCombo()\nenum ImGuiComboFlags_\n{\n    ImGuiComboFlags_None = 0,\n    ImGuiComboFlags_PopupAlignLeft = 1 << 0,   // Align the popup toward the left by default\n    ImGuiComboFlags_HeightSmall = 1 << 1,   // Max ~4 items visible. Tip: If you want your combo popup to be a specific size you can use SetNextWindowSizeConstraints() prior to calling BeginCombo()\n    ImGuiComboFlags_HeightRegular = 1 << 2,   // Max ~8 items visible (default)\n    ImGuiComboFlags_HeightLarge = 1 << 3,   // Max ~20 items visible\n    ImGuiComboFlags_HeightLargest = 1 << 4,   // As many fitting items as possible\n    ImGuiComboFlags_NoArrowButton = 1 << 5,   // Display on the preview box without the square arrow button\n    ImGuiComboFlags_NoPreview = 1 << 6,   // Display only a square arrow button\n    ImGuiComboFlags_HeightMask_ = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_HeightRegular | ImGuiComboFlags_HeightLarge | ImGuiComboFlags_HeightLargest\n};\n\n// Flags for ImGui::BeginTabBar()\nenum ImGuiTabBarFlags_\n{\n    ImGuiTabBarFlags_None = 0,\n    ImGuiTabBarFlags_Reorderable = 1 << 0,   // Allow manually dragging tabs to re-order them + New tabs are appended at the end of list\n    ImGuiTabBarFlags_AutoSelectNewTabs = 1 << 1,   // Automatically select new tabs when they appear\n    ImGuiTabBarFlags_TabListPopupButton = 1 << 2,   // Disable buttons to open the tab list popup\n    ImGuiTabBarFlags_NoCloseWithMiddleMouseButton = 1 << 3,   // Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false.\n    ImGuiTabBarFlags_NoTabListScrollingButtons = 1 << 4,   // Disable scrolling buttons (apply when fitting policy is ImGuiTabBarFlags_FittingPolicyScroll)\n    ImGuiTabBarFlags_NoTooltip = 1 << 5,   // Disable tooltips when hovering a tab\n    ImGuiTabBarFlags_FittingPolicyResizeDown = 1 << 6,   // Resize tabs when they don't fit\n    ImGuiTabBarFlags_FittingPolicyScroll = 1 << 7,   // Add scroll buttons when tabs don't fit\n    ImGuiTabBarFlags_FittingPolicyMask_ = ImGuiTabBarFlags_FittingPolicyResizeDown | ImGuiTabBarFlags_FittingPolicyScroll,\n    ImGuiTabBarFlags_FittingPolicyDefault_ = ImGuiTabBarFlags_FittingPolicyResizeDown\n};\n\n// Flags for ImGui::BeginTabItem()\nenum ImGuiTabItemFlags_\n{\n    ImGuiTabItemFlags_None = 0,\n    ImGuiTabItemFlags_UnsavedDocument = 1 << 0,   // Append '*' to title without affecting the ID, as a convenience to avoid using the ### operator. Also: tab is selected on closure and closure is deferred by one frame to allow code to undo it without flicker.\n    ImGuiTabItemFlags_SetSelected = 1 << 1,   // Trigger flag to programmatically make the tab selected when calling BeginTabItem()\n    ImGuiTabItemFlags_NoCloseWithMiddleMouseButton = 1 << 2,   // Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false.\n    ImGuiTabItemFlags_NoPushId = 1 << 3,   // Don't call PushID(tab->ID)/PopID() on BeginTabItem()/EndTabItem()\n    ImGuiTabItemFlags_NoTooltip = 1 << 4    // Disable tooltip for the given tab\n};\n\n// Flags for ImGui::IsWindowFocused()\nenum ImGuiFocusedFlags_\n{\n    ImGuiFocusedFlags_None = 0,\n    ImGuiFocusedFlags_ChildWindows = 1 << 0,   // IsWindowFocused(): Return true if any children of the window is focused\n    ImGuiFocusedFlags_RootWindow = 1 << 1,   // IsWindowFocused(): Test from root window (top most parent of the current hierarchy)\n    ImGuiFocusedFlags_AnyWindow = 1 << 2,   // IsWindowFocused(): Return true if any window is focused. Important: If you are trying to tell how to dispatch your low-level inputs, do NOT use this. Use 'io.WantCaptureMouse' instead! Please read the FAQ!\n    ImGuiFocusedFlags_RootAndChildWindows = ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows\n};\n\n// Flags for ImGui::IsItemHovered(), ImGui::IsWindowHovered()\n// Note: if you are trying to check whether your mouse should be dispatched to Dear ImGui or to your app, you should use 'io.WantCaptureMouse' instead! Please read the FAQ!\n// Note: windows with the ImGuiWindowFlags_NoInputs flag are ignored by IsWindowHovered() calls.\nenum ImGuiHoveredFlags_\n{\n    ImGuiHoveredFlags_None = 0,        // Return true if directly over the item/window, not obstructed by another window, not obstructed by an active popup or modal blocking inputs under them.\n    ImGuiHoveredFlags_ChildWindows = 1 << 0,   // IsWindowHovered() only: Return true if any children of the window is hovered\n    ImGuiHoveredFlags_RootWindow = 1 << 1,   // IsWindowHovered() only: Test from root window (top most parent of the current hierarchy)\n    ImGuiHoveredFlags_AnyWindow = 1 << 2,   // IsWindowHovered() only: Return true if any window is hovered\n    ImGuiHoveredFlags_AllowWhenBlockedByPopup = 1 << 3,   // Return true even if a popup window is normally blocking access to this item/window\n    //ImGuiHoveredFlags_AllowWhenBlockedByModal     = 1 << 4,   // Return true even if a modal popup window is normally blocking access to this item/window. FIXME-TODO: Unavailable yet.\n    ImGuiHoveredFlags_AllowWhenBlockedByActiveItem = 1 << 5,   // Return true even if an active item is blocking access to this item/window. Useful for Drag and Drop patterns.\n    ImGuiHoveredFlags_AllowWhenOverlapped = 1 << 6,   // Return true even if the position is obstructed or overlapped by another window\n    ImGuiHoveredFlags_AllowWhenDisabled = 1 << 7,   // Return true even if the item is disabled\n    ImGuiHoveredFlags_RectOnly = ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem | ImGuiHoveredFlags_AllowWhenOverlapped,\n    ImGuiHoveredFlags_RootAndChildWindows = ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows\n};\n\n// Flags for ImGui::DockSpace(), shared/inherited by child nodes.\n// (Some flags can be applied to individual nodes directly)\n// FIXME-DOCK: Also see ImGuiDockNodeFlagsPrivate_ which may involve using the WIP and internal DockBuilder api.\nenum ImGuiDockNodeFlags_\n{\n    ImGuiDockNodeFlags_None = 0,\n    ImGuiDockNodeFlags_KeepAliveOnly = 1 << 0,   // Shared       // Don't display the dockspace node but keep it alive. Windows docked into this dockspace node won't be undocked.\n    //ImGuiDockNodeFlags_NoCentralNode              = 1 << 1,   // Shared       // Disable Central Node (the node which can stay empty)\n    ImGuiDockNodeFlags_NoDockingInCentralNode = 1 << 2,   // Shared       // Disable docking inside the Central Node, which will be always kept empty.\n    ImGuiDockNodeFlags_PassthruCentralNode = 1 << 3,   // Shared       // Enable passthru dockspace: 1) DockSpace() will render a ImGuiCol_WindowBg background covering everything excepted the Central Node when empty. Meaning the host window should probably use SetNextWindowBgAlpha(0.0f) prior to Begin() when using this. 2) When Central Node is empty: let inputs pass-through + won't display a DockingEmptyBg background. See demo for details.\n    ImGuiDockNodeFlags_NoSplit = 1 << 4,   // Shared/Local // Disable splitting the node into smaller nodes. Useful e.g. when embedding dockspaces into a main root one (the root one may have splitting disabled to reduce confusion). Note: when turned off, existing splits will be preserved.\n    ImGuiDockNodeFlags_NoResize = 1 << 5,   // Shared/Local // Disable resizing node using the splitter/separators. Useful with programatically setup dockspaces.\n    ImGuiDockNodeFlags_AutoHideTabBar = 1 << 6    // Shared/Local // Tab bar will automatically hide when there is a single window in the dock node.\n};\n\n// Flags for ImGui::BeginDragDropSource(), ImGui::AcceptDragDropPayload()\nenum ImGuiDragDropFlags_\n{\n    ImGuiDragDropFlags_None = 0,\n    // BeginDragDropSource() flags\n    ImGuiDragDropFlags_SourceNoPreviewTooltip = 1 << 0,   // By default, a successful call to BeginDragDropSource opens a tooltip so you can display a preview or description of the source contents. This flag disable this behavior.\n    ImGuiDragDropFlags_SourceNoDisableHover = 1 << 1,   // By default, when dragging we clear data so that IsItemHovered() will return false, to avoid subsequent user code submitting tooltips. This flag disable this behavior so you can still call IsItemHovered() on the source item.\n    ImGuiDragDropFlags_SourceNoHoldToOpenOthers = 1 << 2,   // Disable the behavior that allows to open tree nodes and collapsing header by holding over them while dragging a source item.\n    ImGuiDragDropFlags_SourceAllowNullID = 1 << 3,   // Allow items such as Text(), Image() that have no unique identifier to be used as drag source, by manufacturing a temporary identifier based on their window-relative position. This is extremely unusual within the dear imgui ecosystem and so we made it explicit.\n    ImGuiDragDropFlags_SourceExtern = 1 << 4,   // External source (from outside of dear imgui), won't attempt to read current item/window info. Will always return true. Only one Extern source can be active simultaneously.\n    ImGuiDragDropFlags_SourceAutoExpirePayload = 1 << 5,   // Automatically expire the payload if the source cease to be submitted (otherwise payloads are persisting while being dragged)\n    // AcceptDragDropPayload() flags\n    ImGuiDragDropFlags_AcceptBeforeDelivery = 1 << 10,  // AcceptDragDropPayload() will returns true even before the mouse button is released. You can then call IsDelivery() to test if the payload needs to be delivered.\n    ImGuiDragDropFlags_AcceptNoDrawDefaultRect = 1 << 11,  // Do not draw the default highlight rectangle when hovering over target.\n    ImGuiDragDropFlags_AcceptNoPreviewTooltip = 1 << 12,  // Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.\n    ImGuiDragDropFlags_AcceptPeekOnly = ImGuiDragDropFlags_AcceptBeforeDelivery | ImGuiDragDropFlags_AcceptNoDrawDefaultRect  // For peeking ahead and inspecting the payload before delivery.\n};\n\n// Standard Drag and Drop payload types. You can define you own payload types using short strings. Types starting with '_' are defined by Dear ImGui.\n#define IMGUI_PAYLOAD_TYPE_COLOR_3F     \"_COL3F\"    // float[3]: Standard type for colors, without alpha. User code may use this type.\n#define IMGUI_PAYLOAD_TYPE_COLOR_4F     \"_COL4F\"    // float[4]: Standard type for colors. User code may use this type.\n\n// A primary data type\nenum ImGuiDataType_\n{\n    ImGuiDataType_S8,       // signed char / char (with sensible compilers)\n    ImGuiDataType_U8,       // unsigned char\n    ImGuiDataType_S16,      // short\n    ImGuiDataType_U16,      // unsigned short\n    ImGuiDataType_S32,      // int\n    ImGuiDataType_U32,      // unsigned int\n    ImGuiDataType_S64,      // long long / __int64\n    ImGuiDataType_U64,      // unsigned long long / unsigned __int64\n    ImGuiDataType_Float,    // float\n    ImGuiDataType_Double,   // double\n    ImGuiDataType_COUNT\n};\n\n// A cardinal direction\nenum ImGuiDir_\n{\n    ImGuiDir_None = -1,\n    ImGuiDir_Left = 0,\n    ImGuiDir_Right = 1,\n    ImGuiDir_Up = 2,\n    ImGuiDir_Down = 3,\n    ImGuiDir_COUNT\n};\n\n// User fill ImGuiIO.KeyMap[] array with indices into the ImGuiIO.KeysDown[512] array\nenum ImGuiKey_\n{\n    ImGuiKey_Tab,\n    ImGuiKey_LeftArrow,\n    ImGuiKey_RightArrow,\n    ImGuiKey_UpArrow,\n    ImGuiKey_DownArrow,\n    ImGuiKey_PageUp,\n    ImGuiKey_PageDown,\n    ImGuiKey_Home,\n    ImGuiKey_End,\n    ImGuiKey_Insert,\n    ImGuiKey_Delete,\n    ImGuiKey_Backspace,\n    ImGuiKey_Space,\n    ImGuiKey_Enter,\n    ImGuiKey_Escape,\n    ImGuiKey_KeyPadEnter,\n    ImGuiKey_A,                 // for text edit CTRL+A: select all\n    ImGuiKey_C,                 // for text edit CTRL+C: copy\n    ImGuiKey_V,                 // for text edit CTRL+V: paste\n    ImGuiKey_X,                 // for text edit CTRL+X: cut\n    ImGuiKey_Y,                 // for text edit CTRL+Y: redo\n    ImGuiKey_Z,                 // for text edit CTRL+Z: undo\n    ImGuiKey_COUNT\n};\n\n// To test io.KeyMods (which is a combination of individual fields io.KeyCtrl, io.KeyShift, io.KeyAlt set by user/back-end)\nenum ImGuiKeyModFlags_\n{\n    ImGuiKeyModFlags_None = 0,\n    ImGuiKeyModFlags_Ctrl = 1 << 0,\n    ImGuiKeyModFlags_Shift = 1 << 1,\n    ImGuiKeyModFlags_Alt = 1 << 2,\n    ImGuiKeyModFlags_Super = 1 << 3\n};\n\n// Gamepad/Keyboard navigation\n// Keyboard: Set io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard to enable. NewFrame() will automatically fill io.NavInputs[] based on your io.KeysDown[] + io.KeyMap[] arrays.\n// Gamepad:  Set io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad to enable. Back-end: set ImGuiBackendFlags_HasGamepad and fill the io.NavInputs[] fields before calling NewFrame(). Note that io.NavInputs[] is cleared by EndFrame().\n// Read instructions in imgui.cpp for more details. Download PNG/PSD at http://goo.gl/9LgVZW.\nenum ImGuiNavInput_\n{\n    // Gamepad Mapping\n    ImGuiNavInput_Activate,      // activate / open / toggle / tweak value       // e.g. Cross  (PS4), A (Xbox), A (Switch), Space (Keyboard)\n    ImGuiNavInput_Cancel,        // cancel / close / exit                        // e.g. Circle (PS4), B (Xbox), B (Switch), Escape (Keyboard)\n    ImGuiNavInput_Input,         // text input / on-screen keyboard              // e.g. Triang.(PS4), Y (Xbox), X (Switch), Return (Keyboard)\n    ImGuiNavInput_Menu,          // tap: toggle menu / hold: focus, move, resize // e.g. Square (PS4), X (Xbox), Y (Switch), Alt (Keyboard)\n    ImGuiNavInput_DpadLeft,      // move / tweak / resize window (w/ PadMenu)    // e.g. D-pad Left/Right/Up/Down (Gamepads), Arrow keys (Keyboard)\n    ImGuiNavInput_DpadRight,     //\n    ImGuiNavInput_DpadUp,        //\n    ImGuiNavInput_DpadDown,      //\n    ImGuiNavInput_LStickLeft,    // scroll / move window (w/ PadMenu)            // e.g. Left Analog Stick Left/Right/Up/Down\n    ImGuiNavInput_LStickRight,   //\n    ImGuiNavInput_LStickUp,      //\n    ImGuiNavInput_LStickDown,    //\n    ImGuiNavInput_FocusPrev,     // next window (w/ PadMenu)                     // e.g. L1 or L2 (PS4), LB or LT (Xbox), L or ZL (Switch)\n    ImGuiNavInput_FocusNext,     // prev window (w/ PadMenu)                     // e.g. R1 or R2 (PS4), RB or RT (Xbox), R or ZL (Switch)\n    ImGuiNavInput_TweakSlow,     // slower tweaks                                // e.g. L1 or L2 (PS4), LB or LT (Xbox), L or ZL (Switch)\n    ImGuiNavInput_TweakFast,     // faster tweaks                                // e.g. R1 or R2 (PS4), RB or RT (Xbox), R or ZL (Switch)\n\n    // [Internal] Don't use directly! This is used internally to differentiate keyboard from gamepad inputs for behaviors that require to differentiate them.\n    // Keyboard behavior that have no corresponding gamepad mapping (e.g. CTRL+TAB) will be directly reading from io.KeysDown[] instead of io.NavInputs[].\n    ImGuiNavInput_KeyMenu_,      // toggle menu                                  // = io.KeyAlt\n    ImGuiNavInput_KeyLeft_,      // move left                                    // = Arrow keys\n    ImGuiNavInput_KeyRight_,     // move right\n    ImGuiNavInput_KeyUp_,        // move up\n    ImGuiNavInput_KeyDown_,      // move down\n    ImGuiNavInput_COUNT,\n    ImGuiNavInput_InternalStart_ = ImGuiNavInput_KeyMenu_\n};\n\n// Configuration flags stored in io.ConfigFlags. Set by user/application.\nenum ImGuiConfigFlags_\n{\n    ImGuiConfigFlags_None = 0,\n    ImGuiConfigFlags_NavEnableKeyboard = 1 << 0,   // Master keyboard navigation enable flag. NewFrame() will automatically fill io.NavInputs[] based on io.KeysDown[].\n    ImGuiConfigFlags_NavEnableGamepad = 1 << 1,   // Master gamepad navigation enable flag. This is mostly to instruct your imgui back-end to fill io.NavInputs[]. Back-end also needs to set ImGuiBackendFlags_HasGamepad.\n    ImGuiConfigFlags_NavEnableSetMousePos = 1 << 2,   // Instruct navigation to move the mouse cursor. May be useful on TV/console systems where moving a virtual mouse is awkward. Will update io.MousePos and set io.WantSetMousePos=true. If enabled you MUST honor io.WantSetMousePos requests in your binding, otherwise ImGui will react as if the mouse is jumping around back and forth.\n    ImGuiConfigFlags_NavNoCaptureKeyboard = 1 << 3,   // Instruct navigation to not set the io.WantCaptureKeyboard flag when io.NavActive is set.\n    ImGuiConfigFlags_NoMouse = 1 << 4,   // Instruct imgui to clear mouse position/buttons in NewFrame(). This allows ignoring the mouse information set by the back-end.\n    ImGuiConfigFlags_NoMouseCursorChange = 1 << 5,   // Instruct back-end to not alter mouse cursor shape and visibility. Use if the back-end cursor changes are interfering with yours and you don't want to use SetMouseCursor() to change mouse cursor. You may want to honor requests from imgui by reading GetMouseCursor() yourself instead.\n\n    // [BETA] Docking\n    ImGuiConfigFlags_DockingEnable = 1 << 6,   // Docking enable flags.\n\n    // [BETA] Viewports\n    // When using viewports it is recommended that your default value for ImGuiCol_WindowBg is opaque (Alpha=1.0) so transition to a viewport won't be noticeable.\n    ImGuiConfigFlags_ViewportsEnable = 1 << 10,  // Viewport enable flags (require both ImGuiConfigFlags_PlatformHasViewports + ImGuiConfigFlags_RendererHasViewports set by the respective back-ends)\n    ImGuiConfigFlags_DpiEnableScaleViewports = 1 << 14,  // [BETA: Don't use] FIXME-DPI: Reposition and resize imgui windows when the DpiScale of a viewport changed (mostly useful for the main viewport hosting other window). Note that resizing the main window itself is up to your application.\n    ImGuiConfigFlags_DpiEnableScaleFonts = 1 << 15,  // [BETA: Don't use] FIXME-DPI: Request bitmap-scaled fonts to match DpiScale. This is a very low-quality workaround. The correct way to handle DPI is _currently_ to replace the atlas and/or fonts in the Platform_OnChangedViewport callback, but this is all early work in progress.\n\n    // User storage (to allow your back-end/engine to communicate to code that may be shared between multiple projects. Those flags are not used by core Dear ImGui)\n    ImGuiConfigFlags_IsSRGB = 1 << 20,  // Application is SRGB-aware.\n    ImGuiConfigFlags_IsTouchScreen = 1 << 21   // Application is using a touch screen instead of a mouse.\n};\n\n// Back-end capabilities flags stored in io.BackendFlags. Set by imgui_impl_xxx or custom back-end.\nenum ImGuiBackendFlags_\n{\n    ImGuiBackendFlags_None = 0,\n    ImGuiBackendFlags_HasGamepad = 1 << 0,   // Back-end Platform supports gamepad and currently has one connected.\n    ImGuiBackendFlags_HasMouseCursors = 1 << 1,   // Back-end Platform supports honoring GetMouseCursor() value to change the OS cursor shape.\n    ImGuiBackendFlags_HasSetMousePos = 1 << 2,   // Back-end Platform supports io.WantSetMousePos requests to reposition the OS mouse position (only used if ImGuiConfigFlags_NavEnableSetMousePos is set).\n    ImGuiBackendFlags_RendererHasVtxOffset = 1 << 3,   // Back-end Renderer supports ImDrawCmd::VtxOffset. This enables output of large meshes (64K+ vertices) while still using 16-bit indices.\n\n    // [BETA] Viewports\n    ImGuiBackendFlags_PlatformHasViewports = 1 << 10,  // Back-end Platform supports multiple viewports.\n    ImGuiBackendFlags_HasMouseHoveredViewport = 1 << 11,  // Back-end Platform supports setting io.MouseHoveredViewport to the viewport directly under the mouse _IGNORING_ viewports with the ImGuiViewportFlags_NoInputs flag and _REGARDLESS_ of whether another viewport is focused and may be capturing the mouse. This information is _NOT EASY_ to provide correctly with most high-level engines! Don't set this without studying how the examples/ back-end handle it!\n    ImGuiBackendFlags_RendererHasViewports = 1 << 12   // Back-end Renderer supports multiple viewports.\n};\n\n// Enumeration for PushStyleColor() / PopStyleColor()\nenum ImGuiCol_\n{\n    ImGuiCol_Text,\n    ImGuiCol_TextDisabled,\n    ImGuiCol_WindowBg,              // Background of normal windows\n    ImGuiCol_ChildBg,               // Background of child windows\n    ImGuiCol_PopupBg,               // Background of popups, menus, tooltips windows\n    ImGuiCol_Border,\n    ImGuiCol_BorderShadow,\n    ImGuiCol_FrameBg,               // Background of checkbox, radio button, plot, slider, text input\n    ImGuiCol_FrameBgHovered,\n    ImGuiCol_FrameBgActive,\n    ImGuiCol_TitleBg,\n    ImGuiCol_TitleBgActive,\n    ImGuiCol_TitleBgCollapsed,\n    ImGuiCol_MenuBarBg,\n    ImGuiCol_ScrollbarBg,\n    ImGuiCol_ScrollbarGrab,\n    ImGuiCol_ScrollbarGrabHovered,\n    ImGuiCol_ScrollbarGrabActive,\n    ImGuiCol_CheckMark,\n    ImGuiCol_SliderGrab,\n    ImGuiCol_SliderGrabActive,\n    ImGuiCol_Button,\n    ImGuiCol_ButtonHovered,\n    ImGuiCol_ButtonActive,\n    ImGuiCol_Header,                // Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem\n    ImGuiCol_HeaderHovered,\n    ImGuiCol_HeaderActive,\n    ImGuiCol_Separator,\n    ImGuiCol_SeparatorHovered,\n    ImGuiCol_SeparatorActive,\n    ImGuiCol_ResizeGrip,\n    ImGuiCol_ResizeGripHovered,\n    ImGuiCol_ResizeGripActive,\n    ImGuiCol_Tab,\n    ImGuiCol_TabHovered,\n    ImGuiCol_TabActive,\n    ImGuiCol_TabUnfocused,\n    ImGuiCol_TabUnfocusedActive,\n    ImGuiCol_DockingPreview,        // Preview overlay color when about to docking something\n    ImGuiCol_DockingEmptyBg,        // Background color for empty node (e.g. CentralNode with no window docked into it)\n    ImGuiCol_PlotLines,\n    ImGuiCol_PlotLinesHovered,\n    ImGuiCol_PlotHistogram,\n    ImGuiCol_PlotHistogramHovered,\n    ImGuiCol_TextSelectedBg,\n    ImGuiCol_DragDropTarget,\n    ImGuiCol_NavHighlight,          // Gamepad/keyboard: current highlighted item\n    ImGuiCol_NavWindowingHighlight, // Highlight window when using CTRL+TAB\n    ImGuiCol_NavWindowingDimBg,     // Darken/colorize entire screen behind the CTRL+TAB window list, when active\n    ImGuiCol_ModalWindowDimBg,      // Darken/colorize entire screen behind a modal window, when one is active\n    ImGuiCol_COUNT\n\n    // Obsolete names (will be removed)\n#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS\n    , ImGuiCol_ModalWindowDarkening = ImGuiCol_ModalWindowDimBg                      // [renamed in 1.63]\n    //, ImGuiCol_CloseButton, ImGuiCol_CloseButtonActive, ImGuiCol_CloseButtonHovered// [unused since 1.60+] the close button now uses regular button colors.\n#endif\n};\n\n// Enumeration for PushStyleVar() / PopStyleVar() to temporarily modify the ImGuiStyle structure.\n// - The enum only refers to fields of ImGuiStyle which makes sense to be pushed/popped inside UI code.\n//   During initialization or between frames, feel free to just poke into ImGuiStyle directly.\n// - Tip: Use your programming IDE navigation facilities on the names in the _second column_ below to find the actual members and their description.\n//   In Visual Studio IDE: CTRL+comma (\"Edit.NavigateTo\") can follow symbols in comments, whereas CTRL+F12 (\"Edit.GoToImplementation\") cannot.\n//   With Visual Assist installed: ALT+G (\"VAssistX.GoToImplementation\") can also follow symbols in comments.\n// - When changing this enum, you need to update the associated internal table GStyleVarInfo[] accordingly. This is where we link enum values to members offset/type.\nenum ImGuiStyleVar_\n{\n    // Enum name --------------------- // Member in ImGuiStyle structure (see ImGuiStyle for descriptions)\n    ImGuiStyleVar_Alpha,               // float     Alpha\n    ImGuiStyleVar_WindowPadding,       // ImVec2    WindowPadding\n    ImGuiStyleVar_WindowRounding,      // float     WindowRounding\n    ImGuiStyleVar_WindowBorderSize,    // float     WindowBorderSize\n    ImGuiStyleVar_WindowMinSize,       // ImVec2    WindowMinSize\n    ImGuiStyleVar_WindowTitleAlign,    // ImVec2    WindowTitleAlign\n    ImGuiStyleVar_ChildRounding,       // float     ChildRounding\n    ImGuiStyleVar_ChildBorderSize,     // float     ChildBorderSize\n    ImGuiStyleVar_PopupRounding,       // float     PopupRounding\n    ImGuiStyleVar_PopupBorderSize,     // float     PopupBorderSize\n    ImGuiStyleVar_FramePadding,        // ImVec2    FramePadding\n    ImGuiStyleVar_FrameRounding,       // float     FrameRounding\n    ImGuiStyleVar_FrameBorderSize,     // float     FrameBorderSize\n    ImGuiStyleVar_ItemSpacing,         // ImVec2    ItemSpacing\n    ImGuiStyleVar_ItemInnerSpacing,    // ImVec2    ItemInnerSpacing\n    ImGuiStyleVar_IndentSpacing,       // float     IndentSpacing\n    ImGuiStyleVar_ScrollbarSize,       // float     ScrollbarSize\n    ImGuiStyleVar_ScrollbarRounding,   // float     ScrollbarRounding\n    ImGuiStyleVar_GrabMinSize,         // float     GrabMinSize\n    ImGuiStyleVar_GrabRounding,        // float     GrabRounding\n    ImGuiStyleVar_TabRounding,         // float     TabRounding\n    ImGuiStyleVar_ButtonTextAlign,     // ImVec2    ButtonTextAlign\n    ImGuiStyleVar_SelectableTextAlign, // ImVec2    SelectableTextAlign\n    ImGuiStyleVar_COUNT\n\n    // Obsolete names (will be removed)\n#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS\n    , ImGuiStyleVar_Count_ = ImGuiStyleVar_COUNT                    // [renamed in 1.60]\n#endif\n};\n\n// Flags for ColorEdit3() / ColorEdit4() / ColorPicker3() / ColorPicker4() / ColorButton()\nenum ImGuiColorEditFlags_\n{\n    ImGuiColorEditFlags_None = 0,\n    ImGuiColorEditFlags_NoAlpha = 1 << 1,   //              // ColorEdit, ColorPicker, ColorButton: ignore Alpha component (will only read 3 components from the input pointer).\n    ImGuiColorEditFlags_NoPicker = 1 << 2,   //              // ColorEdit: disable picker when clicking on colored square.\n    ImGuiColorEditFlags_NoOptions = 1 << 3,   //              // ColorEdit: disable toggling options menu when right-clicking on inputs/small preview.\n    ImGuiColorEditFlags_NoSmallPreview = 1 << 4,   //              // ColorEdit, ColorPicker: disable colored square preview next to the inputs. (e.g. to show only the inputs)\n    ImGuiColorEditFlags_NoInputs = 1 << 5,   //              // ColorEdit, ColorPicker: disable inputs sliders/text widgets (e.g. to show only the small preview colored square).\n    ImGuiColorEditFlags_NoTooltip = 1 << 6,   //              // ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.\n    ImGuiColorEditFlags_NoLabel = 1 << 7,   //              // ColorEdit, ColorPicker: disable display of inline text label (the label is still forwarded to the tooltip and picker).\n    ImGuiColorEditFlags_NoSidePreview = 1 << 8,   //              // ColorPicker: disable bigger color preview on right side of the picker, use small colored square preview instead.\n    ImGuiColorEditFlags_NoDragDrop = 1 << 9,   //              // ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.\n    ImGuiColorEditFlags_NoBorder = 1 << 10,  //              // ColorButton: disable border (which is enforced by default)\n\n    // User Options (right-click on widget to change some of them).\n    ImGuiColorEditFlags_AlphaBar = 1 << 16,  //              // ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.\n    ImGuiColorEditFlags_AlphaPreview = 1 << 17,  //              // ColorEdit, ColorPicker, ColorButton: display preview as a transparent color over a checkerboard, instead of opaque.\n    ImGuiColorEditFlags_AlphaPreviewHalf = 1 << 18,  //              // ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard, instead of opaque.\n    ImGuiColorEditFlags_HDR = 1 << 19,  //              // (WIP) ColorEdit: Currently only disable 0.0f..1.0f limits in RGBA edition (note: you probably want to use ImGuiColorEditFlags_Float flag as well).\n    ImGuiColorEditFlags_DisplayRGB = 1 << 20,  // [Display]    // ColorEdit: override _display_ type among RGB/HSV/Hex. ColorPicker: select any combination using one or more of RGB/HSV/Hex.\n    ImGuiColorEditFlags_DisplayHSV = 1 << 21,  // [Display]    // \"\n    ImGuiColorEditFlags_DisplayHex = 1 << 22,  // [Display]    // \"\n    ImGuiColorEditFlags_Uint8 = 1 << 23,  // [DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.\n    ImGuiColorEditFlags_Float = 1 << 24,  // [DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0f..1.0f floats instead of 0..255 integers. No round-trip of value via integers.\n    ImGuiColorEditFlags_PickerHueBar = 1 << 25,  // [Picker]     // ColorPicker: bar for Hue, rectangle for Sat/Value.\n    ImGuiColorEditFlags_PickerHueWheel = 1 << 26,  // [Picker]     // ColorPicker: wheel for Hue, triangle for Sat/Value.\n    ImGuiColorEditFlags_InputRGB = 1 << 27,  // [Input]      // ColorEdit, ColorPicker: input and output data in RGB format.\n    ImGuiColorEditFlags_InputHSV = 1 << 28,  // [Input]      // ColorEdit, ColorPicker: input and output data in HSV format.\n\n    // Defaults Options. You can set application defaults using SetColorEditOptions(). The intent is that you probably don't want to\n    // override them in most of your calls. Let the user choose via the option menu and/or call SetColorEditOptions() once during startup.\n    ImGuiColorEditFlags__OptionsDefault = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_PickerHueBar,\n\n    // [Internal] Masks\n    ImGuiColorEditFlags__DisplayMask = ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_DisplayHSV | ImGuiColorEditFlags_DisplayHex,\n    ImGuiColorEditFlags__DataTypeMask = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Float,\n    ImGuiColorEditFlags__PickerMask = ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFlags_PickerHueBar,\n    ImGuiColorEditFlags__InputMask = ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_InputHSV\n\n    // Obsolete names (will be removed)\n#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS\n    , ImGuiColorEditFlags_RGB = ImGuiColorEditFlags_DisplayRGB, ImGuiColorEditFlags_HSV = ImGuiColorEditFlags_DisplayHSV, ImGuiColorEditFlags_HEX = ImGuiColorEditFlags_DisplayHex  // [renamed in 1.69]\n#endif\n};\n\n// Identify a mouse button.\n// Those values are guaranteed to be stable and we frequently use 0/1 directly. Named enums provided for convenience.\nenum ImGuiMouseButton_\n{\n    ImGuiMouseButton_Left = 0,\n    ImGuiMouseButton_Right = 1,\n    ImGuiMouseButton_Middle = 2,\n    ImGuiMouseButton_COUNT = 5\n};\n\n// Enumeration for GetMouseCursor()\n// User code may request binding to display given cursor by calling SetMouseCursor(), which is why we have some cursors that are marked unused here\nenum ImGuiMouseCursor_\n{\n    ImGuiMouseCursor_None = -1,\n    ImGuiMouseCursor_Arrow = 0,\n    ImGuiMouseCursor_TextInput,         // When hovering over InputText, etc.\n    ImGuiMouseCursor_ResizeAll,         // (Unused by Dear ImGui functions)\n    ImGuiMouseCursor_ResizeNS,          // When hovering over an horizontal border\n    ImGuiMouseCursor_ResizeEW,          // When hovering over a vertical border or a column\n    ImGuiMouseCursor_ResizeNESW,        // When hovering over the bottom-left corner of a window\n    ImGuiMouseCursor_ResizeNWSE,        // When hovering over the bottom-right corner of a window\n    ImGuiMouseCursor_Hand,              // (Unused by Dear ImGui functions. Use for e.g. hyperlinks)\n    ImGuiMouseCursor_NotAllowed,        // When hovering something with disallowed interaction. Usually a crossed circle.\n    ImGuiMouseCursor_COUNT\n\n    // Obsolete names (will be removed)\n#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS\n    , ImGuiMouseCursor_Count_ = ImGuiMouseCursor_COUNT      // [renamed in 1.60]\n#endif\n};\n\n// Enumeration for ImGui::SetWindow***(), SetNextWindow***(), SetNextItem***() functions\n// Represent a condition.\n// Important: Treat as a regular enum! Do NOT combine multiple values using binary operators! All the functions above treat 0 as a shortcut to ImGuiCond_Always.\nenum ImGuiCond_\n{\n    ImGuiCond_None = 0,        // No condition (always set the variable), same as _Always\n    ImGuiCond_Always = 1 << 0,   // No condition (always set the variable)\n    ImGuiCond_Once = 1 << 1,   // Set the variable once per runtime session (only the first call will succeed)\n    ImGuiCond_FirstUseEver = 1 << 2,   // Set the variable if the object/window has no persistently saved data (no entry in .ini file)\n    ImGuiCond_Appearing = 1 << 3    // Set the variable if the object/window is appearing after being hidden/inactive (or the first time)\n};\n\n//-----------------------------------------------------------------------------\n// Helpers: Memory allocations macros\n// IM_MALLOC(), IM_FREE(), IM_NEW(), IM_PLACEMENT_NEW(), IM_DELETE()\n// We call C++ constructor on own allocated memory via the placement \"new(ptr) Type()\" syntax.\n// Defining a custom placement new() with a dummy parameter allows us to bypass including <new> which on some platforms complains when user has disabled exceptions.\n//-----------------------------------------------------------------------------\n\nstruct ImNewDummy {};\ninline void* operator new(size_t, ImNewDummy, void* ptr) { return ptr; }\ninline void  operator delete(void*, ImNewDummy, void*) {} // This is only required so we can use the symmetrical new()\n#define IM_ALLOC(_SIZE)                     ImGui::MemAlloc(_SIZE)\n#define IM_FREE(_PTR)                       ImGui::MemFree(_PTR)\n#define IM_PLACEMENT_NEW(_PTR)              new(ImNewDummy(), _PTR)\n#define IM_NEW(_TYPE)                       new(ImNewDummy(), ImGui::MemAlloc(sizeof(_TYPE))) _TYPE\ntemplate<typename T> void IM_DELETE(T* p) { if (p) { p->~T(); ImGui::MemFree(p); } }\n\n//-----------------------------------------------------------------------------\n// Helper: ImVector<>\n// Lightweight std::vector<>-like class to avoid dragging dependencies (also, some implementations of STL with debug enabled are absurdly slow, we bypass it so our code runs fast in debug).\n//-----------------------------------------------------------------------------\n// - You generally do NOT need to care or use this ever. But we need to make it available in imgui.h because some of our public structures are relying on it.\n// - We use std-like naming convention here, which is a little unusual for this codebase.\n// - Important: clear() frees memory, resize(0) keep the allocated buffer. We use resize(0) a lot to intentionally recycle allocated buffers across frames and amortize our costs.\n// - Important: our implementation does NOT call C++ constructors/destructors, we treat everything as raw data! This is intentional but be extra mindful of that,\n//   Do NOT use this class as a std::vector replacement in your own code! Many of the structures used by dear imgui can be safely initialized by a zero-memset.\n//-----------------------------------------------------------------------------\n\ntemplate<typename T>\nstruct ImVector\n{\n    int                 Size;\n    int                 Capacity;\n    T* Data;\n\n    // Provide standard typedefs but we don't use them ourselves.\n    typedef T                   value_type;\n    typedef value_type* iterator;\n    typedef const value_type* const_iterator;\n\n    // Constructors, destructor\n    inline ImVector() { Size = Capacity = 0; Data = NULL; }\n    inline ImVector(const ImVector<T>& src) { Size = Capacity = 0; Data = NULL; operator=(src); }\n    inline ImVector<T>& operator=(const ImVector<T>& src) { clear(); resize(src.Size); memcpy(Data, src.Data, (size_t)Size * sizeof(T)); return *this; }\n    inline ~ImVector() { if (Data) IM_FREE(Data); }\n\n    inline bool         empty() const { return Size == 0; }\n    inline int          size() const { return Size; }\n    inline int          size_in_bytes() const { return Size * (int)sizeof(T); }\n    inline int          capacity() const { return Capacity; }\n    inline T& operator[](int i) { IM_ASSERT(i < Size); return Data[i]; }\n    inline const T& operator[](int i) const { IM_ASSERT(i < Size); return Data[i]; }\n\n    inline void         clear() { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }\n    inline T* begin() { return Data; }\n    inline const T* begin() const { return Data; }\n    inline T* end() { return Data + Size; }\n    inline const T* end() const { return Data + Size; }\n    inline T& front() { IM_ASSERT(Size > 0); return Data[0]; }\n    inline const T& front() const { IM_ASSERT(Size > 0); return Data[0]; }\n    inline T& back() { IM_ASSERT(Size > 0); return Data[Size - 1]; }\n    inline const T& back() const { IM_ASSERT(Size > 0); return Data[Size - 1]; }\n    inline void         swap(ImVector<T>& rhs) { int rhs_size = rhs.Size; rhs.Size = Size; Size = rhs_size; int rhs_cap = rhs.Capacity; rhs.Capacity = Capacity; Capacity = rhs_cap; T* rhs_data = rhs.Data; rhs.Data = Data; Data = rhs_data; }\n\n    inline int          _grow_capacity(int sz) const { int new_capacity = Capacity ? (Capacity + Capacity / 2) : 8; return new_capacity > sz ? new_capacity : sz; }\n    inline void         resize(int new_size) { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }\n    inline void         resize(int new_size, const T& v) { if (new_size > Capacity) reserve(_grow_capacity(new_size)); if (new_size > Size) for (int n = Size; n < new_size; n++) memcpy(&Data[n], &v, sizeof(v)); Size = new_size; }\n    inline void         shrink(int new_size) { IM_ASSERT(new_size <= Size); Size = new_size; } // Resize a vector to a smaller size, guaranteed not to cause a reallocation\n    inline void         reserve(int new_capacity) { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }\n\n    // NB: It is illegal to call push_back/push_front/insert with a reference pointing inside the ImVector data itself! e.g. v.push_back(v[10]) is forbidden.\n    inline void         push_back(const T& v) { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }\n    inline void         pop_back() { IM_ASSERT(Size > 0); Size--; }\n    inline void         push_front(const T& v) { if (Size == 0) push_back(v); else insert(Data, v); }\n    inline T* erase(const T* it) { IM_ASSERT(it >= Data && it < Data + Size); const ptrdiff_t off = it - Data; memmove(Data + off, Data + off + 1, ((size_t)Size - (size_t)off - 1) * sizeof(T)); Size--; return Data + off; }\n    inline T* erase(const T* it, const T* it_last) { IM_ASSERT(it >= Data && it < Data + Size && it_last > it && it_last <= Data + Size); const ptrdiff_t count = it_last - it; const ptrdiff_t off = it - Data; memmove(Data + off, Data + off + count, ((size_t)Size - (size_t)off - count) * sizeof(T)); Size -= (int)count; return Data + off; }\n    inline T* erase_unsorted(const T* it) { IM_ASSERT(it >= Data && it < Data + Size);  const ptrdiff_t off = it - Data; if (it < Data + Size - 1) memcpy(Data + off, Data + Size - 1, sizeof(T)); Size--; return Data + off; }\n    inline T* insert(const T* it, const T& v) { IM_ASSERT(it >= Data && it <= Data + Size); const ptrdiff_t off = it - Data; if (Size == Capacity) reserve(_grow_capacity(Size + 1)); if (off < (int)Size) memmove(Data + off + 1, Data + off, ((size_t)Size - (size_t)off) * sizeof(T)); memcpy(&Data[off], &v, sizeof(v)); Size++; return Data + off; }\n    inline bool         contains(const T& v) const { const T* data = Data;  const T* data_end = Data + Size; while (data < data_end) if (*data++ == v) return true; return false; }\n    inline T* find(const T& v) { T* data = Data;  const T* data_end = Data + Size; while (data < data_end) if (*data == v) break; else ++data; return data; }\n    inline const T* find(const T& v) const { const T* data = Data;  const T* data_end = Data + Size; while (data < data_end) if (*data == v) break; else ++data; return data; }\n    inline bool         find_erase(const T& v) { const T* it = find(v); if (it < Data + Size) { erase(it); return true; } return false; }\n    inline bool         find_erase_unsorted(const T& v) { const T* it = find(v); if (it < Data + Size) { erase_unsorted(it); return true; } return false; }\n    inline int          index_from_ptr(const T* it) const { IM_ASSERT(it >= Data && it < Data + Size); const ptrdiff_t off = it - Data; return (int)off; }\n};\n\n//-----------------------------------------------------------------------------\n// ImGuiStyle\n// You may modify the ImGui::GetStyle() main instance during initialization and before NewFrame().\n// During the frame, use ImGui::PushStyleVar(ImGuiStyleVar_XXXX)/PopStyleVar() to alter the main style values,\n// and ImGui::PushStyleColor(ImGuiCol_XXX)/PopStyleColor() for colors.\n//-----------------------------------------------------------------------------\n\nstruct ImGuiStyle\n{\n    float       Alpha;                      // Global alpha applies to everything in Dear ImGui.\n    ImVec2      WindowPadding;              // Padding within a window.\n    float       WindowRounding;             // Radius of window corners rounding. Set to 0.0f to have rectangular windows. Large values tend to lead to variety of artifacts and are not recommended.\n    float       WindowBorderSize;           // Thickness of border around windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).\n    ImVec2      WindowMinSize;              // Minimum window size. This is a global setting. If you want to constraint individual windows, use SetNextWindowSizeConstraints().\n    ImVec2      WindowTitleAlign;           // Alignment for title bar text. Defaults to (0.0f,0.5f) for left-aligned,vertically centered.\n    ImGuiDir    WindowMenuButtonPosition;   // Side of the collapsing/docking button in the title bar (None/Left/Right). Defaults to ImGuiDir_Left.\n    float       ChildRounding;              // Radius of child window corners rounding. Set to 0.0f to have rectangular windows.\n    float       ChildBorderSize;            // Thickness of border around child windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).\n    float       PopupRounding;              // Radius of popup window corners rounding. (Note that tooltip windows use WindowRounding)\n    float       PopupBorderSize;            // Thickness of border around popup/tooltip windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).\n    ImVec2      FramePadding;               // Padding within a framed rectangle (used by most widgets).\n    float       FrameRounding;              // Radius of frame corners rounding. Set to 0.0f to have rectangular frame (used by most widgets).\n    float       FrameBorderSize;            // Thickness of border around frames. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly).\n    ImVec2      ItemSpacing;                // Horizontal and vertical spacing between widgets/lines.\n    ImVec2      ItemInnerSpacing;           // Horizontal and vertical spacing between within elements of a composed widget (e.g. a slider and its label).\n    ImVec2      TouchExtraPadding;          // Expand reactive bounding box for touch-based system where touch position is not accurate enough. Unfortunately we don't sort widgets so priority on overlap will always be given to the first widget. So don't grow this too much!\n    float       IndentSpacing;              // Horizontal indentation when e.g. entering a tree node. Generally == (FontSize + FramePadding.x*2).\n    float       ColumnsMinSpacing;          // Minimum horizontal spacing between two columns. Preferably > (FramePadding.x + 1).\n    float       ScrollbarSize;              // Width of the vertical scrollbar, Height of the horizontal scrollbar.\n    float       ScrollbarRounding;          // Radius of grab corners for scrollbar.\n    float       GrabMinSize;                // Minimum width/height of a grab box for slider/scrollbar.\n    float       GrabRounding;               // Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs.\n    float       TabRounding;                // Radius of upper corners of a tab. Set to 0.0f to have rectangular tabs.\n    float       TabBorderSize;              // Thickness of border around tabs.\n    float       TabMinWidthForUnselectedCloseButton; // Minimum width for close button to appears on an unselected tab when hovered. Set to 0.0f to always show when hovering, set to FLT_MAX to never show close button unless selected.\n    ImGuiDir    ColorButtonPosition;        // Side of the color button in the ColorEdit4 widget (left/right). Defaults to ImGuiDir_Right.\n    ImVec2      ButtonTextAlign;            // Alignment of button text when button is larger than text. Defaults to (0.5f, 0.5f) (centered).\n    ImVec2      SelectableTextAlign;        // Alignment of selectable text. Defaults to (0.0f, 0.0f) (top-left aligned). It's generally important to keep this left-aligned if you want to lay multiple items on a same line.\n    ImVec2      DisplayWindowPadding;       // Window position are clamped to be visible within the display area or monitors by at least this amount. Only applies to regular windows.\n    ImVec2      DisplaySafeAreaPadding;     // If you cannot see the edges of your screen (e.g. on a TV) increase the safe area padding. Apply to popups/tooltips as well regular windows. NB: Prefer configuring your TV sets correctly!\n    float       MouseCursorScale;           // Scale software rendered mouse cursor (when io.MouseDrawCursor is enabled). We apply per-monitor DPI scaling over this scale. May be removed later.\n    bool        AntiAliasedLines;           // Enable anti-aliasing on lines/borders. Disable if you are really tight on CPU/GPU.\n    bool        AntiAliasedFill;            // Enable anti-aliasing on filled shapes (rounded rectangles, circles, etc.)\n    float       CurveTessellationTol;       // Tessellation tolerance when using PathBezierCurveTo() without a specific number of segments. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality.\n    float       CircleSegmentMaxError;      // Maximum error (in pixels) allowed when using AddCircle()/AddCircleFilled() or drawing rounded corner rectangles with no explicit segment count specified. Decrease for higher quality but more geometry.\n    ImVec4      Colors[ImGuiCol_COUNT];\n\n    IMGUI_API ImGuiStyle();\n    IMGUI_API void ScaleAllSizes(float scale_factor);\n};\n\n//-----------------------------------------------------------------------------\n// ImGuiIO\n// Communicate most settings and inputs/outputs to Dear ImGui using this structure.\n// Access via ImGui::GetIO(). Read 'Programmer guide' section in .cpp file for general usage.\n//-----------------------------------------------------------------------------\n\nstruct ImGuiIO\n{\n    //------------------------------------------------------------------\n    // Configuration (fill once)                // Default value\n    //------------------------------------------------------------------\n\n    ImGuiConfigFlags   ConfigFlags;             // = 0              // See ImGuiConfigFlags_ enum. Set by user/application. Gamepad/keyboard navigation options, etc.\n    ImGuiBackendFlags  BackendFlags;            // = 0              // See ImGuiBackendFlags_ enum. Set by back-end (imgui_impl_xxx files or custom back-end) to communicate features supported by the back-end.\n    ImVec2      DisplaySize;                    // <unset>          // Main display size, in pixels. This is for the default viewport.\n    float       DeltaTime;                      // = 1.0f/60.0f     // Time elapsed since last frame, in seconds.\n    float       IniSavingRate;                  // = 5.0f           // Minimum time between saving positions/sizes to .ini file, in seconds.\n    const char* IniFilename;                    // = \"imgui.ini\"    // Path to .ini file. Set NULL to disable automatic .ini loading/saving, if e.g. you want to manually load/save from memory.\n    const char* LogFilename;                    // = \"imgui_log.txt\"// Path to .log file (default parameter to ImGui::LogToFile when no file is specified).\n    float       MouseDoubleClickTime;           // = 0.30f          // Time for a double-click, in seconds.\n    float       MouseDoubleClickMaxDist;        // = 6.0f           // Distance threshold to stay in to validate a double-click, in pixels.\n    float       MouseDragThreshold;             // = 6.0f           // Distance threshold before considering we are dragging.\n    int         KeyMap[ImGuiKey_COUNT];         // <unset>          // Map of indices into the KeysDown[512] entries array which represent your \"native\" keyboard state.\n    float       KeyRepeatDelay;                 // = 0.250f         // When holding a key/button, time before it starts repeating, in seconds (for buttons in Repeat mode, etc.).\n    float       KeyRepeatRate;                  // = 0.050f         // When holding a key/button, rate at which it repeats, in seconds.\n    void* UserData;                       // = NULL           // Store your own data for retrieval by callbacks.\n\n    ImFontAtlas* Fonts;                          // <auto>           // Font atlas: load, rasterize and pack one or more fonts into a single texture.\n    float       FontGlobalScale;                // = 1.0f           // Global scale all fonts\n    bool        FontAllowUserScaling;           // = false          // Allow user scaling text of individual window with CTRL+Wheel.\n    ImFont* FontDefault;                    // = NULL           // Font to use on NewFrame(). Use NULL to uses Fonts->Fonts[0].\n    ImVec2      DisplayFramebufferScale;        // = (1, 1)         // For retina display or other situations where window coordinates are different from framebuffer coordinates. This generally ends up in ImDrawData::FramebufferScale.\n\n    // Docking options (when ImGuiConfigFlags_DockingEnable is set)\n    bool        ConfigDockingNoSplit;           // = false          // Simplified docking mode: disable window splitting, so docking is limited to merging multiple windows together into tab-bars.\n    bool        ConfigDockingWithShift;         // = false          // Enable docking with holding Shift key (reduce visual noise, allows dropping in wider space)\n    bool        ConfigDockingAlwaysTabBar;      // = false          // [BETA] [FIXME: This currently creates regression with auto-sizing and general overhead] Make every single floating window display within a docking node.\n    bool        ConfigDockingTransparentPayload;// = false          // [BETA] Make window or viewport transparent when docking and only display docking boxes on the target viewport. Useful if rendering of multiple viewport cannot be synced. Best used with ConfigViewportsNoAutoMerge.\n\n    // Viewport options (when ImGuiConfigFlags_ViewportsEnable is set)\n    bool        ConfigViewportsNoAutoMerge;     // = false;         // Set to make all floating imgui windows always create their own viewport. Otherwise, they are merged into the main host viewports when overlapping it. May also set ImGuiViewportFlags_NoAutoMerge on individual viewport.\n    bool        ConfigViewportsNoTaskBarIcon;   // = false          // Disable default OS task bar icon flag for secondary viewports. When a viewport doesn't want a task bar icon, ImGuiViewportFlags_NoTaskBarIcon will be set on it.\n    bool        ConfigViewportsNoDecoration;    // = true           // [BETA] Disable default OS window decoration flag for secondary viewports. When a viewport doesn't want window decorations, ImGuiViewportFlags_NoDecoration will be set on it. Enabling decoration can create subsequent issues at OS levels (e.g. minimum window size).\n    bool        ConfigViewportsNoDefaultParent; // = false          // Disable default OS parenting to main viewport for secondary viewports. By default, viewports are marked with ParentViewportId = <main_viewport>, expecting the platform back-end to setup a parent/child relationship between the OS windows (some back-end may ignore this). Set to true if you want the default to be 0, then all viewports will be top-level OS windows.\n\n    // Miscellaneous options\n    bool        MouseDrawCursor;                // = false          // Request ImGui to draw a mouse cursor for you (if you are on a platform without a mouse cursor). Cannot be easily renamed to 'io.ConfigXXX' because this is frequently used by back-end implementations.\n    bool        ConfigMacOSXBehaviors;          // = defined(__APPLE__) // OS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts using Cmd/Super instead of Ctrl, Line/Text Start and End using Cmd+Arrows instead of Home/End, Double click selects by word instead of selecting whole text, Multi-selection in lists uses Cmd/Super instead of Ctrl (was called io.OptMacOSXBehaviors prior to 1.63)\n    bool        ConfigInputTextCursorBlink;     // = true           // Set to false to disable blinking cursor, for users who consider it distracting. (was called: io.OptCursorBlink prior to 1.63)\n    bool        ConfigWindowsResizeFromEdges;   // = true           // Enable resizing of windows from their edges and from the lower-left corner. This requires (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors) because it needs mouse cursor feedback. (This used to be a per-window ImGuiWindowFlags_ResizeFromAnySide flag)\n    bool        ConfigWindowsMoveFromTitleBarOnly; // = false       // [BETA] Set to true to only allow moving windows when clicked+dragged from the title bar. Windows without a title bar are not affected.\n    float       ConfigWindowsMemoryCompactTimer;// = 60.0f          // [BETA] Compact window memory usage when unused. Set to -1.0f to disable.\n\n    //------------------------------------------------------------------\n    // Platform Functions\n    // (the imgui_impl_xxxx back-end files are setting those up for you)\n    //------------------------------------------------------------------\n\n    // Optional: Platform/Renderer back-end name (informational only! will be displayed in About Window) + User data for back-end/wrappers to store their own stuff.\n    const char* BackendPlatformName;            // = NULL\n    const char* BackendRendererName;            // = NULL\n    void* BackendPlatformUserData;        // = NULL           // User data for platform back-end\n    void* BackendRendererUserData;        // = NULL           // User data for renderer back-end\n    void* BackendLanguageUserData;        // = NULL           // User data for non C++ programming language back-end\n\n    // Optional: Access OS clipboard\n    // (default to use native Win32 clipboard on Windows, otherwise uses a private clipboard. Override to access OS clipboard on other architectures)\n    const char* (*GetClipboardTextFn)(void* user_data);\n    void        (*SetClipboardTextFn)(void* user_data, const char* text);\n    void* ClipboardUserData;\n\n#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS\n    // [OBSOLETE since 1.60+] Rendering function, will be automatically called in Render(). Please call your rendering function yourself now!\n    // You can obtain the ImDrawData* by calling ImGui::GetDrawData() after Render(). See example applications if you are unsure of how to implement this.\n    void        (*RenderDrawListsFn)(ImDrawData* data);\n#else\n    // This is only here to keep ImGuiIO the same size/layout, so that IMGUI_DISABLE_OBSOLETE_FUNCTIONS can exceptionally be used outside of imconfig.h.\n    void* RenderDrawListsFnUnused;\n#endif\n\n    //------------------------------------------------------------------\n    // Input - Fill before calling NewFrame()\n    //------------------------------------------------------------------\n\n    ImVec2      MousePos;                       // Mouse position, in pixels. Set to ImVec2(-FLT_MAX, -FLT_MAX) if mouse is unavailable (on another screen, etc.)\n    bool        MouseDown[5];                   // Mouse buttons: 0=left, 1=right, 2=middle + extras (ImGuiMouseButton_COUNT == 5). Dear ImGui mostly uses left and right buttons. Others buttons allows us to track if the mouse is being used by your application + available to user as a convenience via IsMouse** API.\n    float       MouseWheel;                     // Mouse wheel Vertical: 1 unit scrolls about 5 lines text.\n    float       MouseWheelH;                    // Mouse wheel Horizontal. Most users don't have a mouse with an horizontal wheel, may not be filled by all back-ends.\n    ImGuiID     MouseHoveredViewport;           // (Optional) When using multiple viewports: viewport the OS mouse cursor is hovering _IGNORING_ viewports with the ImGuiViewportFlags_NoInputs flag, and _REGARDLESS_ of whether another viewport is focused. Set io.BackendFlags |= ImGuiBackendFlags_HasMouseHoveredViewport if you can provide this info. If you don't imgui will infer the value using the rectangles and last focused time of the viewports it knows about (ignoring other OS windows).\n    bool        KeyCtrl;                        // Keyboard modifier pressed: Control\n    bool        KeyShift;                       // Keyboard modifier pressed: Shift\n    bool        KeyAlt;                         // Keyboard modifier pressed: Alt\n    bool        KeySuper;                       // Keyboard modifier pressed: Cmd/Super/Windows\n    bool        KeysDown[512];                  // Keyboard keys that are pressed (ideally left in the \"native\" order your engine has access to keyboard keys, so you can use your own defines/enums for keys).\n    float       NavInputs[ImGuiNavInput_COUNT]; // Gamepad inputs. Cleared back to zero by EndFrame(). Keyboard keys will be auto-mapped and be written here by NewFrame().\n\n    // Functions\n    IMGUI_API void  AddInputCharacter(unsigned int c);          // Queue new character input\n    IMGUI_API void  AddInputCharacterUTF16(ImWchar16 c);        // Queue new character input from an UTF-16 character, it can be a surrogate\n    IMGUI_API void  AddInputCharactersUTF8(const char* str);    // Queue new characters input from an UTF-8 string\n    IMGUI_API void  ClearInputCharacters();                     // Clear the text input buffer manually\n\n    //------------------------------------------------------------------\n    // Output - Updated by NewFrame() or EndFrame()/Render()\n    // (when reading from the io.WantCaptureMouse, io.WantCaptureKeyboard flags to dispatch your inputs, it is\n    //  generally easier and more correct to use their state BEFORE calling NewFrame(). See FAQ for details!)\n    //------------------------------------------------------------------\n\n    bool        WantCaptureMouse;               // Set when Dear ImGui will use mouse inputs, in this case do not dispatch them to your main game/application (either way, always pass on mouse inputs to imgui). (e.g. unclicked mouse is hovering over an imgui window, widget is active, mouse was clicked over an imgui window, etc.).\n    bool        WantCaptureKeyboard;            // Set when Dear ImGui will use keyboard inputs, in this case do not dispatch them to your main game/application (either way, always pass keyboard inputs to imgui). (e.g. InputText active, or an imgui window is focused and navigation is enabled, etc.).\n    bool        WantTextInput;                  // Mobile/console: when set, you may display an on-screen keyboard. This is set by Dear ImGui when it wants textual keyboard input to happen (e.g. when a InputText widget is active).\n    bool        WantSetMousePos;                // MousePos has been altered, back-end should reposition mouse on next frame. Rarely used! Set only when ImGuiConfigFlags_NavEnableSetMousePos flag is enabled.\n    bool        WantSaveIniSettings;            // When manual .ini load/save is active (io.IniFilename == NULL), this will be set to notify your application that you can call SaveIniSettingsToMemory() and save yourself. Important: clear io.WantSaveIniSettings yourself after saving!\n    bool        NavActive;                      // Keyboard/Gamepad navigation is currently allowed (will handle ImGuiKey_NavXXX events) = a window is focused and it doesn't use the ImGuiWindowFlags_NoNavInputs flag.\n    bool        NavVisible;                     // Keyboard/Gamepad navigation is visible and allowed (will handle ImGuiKey_NavXXX events).\n    float       Framerate;                      // Application framerate estimate, in frame per second. Solely for convenience. Rolling average estimation based on io.DeltaTime over 120 frames.\n    int         MetricsRenderVertices;          // Vertices output during last call to Render()\n    int         MetricsRenderIndices;           // Indices output during last call to Render() = number of triangles * 3\n    int         MetricsRenderWindows;           // Number of visible windows\n    int         MetricsActiveWindows;           // Number of active windows\n    int         MetricsActiveAllocations;       // Number of active allocations, updated by MemAlloc/MemFree based on current context. May be off if you have multiple imgui contexts.\n    ImVec2      MouseDelta;                     // Mouse delta. Note that this is zero if either current or previous position are invalid (-FLT_MAX,-FLT_MAX), so a disappearing/reappearing mouse won't have a huge delta.\n\n    //------------------------------------------------------------------\n    // [Internal] Dear ImGui will maintain those fields. Forward compatibility not guaranteed!\n    //------------------------------------------------------------------\n\n    ImGuiKeyModFlags KeyMods;                   // Key mods flags (same as io.KeyCtrl/KeyShift/KeyAlt/KeySuper but merged into flags), updated by NewFrame()\n    ImVec2      MousePosPrev;                   // Previous mouse position (note that MouseDelta is not necessary == MousePos-MousePosPrev, in case either position is invalid)\n    ImVec2      MouseClickedPos[5];             // Position at time of clicking\n    double      MouseClickedTime[5];            // Time of last click (used to figure out double-click)\n    bool        MouseClicked[5];                // Mouse button went from !Down to Down\n    bool        MouseDoubleClicked[5];          // Has mouse button been double-clicked?\n    bool        MouseReleased[5];               // Mouse button went from Down to !Down\n    bool        MouseDownOwned[5];              // Track if button was clicked inside a dear imgui window. We don't request mouse capture from the application if click started outside ImGui bounds.\n    bool        MouseDownWasDoubleClick[5];     // Track if button down was a double-click\n    float       MouseDownDuration[5];           // Duration the mouse button has been down (0.0f == just clicked)\n    float       MouseDownDurationPrev[5];       // Previous time the mouse button has been down\n    ImVec2      MouseDragMaxDistanceAbs[5];     // Maximum distance, absolute, on each axis, of how much mouse has traveled from the clicking point\n    float       MouseDragMaxDistanceSqr[5];     // Squared maximum distance of how much mouse has traveled from the clicking point\n    float       KeysDownDuration[512];          // Duration the keyboard key has been down (0.0f == just pressed)\n    float       KeysDownDurationPrev[512];      // Previous duration the key has been down\n    float       NavInputsDownDuration[ImGuiNavInput_COUNT];\n    float       NavInputsDownDurationPrev[ImGuiNavInput_COUNT];\n    float       PenPressure;                    // Touch/Pen pressure (0.0f to 1.0f, should be >0.0f only when MouseDown[0] == true). Helper storage currently unused by Dear ImGui.\n    ImWchar16   InputQueueSurrogate;            // For AddInputCharacterUTF16\n    ImVector<ImWchar> InputQueueCharacters;     // Queue of _characters_ input (obtained by platform back-end). Fill using AddInputCharacter() helper.\n\n    IMGUI_API   ImGuiIO();\n};\n\n//-----------------------------------------------------------------------------\n// Misc data structures\n//-----------------------------------------------------------------------------\n\n// Shared state of InputText(), passed as an argument to your callback when a ImGuiInputTextFlags_Callback* flag is used.\n// The callback function should return 0 by default.\n// Callbacks (follow a flag name and see comments in ImGuiInputTextFlags_ declarations for more details)\n// - ImGuiInputTextFlags_CallbackCompletion:  Callback on pressing TAB\n// - ImGuiInputTextFlags_CallbackHistory:     Callback on pressing Up/Down arrows\n// - ImGuiInputTextFlags_CallbackAlways:      Callback on each iteration\n// - ImGuiInputTextFlags_CallbackCharFilter:  Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.\n// - ImGuiInputTextFlags_CallbackResize:      Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow.\nstruct ImGuiInputTextCallbackData\n{\n    ImGuiInputTextFlags EventFlag;      // One ImGuiInputTextFlags_Callback*    // Read-only\n    ImGuiInputTextFlags Flags;          // What user passed to InputText()      // Read-only\n    void* UserData;       // What user passed to InputText()      // Read-only\n\n    // Arguments for the different callback events\n    // - To modify the text buffer in a callback, prefer using the InsertChars() / DeleteChars() function. InsertChars() will take care of calling the resize callback if necessary.\n    // - If you know your edits are not going to resize the underlying buffer allocation, you may modify the contents of 'Buf[]' directly. You need to update 'BufTextLen' accordingly (0 <= BufTextLen < BufSize) and set 'BufDirty'' to true so InputText can update its internal state.\n    ImWchar             EventChar;      // Character input                      // Read-write   // [CharFilter] Replace character with another one, or set to zero to drop. return 1 is equivalent to setting EventChar=0;\n    ImGuiKey            EventKey;       // Key pressed (Up/Down/TAB)            // Read-only    // [Completion,History]\n    char* Buf;            // Text buffer                          // Read-write   // [Resize] Can replace pointer / [Completion,History,Always] Only write to pointed data, don't replace the actual pointer!\n    int                 BufTextLen;     // Text length (in bytes)               // Read-write   // [Resize,Completion,History,Always] Exclude zero-terminator storage. In C land: == strlen(some_text), in C++ land: string.length()\n    int                 BufSize;        // Buffer size (in bytes) = capacity+1  // Read-only    // [Resize,Completion,History,Always] Include zero-terminator storage. In C land == ARRAYSIZE(my_char_array), in C++ land: string.capacity()+1\n    bool                BufDirty;       // Set if you modify Buf/BufTextLen!    // Write        // [Completion,History,Always]\n    int                 CursorPos;      //                                      // Read-write   // [Completion,History,Always]\n    int                 SelectionStart; //                                      // Read-write   // [Completion,History,Always] == to SelectionEnd when no selection)\n    int                 SelectionEnd;   //                                      // Read-write   // [Completion,History,Always]\n\n    // Helper functions for text manipulation.\n    // Use those function to benefit from the CallbackResize behaviors. Calling those function reset the selection.\n    IMGUI_API ImGuiInputTextCallbackData();\n    IMGUI_API void      DeleteChars(int pos, int bytes_count);\n    IMGUI_API void      InsertChars(int pos, const char* text, const char* text_end = NULL);\n    bool                HasSelection() const { return SelectionStart != SelectionEnd; }\n};\n\n// Resizing callback data to apply custom constraint. As enabled by SetNextWindowSizeConstraints(). Callback is called during the next Begin().\n// NB: For basic min/max size constraint on each axis you don't need to use the callback! The SetNextWindowSizeConstraints() parameters are enough.\nstruct ImGuiSizeCallbackData\n{\n    void* UserData;       // Read-only.   What user passed to SetNextWindowSizeConstraints()\n    ImVec2  Pos;            // Read-only.   Window position, for reference.\n    ImVec2  CurrentSize;    // Read-only.   Current window size.\n    ImVec2  DesiredSize;    // Read-write.  Desired size, based on user's mouse position. Write to this field to restrain resizing.\n};\n\n// [ALPHA] Rarely used / very advanced uses only. Use with SetNextWindowClass() and DockSpace() functions.\n// Important: the content of this class is still highly WIP and likely to change and be refactored\n// before we stabilize Docking features. Please be mindful if using this.\n// Provide hints:\n// - To the platform back-end via altered viewport flags (enable/disable OS decoration, OS task bar icons, etc.)\n// - To the platform back-end for OS level parent/child relationships of viewport.\n// - To the docking system for various options and filtering.\nstruct ImGuiWindowClass\n{\n    ImGuiID             ClassId;                    // User data. 0 = Default class (unclassed). Windows of different classes cannot be docked with each others.\n    ImGuiID             ParentViewportId;           // Hint for the platform back-end. If non-zero, the platform back-end can create a parent<>child relationship between the platform windows. Not conforming back-ends are free to e.g. parent every viewport to the main viewport or not.\n    ImGuiViewportFlags  ViewportFlagsOverrideSet;   // Viewport flags to set when a window of this class owns a viewport. This allows you to enforce OS decoration or task bar icon, override the defaults on a per-window basis.\n    ImGuiViewportFlags  ViewportFlagsOverrideClear; // Viewport flags to clear when a window of this class owns a viewport. This allows you to enforce OS decoration or task bar icon, override the defaults on a per-window basis.\n    ImGuiDockNodeFlags  DockNodeFlagsOverrideSet;   // [EXPERIMENTAL] Dock node flags to set when a window of this class is hosted by a dock node (it doesn't have to be selected!)\n    ImGuiDockNodeFlags  DockNodeFlagsOverrideClear; // [EXPERIMENTAL]\n    bool                DockingAlwaysTabBar;        // Set to true to enforce single floating windows of this class always having their own docking node (equivalent of setting the global io.ConfigDockingAlwaysTabBar)\n    bool                DockingAllowUnclassed;      // Set to true to allow windows of this class to be docked/merged with an unclassed window. // FIXME-DOCK: Move to DockNodeFlags override?\n\n    ImGuiWindowClass() { ClassId = 0; ParentViewportId = 0; ViewportFlagsOverrideSet = ViewportFlagsOverrideClear = 0x00; DockNodeFlagsOverrideSet = DockNodeFlagsOverrideClear = 0x00; DockingAlwaysTabBar = false; DockingAllowUnclassed = true; }\n};\n\n// Data payload for Drag and Drop operations: AcceptDragDropPayload(), GetDragDropPayload()\nstruct ImGuiPayload\n{\n    // Members\n    void* Data;               // Data (copied and owned by dear imgui)\n    int             DataSize;           // Data size\n\n    // [Internal]\n    ImGuiID         SourceId;           // Source item id\n    ImGuiID         SourceParentId;     // Source parent id (if available)\n    int             DataFrameCount;     // Data timestamp\n    char            DataType[32 + 1];   // Data type tag (short user-supplied string, 32 characters max)\n    bool            Preview;            // Set when AcceptDragDropPayload() was called and mouse has been hovering the target item (nb: handle overlapping drag targets)\n    bool            Delivery;           // Set when AcceptDragDropPayload() was called and mouse button is released over the target item.\n\n    ImGuiPayload() { Clear(); }\n    void Clear() { SourceId = SourceParentId = 0; Data = NULL; DataSize = 0; memset(DataType, 0, sizeof(DataType)); DataFrameCount = -1; Preview = Delivery = false; }\n    bool IsDataType(const char* type) const { return DataFrameCount != -1 && strcmp(type, DataType) == 0; }\n    bool IsPreview() const { return Preview; }\n    bool IsDelivery() const { return Delivery; }\n};\n\n//-----------------------------------------------------------------------------\n// Obsolete functions (Will be removed! Read 'API BREAKING CHANGES' section in imgui.cpp for details)\n// Please keep your copy of dear imgui up to date! Occasionally set '#define IMGUI_DISABLE_OBSOLETE_FUNCTIONS' in imconfig.h to stay ahead.\n//-----------------------------------------------------------------------------\n\n#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS\nnamespace ImGui\n{\n    // OBSOLETED in 1.77 (from June 2020)\n    static inline bool  OpenPopupOnItemClick(const char* str_id = NULL, ImGuiMouseButton mb = 1) { return OpenPopupContextItem(str_id, mb); } // Passing a mouse button to ImGuiPopupFlags is legal\n    static inline bool  BeginPopupContextWindow(const char* str_id, ImGuiMouseButton mb, bool over_items) { return BeginPopupContextWindow(str_id, mb | (over_items ? 0 : ImGuiPopupFlags_NoOpenOverItems)); }\n    // OBSOLETED in 1.72 (from July 2019)\n    static inline void  TreeAdvanceToLabelPos() { SetCursorPosX(GetCursorPosX() + GetTreeNodeToLabelSpacing()); }\n    // OBSOLETED in 1.71 (from June 2019)\n    static inline void  SetNextTreeNodeOpen(bool open, ImGuiCond cond = 0) { SetNextItemOpen(open, cond); }\n    // OBSOLETED in 1.70 (from May 2019)\n    static inline float GetContentRegionAvailWidth() { return GetContentRegionAvail().x; }\n    // OBSOLETED in 1.69 (from Mar 2019)\n    static inline ImDrawList* GetOverlayDrawList() { return GetForegroundDrawList(); }\n    // OBSOLETED in 1.66 (from Sep 2018)\n    static inline void  SetScrollHere(float center_ratio = 0.5f) { SetScrollHereY(center_ratio); }\n    // OBSOLETED in 1.63 (between Aug 2018 and Sept 2018)\n    static inline bool  IsItemDeactivatedAfterChange() { return IsItemDeactivatedAfterEdit(); }\n    // OBSOLETED in 1.61 (between Apr 2018 and Aug 2018)\n    IMGUI_API bool      InputFloat(const char* label, float* v, float step, float step_fast, int decimal_precision, ImGuiInputTextFlags flags = 0); // Use the 'const char* format' version instead of 'decimal_precision'!\n    IMGUI_API bool      InputFloat2(const char* label, float v[2], int decimal_precision, ImGuiInputTextFlags flags = 0);\n    IMGUI_API bool      InputFloat3(const char* label, float v[3], int decimal_precision, ImGuiInputTextFlags flags = 0);\n    IMGUI_API bool      InputFloat4(const char* label, float v[4], int decimal_precision, ImGuiInputTextFlags flags = 0);\n    // OBSOLETED in 1.60 (between Dec 2017 and Apr 2018)\n    static inline bool  IsAnyWindowFocused() { return IsWindowFocused(ImGuiFocusedFlags_AnyWindow); }\n    static inline bool  IsAnyWindowHovered() { return IsWindowHovered(ImGuiHoveredFlags_AnyWindow); }\n}\ntypedef ImGuiInputTextCallback      ImGuiTextEditCallback;    // OBSOLETED in 1.63 (from Aug 2018): made the names consistent\ntypedef ImGuiInputTextCallbackData  ImGuiTextEditCallbackData;\n#endif\n\n//-----------------------------------------------------------------------------\n// Helpers\n//-----------------------------------------------------------------------------\n\n// Helper: Unicode defines\n#define IM_UNICODE_CODEPOINT_INVALID 0xFFFD     // Invalid Unicode code point (standard value).\n#ifdef IMGUI_USE_WCHAR32\n#define IM_UNICODE_CODEPOINT_MAX     0x10FFFF   // Maximum Unicode code point supported by this build.\n#else\n#define IM_UNICODE_CODEPOINT_MAX     0xFFFF     // Maximum Unicode code point supported by this build.\n#endif\n\n// Helper: Execute a block of code at maximum once a frame. Convenient if you want to quickly create an UI within deep-nested code that runs multiple times every frame.\n// Usage: static ImGuiOnceUponAFrame oaf; if (oaf) ImGui::Text(\"This will be called only once per frame\");\nstruct ImGuiOnceUponAFrame\n{\n    ImGuiOnceUponAFrame() { RefFrame = -1; }\n    mutable int RefFrame;\n    operator bool() const { int current_frame = ImGui::GetFrameCount(); if (RefFrame == current_frame) return false; RefFrame = current_frame; return true; }\n};\n\n// Helper: Parse and apply text filters. In format \"aaaaa[,bbbb][,ccccc]\"\nstruct ImGuiTextFilter\n{\n    IMGUI_API           ImGuiTextFilter(const char* default_filter = \"\");\n    IMGUI_API bool      Draw(const char* label = \"Filter (inc,-exc)\", float width = 0.0f);  // Helper calling InputText+Build\n    IMGUI_API bool      PassFilter(const char* text, const char* text_end = NULL) const;\n    IMGUI_API void      Build();\n    void                Clear() { InputBuf[0] = 0; Build(); }\n    bool                IsActive() const { return !Filters.empty(); }\n\n    // [Internal]\n    struct ImGuiTextRange\n    {\n        const char* b;\n        const char* e;\n\n        ImGuiTextRange() { b = e = NULL; }\n        ImGuiTextRange(const char* _b, const char* _e) { b = _b; e = _e; }\n        bool            empty() const { return b == e; }\n        IMGUI_API void  split(char separator, ImVector<ImGuiTextRange>* out) const;\n    };\n    char                    InputBuf[256];\n    ImVector<ImGuiTextRange>Filters;\n    int                     CountGrep;\n};\n\n// Helper: Growable text buffer for logging/accumulating text\n// (this could be called 'ImGuiTextBuilder' / 'ImGuiStringBuilder')\nstruct ImGuiTextBuffer\n{\n    ImVector<char>      Buf;\n    IMGUI_API static char EmptyString[1];\n\n    ImGuiTextBuffer() { }\n    inline char         operator[](int i) const { IM_ASSERT(Buf.Data != NULL); return Buf.Data[i]; }\n    const char* begin() const { return Buf.Data ? &Buf.front() : EmptyString; }\n    const char* end() const { return Buf.Data ? &Buf.back() : EmptyString; }   // Buf is zero-terminated, so end() will point on the zero-terminator\n    int                 size() const { return Buf.Size ? Buf.Size - 1 : 0; }\n    bool                empty() const { return Buf.Size <= 1; }\n    void                clear() { Buf.clear(); }\n    void                reserve(int capacity) { Buf.reserve(capacity); }\n    const char* c_str() const { return Buf.Data ? Buf.Data : EmptyString; }\n    IMGUI_API void      append(const char* str, const char* str_end = NULL);\n    IMGUI_API void      appendf(const char* fmt, ...) IM_FMTARGS(2);\n    IMGUI_API void      appendfv(const char* fmt, va_list args) IM_FMTLIST(2);\n};\n\n// Helper: Key->Value storage\n// Typically you don't have to worry about this since a storage is held within each Window.\n// We use it to e.g. store collapse state for a tree (Int 0/1)\n// This is optimized for efficient lookup (dichotomy into a contiguous buffer) and rare insertion (typically tied to user interactions aka max once a frame)\n// You can use it as custom user storage for temporary values. Declare your own storage if, for example:\n// - You want to manipulate the open/close state of a particular sub-tree in your interface (tree node uses Int 0/1 to store their state).\n// - You want to store custom debug data easily without adding or editing structures in your code (probably not efficient, but convenient)\n// Types are NOT stored, so it is up to you to make sure your Key don't collide with different types.\nstruct ImGuiStorage\n{\n    // [Internal]\n    struct ImGuiStoragePair\n    {\n        ImGuiID key;\n        union { int val_i; float val_f; void* val_p; };\n        ImGuiStoragePair(ImGuiID _key, int _val_i) { key = _key; val_i = _val_i; }\n        ImGuiStoragePair(ImGuiID _key, float _val_f) { key = _key; val_f = _val_f; }\n        ImGuiStoragePair(ImGuiID _key, void* _val_p) { key = _key; val_p = _val_p; }\n    };\n\n    ImVector<ImGuiStoragePair>      Data;\n\n    // - Get***() functions find pair, never add/allocate. Pairs are sorted so a query is O(log N)\n    // - Set***() functions find pair, insertion on demand if missing.\n    // - Sorted insertion is costly, paid once. A typical frame shouldn't need to insert any new pair.\n    void                Clear() { Data.clear(); }\n    IMGUI_API int       GetInt(ImGuiID key, int default_val = 0) const;\n    IMGUI_API void      SetInt(ImGuiID key, int val);\n    IMGUI_API bool      GetBool(ImGuiID key, bool default_val = false) const;\n    IMGUI_API void      SetBool(ImGuiID key, bool val);\n    IMGUI_API float     GetFloat(ImGuiID key, float default_val = 0.0f) const;\n    IMGUI_API void      SetFloat(ImGuiID key, float val);\n    IMGUI_API void* GetVoidPtr(ImGuiID key) const; // default_val is NULL\n    IMGUI_API void      SetVoidPtr(ImGuiID key, void* val);\n\n    // - Get***Ref() functions finds pair, insert on demand if missing, return pointer. Useful if you intend to do Get+Set.\n    // - References are only valid until a new value is added to the storage. Calling a Set***() function or a Get***Ref() function invalidates the pointer.\n    // - A typical use case where this is convenient for quick hacking (e.g. add storage during a live Edit&Continue session if you can't modify existing struct)\n    //      float* pvar = ImGui::GetFloatRef(key); ImGui::SliderFloat(\"var\", pvar, 0, 100.0f); some_var += *pvar;\n    IMGUI_API int* GetIntRef(ImGuiID key, int default_val = 0);\n    IMGUI_API bool* GetBoolRef(ImGuiID key, bool default_val = false);\n    IMGUI_API float* GetFloatRef(ImGuiID key, float default_val = 0.0f);\n    IMGUI_API void** GetVoidPtrRef(ImGuiID key, void* default_val = NULL);\n\n    // Use on your own storage if you know only integer are being stored (open/close all tree nodes)\n    IMGUI_API void      SetAllInt(int val);\n\n    // For quicker full rebuild of a storage (instead of an incremental one), you may add all your contents and then sort once.\n    IMGUI_API void      BuildSortByKey();\n};\n\n// Helper: Manually clip large list of items.\n// If you are submitting lots of evenly spaced items and you have a random access to the list, you can perform coarse clipping based on visibility to save yourself from processing those items at all.\n// The clipper calculates the range of visible items and advance the cursor to compensate for the non-visible items we have skipped.\n// ImGui already clip items based on their bounds but it needs to measure text size to do so. Coarse clipping before submission makes this cost and your own data fetching/submission cost null.\n// Usage:\n//     ImGuiListClipper clipper(1000);  // we have 1000 elements, evenly spaced.\n//     while (clipper.Step())\n//         for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)\n//             ImGui::Text(\"line number %d\", i);\n// - Step 0: the clipper let you process the first element, regardless of it being visible or not, so we can measure the element height (step skipped if we passed a known height as second arg to constructor).\n// - Step 1: the clipper infer height from first element, calculate the actual range of elements to display, and position the cursor before the first element.\n// - (Step 2: dummy step only required if an explicit items_height was passed to constructor or Begin() and user call Step(). Does nothing and switch to Step 3.)\n// - Step 3: the clipper validate that we have reached the expected Y position (corresponding to element DisplayEnd), advance the cursor to the end of the list and then returns 'false' to end the loop.\nstruct ImGuiListClipper\n{\n    int     DisplayStart, DisplayEnd;\n    int     ItemsCount;\n\n    // [Internal]\n    int     StepNo;\n    float   ItemsHeight;\n    float   StartPosY;\n\n    // items_count:  Use -1 to ignore (you can call Begin later). Use INT_MAX if you don't know how many items you have (in which case the cursor won't be advanced in the final step).\n    // items_height: Use -1.0f to be calculated automatically on first step. Otherwise pass in the distance between your items, typically GetTextLineHeightWithSpacing() or GetFrameHeightWithSpacing().\n    // If you don't specify an items_height, you NEED to call Step(). If you specify items_height you may call the old Begin()/End() api directly, but prefer calling Step().\n    ImGuiListClipper(int items_count = -1, float items_height = -1.0f) { Begin(items_count, items_height); } // NB: Begin() initialize every fields (as we allow user to call Begin/End multiple times on a same instance if they want).\n    ~ImGuiListClipper() { IM_ASSERT(ItemsCount == -1); }      // Assert if user forgot to call End() or Step() until false.\n\n    IMGUI_API bool Step();                                              // Call until it returns false. The DisplayStart/DisplayEnd fields will be set and you can process/draw those items.\n    IMGUI_API void Begin(int items_count, float items_height = -1.0f);  // Automatically called by constructor if you passed 'items_count' or by Step() in Step 1.\n    IMGUI_API void End();                                               // Automatically called on the last call of Step() that returns false.\n};\n\n// Helpers macros to generate 32-bit encoded colors\n#ifdef IMGUI_USE_BGRA_PACKED_COLOR\n#define IM_COL32_R_SHIFT    16\n#define IM_COL32_G_SHIFT    8\n#define IM_COL32_B_SHIFT    0\n#define IM_COL32_A_SHIFT    24\n#define IM_COL32_A_MASK     0xFF000000\n#else\n#define IM_COL32_R_SHIFT    0\n#define IM_COL32_G_SHIFT    8\n#define IM_COL32_B_SHIFT    16\n#define IM_COL32_A_SHIFT    24\n#define IM_COL32_A_MASK     0xFF000000\n#endif\n#define IM_COL32(R,G,B,A)    (((ImU32)(A)<<IM_COL32_A_SHIFT) | ((ImU32)(B)<<IM_COL32_B_SHIFT) | ((ImU32)(G)<<IM_COL32_G_SHIFT) | ((ImU32)(R)<<IM_COL32_R_SHIFT))\n#define IM_COL32_WHITE       IM_COL32(255,255,255,255)  // Opaque white = 0xFFFFFFFF\n#define IM_COL32_BLACK       IM_COL32(0,0,0,255)        // Opaque black\n#define IM_COL32_BLACK_TRANS IM_COL32(0,0,0,0)          // Transparent black = 0x00000000\n\n// Helper: ImColor() implicitly converts colors to either ImU32 (packed 4x1 byte) or ImVec4 (4x1 float)\n// Prefer using IM_COL32() macros if you want a guaranteed compile-time ImU32 for usage with ImDrawList API.\n// **Avoid storing ImColor! Store either u32 of ImVec4. This is not a full-featured color class. MAY OBSOLETE.\n// **None of the ImGui API are using ImColor directly but you can use it as a convenience to pass colors in either ImU32 or ImVec4 formats. Explicitly cast to ImU32 or ImVec4 if needed.\nstruct ImColor\n{\n    ImVec4              Value;\n\n    ImColor() { Value.x = Value.y = Value.z = Value.w = 0.0f; }\n    ImColor(int r, int g, int b, int a = 255) { float sc = 1.0f / 255.0f; Value.x = (float)r * sc; Value.y = (float)g * sc; Value.z = (float)b * sc; Value.w = (float)a * sc; }\n    ImColor(ImU32 rgba) { float sc = 1.0f / 255.0f; Value.x = (float)((rgba >> IM_COL32_R_SHIFT) & 0xFF)* sc; Value.y = (float)((rgba >> IM_COL32_G_SHIFT) & 0xFF)* sc; Value.z = (float)((rgba >> IM_COL32_B_SHIFT) & 0xFF)* sc; Value.w = (float)((rgba >> IM_COL32_A_SHIFT) & 0xFF)* sc; }\n    ImColor(float r, float g, float b, float a = 1.0f) { Value.x = r; Value.y = g; Value.z = b; Value.w = a; }\n    ImColor(const ImVec4& col) { Value = col; }\n    inline operator ImU32() const { return ImGui::ColorConvertFloat4ToU32(Value); }\n    inline operator ImVec4() const { return Value; }\n\n    // FIXME-OBSOLETE: May need to obsolete/cleanup those helpers.\n    inline void    SetHSV(float h, float s, float v, float a = 1.0f) { ImGui::ColorConvertHSVtoRGB(h, s, v, Value.x, Value.y, Value.z); Value.w = a; }\n    static ImColor HSV(float h, float s, float v, float a = 1.0f) { float r, g, b; ImGui::ColorConvertHSVtoRGB(h, s, v, r, g, b); return ImColor(r, g, b, a); }\n};\n\n//-----------------------------------------------------------------------------\n// Draw List API (ImDrawCmd, ImDrawIdx, ImDrawVert, ImDrawChannel, ImDrawListSplitter, ImDrawListFlags, ImDrawList, ImDrawData)\n// Hold a series of drawing commands. The user provides a renderer for ImDrawData which essentially contains an array of ImDrawList.\n//-----------------------------------------------------------------------------\n\n// ImDrawCallback: Draw callbacks for advanced uses [configurable type: override in imconfig.h]\n// NB: You most likely do NOT need to use draw callbacks just to create your own widget or customized UI rendering,\n// you can poke into the draw list for that! Draw callback may be useful for example to:\n//  A) Change your GPU render state,\n//  B) render a complex 3D scene inside a UI element without an intermediate texture/render target, etc.\n// The expected behavior from your rendering function is 'if (cmd.UserCallback != NULL) { cmd.UserCallback(parent_list, cmd); } else { RenderTriangles() }'\n// If you want to override the signature of ImDrawCallback, you can simply use e.g. '#define ImDrawCallback MyDrawCallback' (in imconfig.h) + update rendering back-end accordingly.\n#ifndef ImDrawCallback\ntypedef void (*ImDrawCallback)(const ImDrawList* parent_list, const ImDrawCmd* cmd);\n#endif\n\n// Special Draw callback value to request renderer back-end to reset the graphics/render state.\n// The renderer back-end needs to handle this special value, otherwise it will crash trying to call a function at this address.\n// This is useful for example if you submitted callbacks which you know have altered the render state and you want it to be restored.\n// It is not done by default because they are many perfectly useful way of altering render state for imgui contents (e.g. changing shader/blending settings before an Image call).\n#define ImDrawCallback_ResetRenderState     (ImDrawCallback)(-1)\n\n// Typically, 1 command = 1 GPU draw call (unless command is a callback)\n// - VtxOffset/IdxOffset: When 'io.BackendFlags & ImGuiBackendFlags_RendererHasVtxOffset' is enabled,\n//   those fields allow us to render meshes larger than 64K vertices while keeping 16-bit indices.\n//   Pre-1.71 back-ends will typically ignore the VtxOffset/IdxOffset fields.\n// - The ClipRect/TextureId/VtxOffset fields must be contiguous as we memcmp() them together (this is asserted for).\nstruct ImDrawCmd\n{\n    ImVec4          ClipRect;           // 4*4  // Clipping rectangle (x1, y1, x2, y2). Subtract ImDrawData->DisplayPos to get clipping rectangle in \"viewport\" coordinates\n    ImTextureID     TextureId;          // 4-8  // User-provided texture ID. Set by user in ImfontAtlas::SetTexID() for fonts or passed to Image*() functions. Ignore if never using images or multiple fonts atlas.\n    unsigned int    VtxOffset;          // 4    // Start offset in vertex buffer. ImGuiBackendFlags_RendererHasVtxOffset: always 0, otherwise may be >0 to support meshes larger than 64K vertices with 16-bit indices.\n    unsigned int    IdxOffset;          // 4    // Start offset in index buffer. Always equal to sum of ElemCount drawn so far.\n    unsigned int    ElemCount;          // 4    // Number of indices (multiple of 3) to be rendered as triangles. Vertices are stored in the callee ImDrawList's vtx_buffer[] array, indices in idx_buffer[].\n    ImDrawCallback  UserCallback;       // 4-8  // If != NULL, call the function instead of rendering the vertices. clip_rect and texture_id will be set normally.\n    void* UserCallbackData;   // 4-8  // The draw callback code can access this.\n\n    ImDrawCmd() { memset(this, 0, sizeof(*this)); } // Also ensure our padding fields are zeroed\n};\n\n// Vertex index, default to 16-bit\n// To allow large meshes with 16-bit indices: set 'io.BackendFlags |= ImGuiBackendFlags_RendererHasVtxOffset' and handle ImDrawCmd::VtxOffset in the renderer back-end (recommended).\n// To use 32-bit indices: override with '#define ImDrawIdx unsigned int' in imconfig.h.\n#ifndef ImDrawIdx\ntypedef unsigned short ImDrawIdx;\n#endif\n\n// Vertex layout\n#ifndef IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT\nstruct ImDrawVert\n{\n    ImVec2  pos;\n    ImVec2  uv;\n    ImU32   col;\n};\n#else\n// You can override the vertex format layout by defining IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT in imconfig.h\n// The code expect ImVec2 pos (8 bytes), ImVec2 uv (8 bytes), ImU32 col (4 bytes), but you can re-order them or add other fields as needed to simplify integration in your engine.\n// The type has to be described within the macro (you can either declare the struct or use a typedef). This is because ImVec2/ImU32 are likely not declared a the time you'd want to set your type up.\n// NOTE: IMGUI DOESN'T CLEAR THE STRUCTURE AND DOESN'T CALL A CONSTRUCTOR SO ANY CUSTOM FIELD WILL BE UNINITIALIZED. IF YOU ADD EXTRA FIELDS (SUCH AS A 'Z' COORDINATES) YOU WILL NEED TO CLEAR THEM DURING RENDER OR TO IGNORE THEM.\nIMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT;\n#endif\n\n// For use by ImDrawListSplitter.\nstruct ImDrawChannel\n{\n    ImVector<ImDrawCmd>         _CmdBuffer;\n    ImVector<ImDrawIdx>         _IdxBuffer;\n};\n\n// Split/Merge functions are used to split the draw list into different layers which can be drawn into out of order.\n// This is used by the Columns api, so items of each column can be batched together in a same draw call.\nstruct ImDrawListSplitter\n{\n    int                         _Current;    // Current channel number (0)\n    int                         _Count;      // Number of active channels (1+)\n    ImVector<ImDrawChannel>     _Channels;   // Draw channels (not resized down so _Count might be < Channels.Size)\n\n    inline ImDrawListSplitter() { Clear(); }\n    inline ~ImDrawListSplitter() { ClearFreeMemory(); }\n    inline void                 Clear() { _Current = 0; _Count = 1; } // Do not clear Channels[] so our allocations are reused next frame\n    IMGUI_API void              ClearFreeMemory();\n    IMGUI_API void              Split(ImDrawList* draw_list, int count);\n    IMGUI_API void              Merge(ImDrawList* draw_list);\n    IMGUI_API void              SetCurrentChannel(ImDrawList* draw_list, int channel_idx);\n};\n\nenum ImDrawCornerFlags_\n{\n    ImDrawCornerFlags_None = 0,\n    ImDrawCornerFlags_TopLeft = 1 << 0, // 0x1\n    ImDrawCornerFlags_TopRight = 1 << 1, // 0x2\n    ImDrawCornerFlags_BotLeft = 1 << 2, // 0x4\n    ImDrawCornerFlags_BotRight = 1 << 3, // 0x8\n    ImDrawCornerFlags_Top = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_TopRight,   // 0x3\n    ImDrawCornerFlags_Bot = ImDrawCornerFlags_BotLeft | ImDrawCornerFlags_BotRight,   // 0xC\n    ImDrawCornerFlags_Left = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_BotLeft,    // 0x5\n    ImDrawCornerFlags_Right = ImDrawCornerFlags_TopRight | ImDrawCornerFlags_BotRight,  // 0xA\n    ImDrawCornerFlags_All = 0xF     // In your function calls you may use ~0 (= all bits sets) instead of ImDrawCornerFlags_All, as a convenience\n};\n\nenum ImDrawListFlags_\n{\n    ImDrawListFlags_None = 0,\n    ImDrawListFlags_AntiAliasedLines = 1 << 0,  // Lines are anti-aliased (*2 the number of triangles for 1.0f wide line, otherwise *3 the number of triangles)\n    ImDrawListFlags_AntiAliasedFill = 1 << 1,  // Filled shapes have anti-aliased edges (*2 the number of vertices)\n    ImDrawListFlags_AllowVtxOffset = 1 << 2   // Can emit 'VtxOffset > 0' to allow large meshes. Set when 'ImGuiBackendFlags_RendererHasVtxOffset' is enabled.\n};\n\n// Draw command list\n// This is the low-level list of polygons that ImGui:: functions are filling. At the end of the frame,\n// all command lists are passed to your ImGuiIO::RenderDrawListFn function for rendering.\n// Each dear imgui window contains its own ImDrawList. You can use ImGui::GetWindowDrawList() to\n// access the current window draw list and draw custom primitives.\n// You can interleave normal ImGui:: calls and adding primitives to the current draw list.\n// All positions are generally in pixel coordinates (generally top-left at 0,0, bottom-right at io.DisplaySize, unless multiple viewports are used), but you are totally free to apply whatever transformation matrix to want to the data (if you apply such transformation you'll want to apply it to ClipRect as well)\n// Important: Primitives are always added to the list and not culled (culling is done at higher-level by ImGui:: functions), if you use this API a lot consider coarse culling your drawn objects.\nstruct ImDrawList\n{\n    // This is what you have to render\n    ImVector<ImDrawCmd>     CmdBuffer;          // Draw commands. Typically 1 command = 1 GPU draw call, unless the command is a callback.\n    ImVector<ImDrawIdx>     IdxBuffer;          // Index buffer. Each command consume ImDrawCmd::ElemCount of those\n    ImVector<ImDrawVert>    VtxBuffer;          // Vertex buffer.\n    ImDrawListFlags         Flags;              // Flags, you may poke into these to adjust anti-aliasing settings per-primitive.\n\n    // [Internal, used while building lists]\n    const ImDrawListSharedData* _Data;          // Pointer to shared draw data (you can use ImGui::GetDrawListSharedData() to get the one from current ImGui context)\n    const char* _OwnerName;         // Pointer to owner window's name for debugging\n    unsigned int            _VtxCurrentIdx;     // [Internal] Generally == VtxBuffer.Size unless we are past 64K vertices, in which case this gets reset to 0.\n    ImDrawVert* _VtxWritePtr;       // [Internal] point within VtxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)\n    ImDrawIdx* _IdxWritePtr;       // [Internal] point within IdxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)\n    ImVector<ImVec4>        _ClipRectStack;     // [Internal]\n    ImVector<ImTextureID>   _TextureIdStack;    // [Internal]\n    ImVector<ImVec2>        _Path;              // [Internal] current path building\n    ImDrawCmd               _CmdHeader;         // [Internal] Template of active commands. Fields should match those of CmdBuffer.back().\n    ImDrawListSplitter      _Splitter;          // [Internal] for channels api (note: prefer using your own persistent instance of ImDrawListSplitter!)\n\n    // If you want to create ImDrawList instances, pass them ImGui::GetDrawListSharedData() or create and use your own ImDrawListSharedData (so you can use ImDrawList without ImGui)\n    ImDrawList(const ImDrawListSharedData* shared_data) { _Data = shared_data; Flags = ImDrawListFlags_None; _VtxCurrentIdx = 0; _VtxWritePtr = NULL; _IdxWritePtr = NULL; _OwnerName = NULL; }\n\n    ~ImDrawList() { _ClearFreeMemory(); }\n    IMGUI_API void  PushClipRect(ImVec2 clip_rect_min, ImVec2 clip_rect_max, bool intersect_with_current_clip_rect = false);  // Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)\n    IMGUI_API void  PushClipRectFullScreen();\n    IMGUI_API void  PopClipRect();\n    IMGUI_API void  PushTextureID(ImTextureID texture_id);\n    IMGUI_API void  PopTextureID();\n    inline ImVec2   GetClipRectMin() const { const ImVec4& cr = _ClipRectStack.back(); return ImVec2(cr.x, cr.y); }\n    inline ImVec2   GetClipRectMax() const { const ImVec4& cr = _ClipRectStack.back(); return ImVec2(cr.z, cr.w); }\n\n    // Primitives\n    // - For rectangular primitives, \"p_min\" and \"p_max\" represent the upper-left and lower-right corners.\n    // - For circle primitives, use \"num_segments == 0\" to automatically calculate tessellation (preferred).\n    //   In future versions we will use textures to provide cheaper and higher-quality circles.\n    //   Use AddNgon() and AddNgonFilled() functions if you need to guaranteed a specific number of sides.\n    IMGUI_API void  AddLine(const ImVec2& p1, const ImVec2& p2, ImU32 col, float thickness = 1.0f);\n    IMGUI_API void  AddRect(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float rounding = 0.0f, ImDrawCornerFlags rounding_corners = ImDrawCornerFlags_All, float thickness = 1.0f);   // a: upper-left, b: lower-right (== upper-left + size), rounding_corners_flags: 4 bits corresponding to which corner to round\n    IMGUI_API void  AddRectFilled(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float rounding = 0.0f, ImDrawCornerFlags rounding_corners = ImDrawCornerFlags_All);                     // a: upper-left, b: lower-right (== upper-left + size)\n    IMGUI_API void  AddRectFilledMultiColor(const ImVec2& p_min, const ImVec2& p_max, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left);\n    IMGUI_API void  AddQuad(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col, float thickness = 1.0f);\n    IMGUI_API void  AddQuadFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col);\n    IMGUI_API void  AddTriangle(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col, float thickness = 1.0f);\n    IMGUI_API void  AddTriangleFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col);\n    IMGUI_API void  AddCircle(const ImVec2& center, float radius, ImU32 col, int num_segments = 12, float thickness = 1.0f);\n    IMGUI_API void  AddCircleFilled(const ImVec2& center, float radius, ImU32 col, int num_segments = 12);\n    IMGUI_API void  AddNgon(const ImVec2& center, float radius, ImU32 col, int num_segments, float thickness = 1.0f);\n    IMGUI_API void  AddNgonFilled(const ImVec2& center, float radius, ImU32 col, int num_segments);\n    IMGUI_API void  AddText(const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end = NULL);\n    IMGUI_API void  AddText(const ImFont* font, float font_size, const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end = NULL, float wrap_width = 0.0f, const ImVec4* cpu_fine_clip_rect = NULL);\n    IMGUI_API void  AddPolyline(const ImVec2* points, int num_points, ImU32 col, bool closed, float thickness);\n    IMGUI_API void  AddConvexPolyFilled(const ImVec2* points, int num_points, ImU32 col); // Note: Anti-aliased filling requires points to be in clockwise order.\n    IMGUI_API void  AddBezierCurve(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col, float thickness, int num_segments = 0);\n\n    // Image primitives\n    // - Read FAQ to understand what ImTextureID is.\n    // - \"p_min\" and \"p_max\" represent the upper-left and lower-right corners of the rectangle.\n    // - \"uv_min\" and \"uv_max\" represent the normalized texture coordinates to use for those corners. Using (0,0)->(1,1) texture coordinates will generally display the entire texture.\n    IMGUI_API void  AddImage(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max, const ImVec2& uv_min = ImVec2(0, 0), const ImVec2& uv_max = ImVec2(1, 1), ImU32 col = IM_COL32_WHITE);\n    IMGUI_API void  AddImageQuad(ImTextureID user_texture_id, const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, const ImVec2& uv1 = ImVec2(0, 0), const ImVec2& uv2 = ImVec2(1, 0), const ImVec2& uv3 = ImVec2(1, 1), const ImVec2& uv4 = ImVec2(0, 1), ImU32 col = IM_COL32_WHITE);\n    IMGUI_API void  AddImageRounded(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max, const ImVec2& uv_min, const ImVec2& uv_max, ImU32 col, float rounding, ImDrawCornerFlags rounding_corners = ImDrawCornerFlags_All);\n\n    // Stateful path API, add points then finish with PathFillConvex() or PathStroke()\n    inline    void  PathClear() { _Path.Size = 0; }\n    inline    void  PathLineTo(const ImVec2& pos) { _Path.push_back(pos); }\n    inline    void  PathLineToMergeDuplicate(const ImVec2& pos) { if (_Path.Size == 0 || memcmp(&_Path.Data[_Path.Size - 1], &pos, 8) != 0) _Path.push_back(pos); }\n    inline    void  PathFillConvex(ImU32 col) { AddConvexPolyFilled(_Path.Data, _Path.Size, col); _Path.Size = 0; }  // Note: Anti-aliased filling requires points to be in clockwise order.\n    inline    void  PathStroke(ImU32 col, bool closed, float thickness = 1.0f) { AddPolyline(_Path.Data, _Path.Size, col, closed, thickness); _Path.Size = 0; }\n    IMGUI_API void  PathArcTo(const ImVec2& center, float radius, float a_min, float a_max, int num_segments = 10);\n    IMGUI_API void  PathArcToFast(const ImVec2& center, float radius, int a_min_of_12, int a_max_of_12);                                            // Use precomputed angles for a 12 steps circle\n    IMGUI_API void  PathBezierCurveTo(const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, int num_segments = 0);\n    IMGUI_API void  PathRect(const ImVec2& rect_min, const ImVec2& rect_max, float rounding = 0.0f, ImDrawCornerFlags rounding_corners = ImDrawCornerFlags_All);\n\n    // Advanced\n    IMGUI_API void  AddCallback(ImDrawCallback callback, void* callback_data);  // Your rendering function must check for 'UserCallback' in ImDrawCmd and call the function instead of rendering triangles.\n    IMGUI_API void  AddDrawCmd();                                               // This is useful if you need to forcefully create a new draw call (to allow for dependent rendering / blending). Otherwise primitives are merged into the same draw-call as much as possible\n    IMGUI_API ImDrawList* CloneOutput() const;                                  // Create a clone of the CmdBuffer/IdxBuffer/VtxBuffer.\n\n    // Advanced: Channels\n    // - Use to split render into layers. By switching channels to can render out-of-order (e.g. submit FG primitives before BG primitives)\n    // - Use to minimize draw calls (e.g. if going back-and-forth between multiple clipping rectangles, prefer to append into separate channels then merge at the end)\n    // - FIXME-OBSOLETE: This API shouldn't have been in ImDrawList in the first place!\n    //   Prefer using your own persistent instance of ImDrawListSplitter as you can stack them.\n    //   Using the ImDrawList::ChannelsXXXX you cannot stack a split over another.\n    inline void     ChannelsSplit(int count) { _Splitter.Split(this, count); }\n    inline void     ChannelsMerge() { _Splitter.Merge(this); }\n    inline void     ChannelsSetCurrent(int n) { _Splitter.SetCurrentChannel(this, n); }\n\n    // Advanced: Primitives allocations\n    // - We render triangles (three vertices)\n    // - All primitives needs to be reserved via PrimReserve() beforehand.\n    IMGUI_API void  PrimReserve(int idx_count, int vtx_count);\n    IMGUI_API void  PrimUnreserve(int idx_count, int vtx_count);\n    IMGUI_API void  PrimRect(const ImVec2& a, const ImVec2& b, ImU32 col);      // Axis aligned rectangle (composed of two triangles)\n    IMGUI_API void  PrimRectUV(const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col);\n    IMGUI_API void  PrimQuadUV(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a, const ImVec2& uv_b, const ImVec2& uv_c, const ImVec2& uv_d, ImU32 col);\n    inline    void  PrimWriteVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col) { _VtxWritePtr->pos = pos; _VtxWritePtr->uv = uv; _VtxWritePtr->col = col; _VtxWritePtr++; _VtxCurrentIdx++; }\n    inline    void  PrimWriteIdx(ImDrawIdx idx) { *_IdxWritePtr = idx; _IdxWritePtr++; }\n    inline    void  PrimVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col) { PrimWriteIdx((ImDrawIdx)_VtxCurrentIdx); PrimWriteVtx(pos, uv, col); } // Write vertex with unique index\n\n    // [Internal helpers]\n    IMGUI_API void  _ResetForNewFrame();\n    IMGUI_API void  _ClearFreeMemory();\n    IMGUI_API void  _PopUnusedDrawCmd();\n    IMGUI_API void  _OnChangedClipRect();\n    IMGUI_API void  _OnChangedTextureID();\n    IMGUI_API void  _OnChangedVtxOffset();\n};\n\n// All draw data to render a Dear ImGui frame\n// (NB: the style and the naming convention here is a little inconsistent, we currently preserve them for backward compatibility purpose,\n// as this is one of the oldest structure exposed by the library! Basically, ImDrawList == CmdList)\nstruct ImDrawData\n{\n    bool            Valid;                  // Only valid after Render() is called and before the next NewFrame() is called.\n    ImDrawList** CmdLists;               // Array of ImDrawList* to render. The ImDrawList are owned by ImGuiContext and only pointed to from here.\n    int             CmdListsCount;          // Number of ImDrawList* to render\n    int             TotalIdxCount;          // For convenience, sum of all ImDrawList's IdxBuffer.Size\n    int             TotalVtxCount;          // For convenience, sum of all ImDrawList's VtxBuffer.Size\n    ImVec2          DisplayPos;             // Upper-left position of the viewport to render (== upper-left of the orthogonal projection matrix to use)\n    ImVec2          DisplaySize;            // Size of the viewport to render (== io.DisplaySize for the main viewport) (DisplayPos + DisplaySize == lower-right of the orthogonal projection matrix to use)\n    ImVec2          FramebufferScale;       // Amount of pixels for each unit of DisplaySize. Based on io.DisplayFramebufferScale. Generally (1,1) on normal display, (2,2) on OSX with Retina display.\n    ImGuiViewport* OwnerViewport;          // Viewport carrying the ImDrawData instance, might be of use to the renderer (generally not).\n\n    // Functions\n    ImDrawData() { Valid = false; Clear(); }\n    ~ImDrawData() { Clear(); }\n    void Clear() { Valid = false; CmdLists = NULL; CmdListsCount = TotalVtxCount = TotalIdxCount = 0; DisplayPos = DisplaySize = FramebufferScale = ImVec2(0.f, 0.f); OwnerViewport = NULL; } // The ImDrawList are owned by ImGuiContext!\n    IMGUI_API void  DeIndexAllBuffers();                    // Helper to convert all buffers from indexed to non-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!\n    IMGUI_API void  ScaleClipRects(const ImVec2& fb_scale); // Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than Dear ImGui expects, or if there is a difference between your window resolution and framebuffer resolution.\n};\n\n//-----------------------------------------------------------------------------\n// Font API (ImFontConfig, ImFontGlyph, ImFontAtlasFlags, ImFontAtlas, ImFontGlyphRangesBuilder, ImFont)\n//-----------------------------------------------------------------------------\n\nstruct ImFontConfig\n{\n    void* FontData;               //          // TTF/OTF data\n    int             FontDataSize;           //          // TTF/OTF data size\n    bool            FontDataOwnedByAtlas;   // true     // TTF/OTF data ownership taken by the container ImFontAtlas (will delete memory itself).\n    int             FontNo;                 // 0        // Index of font within TTF/OTF file\n    float           SizePixels;             //          // Size in pixels for rasterizer (more or less maps to the resulting font height).\n    int             OversampleH;            // 3        // Rasterize at higher quality for sub-pixel positioning. Read https://github.com/nothings/stb/blob/master/tests/oversample/README.md for details.\n    int             OversampleV;            // 1        // Rasterize at higher quality for sub-pixel positioning. We don't use sub-pixel positions on the Y axis.\n    bool            PixelSnapH;             // false    // Align every glyph to pixel boundary. Useful e.g. if you are merging a non-pixel aligned font with the default font. If enabled, you can set OversampleH/V to 1.\n    ImVec2          GlyphExtraSpacing;      // 0, 0     // Extra spacing (in pixels) between glyphs. Only X axis is supported for now.\n    ImVec2          GlyphOffset;            // 0, 0     // Offset all glyphs from this font input.\n    const ImWchar* GlyphRanges;            // NULL     // Pointer to a user-provided list of Unicode range (2 value per range, values are inclusive, zero-terminated list). THE ARRAY DATA NEEDS TO PERSIST AS LONG AS THE FONT IS ALIVE.\n    float           GlyphMinAdvanceX;       // 0        // Minimum AdvanceX for glyphs, set Min to align font icons, set both Min/Max to enforce mono-space font\n    float           GlyphMaxAdvanceX;       // FLT_MAX  // Maximum AdvanceX for glyphs\n    bool            MergeMode;              // false    // Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs). You may want to use GlyphOffset.y when merge font of different heights.\n    unsigned int    RasterizerFlags;        // 0x00     // Settings for custom font rasterizer (e.g. ImGuiFreeType). Leave as zero if you aren't using one.\n    float           RasterizerMultiply;     // 1.0f     // Brighten (>1.0f) or darken (<1.0f) font output. Brightening small fonts may be a good workaround to make them more readable.\n    ImWchar         EllipsisChar;           // -1       // Explicitly specify unicode codepoint of ellipsis character. When fonts are being merged first specified ellipsis will be used.\n\n    // [Internal]\n    char            Name[40];               // Name (strictly to ease debugging)\n    ImFont* DstFont;\n\n    IMGUI_API ImFontConfig();\n};\n\n// Hold rendering data for one glyph.\n// (Note: some language parsers may fail to convert the 31+1 bitfield members, in this case maybe drop store a single u32 or we can rework this)\nstruct ImFontGlyph\n{\n    unsigned int    Codepoint : 31;     // 0x0000..0xFFFF\n    unsigned int    Visible : 1;        // Flag to allow early out when rendering\n    float           AdvanceX;           // Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in)\n    float           X0, Y0, X1, Y1;     // Glyph corners\n    float           U0, V0, U1, V1;     // Texture coordinates\n};\n\n// Helper to build glyph ranges from text/string data. Feed your application strings/characters to it then call BuildRanges().\n// This is essentially a tightly packed of vector of 64k booleans = 8KB storage.\nstruct ImFontGlyphRangesBuilder\n{\n    ImVector<ImU32> UsedChars;            // Store 1-bit per Unicode code point (0=unused, 1=used)\n\n    ImFontGlyphRangesBuilder() { Clear(); }\n    inline void     Clear() { int size_in_bytes = (IM_UNICODE_CODEPOINT_MAX + 1) / 8; UsedChars.resize(size_in_bytes / (int)sizeof(ImU32)); memset(UsedChars.Data, 0, (size_t)size_in_bytes); }\n    inline bool     GetBit(size_t n) const { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 31); return (UsedChars[off] & mask) != 0; }  // Get bit n in the array\n    inline void     SetBit(size_t n) { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 31); UsedChars[off] |= mask; }               // Set bit n in the array\n    inline void     AddChar(ImWchar c) { SetBit(c); }                      // Add character\n    IMGUI_API void  AddText(const char* text, const char* text_end = NULL);     // Add string (each character of the UTF-8 string are added)\n    IMGUI_API void  AddRanges(const ImWchar* ranges);                           // Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault()) to force add all of ASCII/Latin+Ext\n    IMGUI_API void  BuildRanges(ImVector<ImWchar>* out_ranges);                 // Output new ranges\n};\n\n// See ImFontAtlas::AddCustomRectXXX functions.\nstruct ImFontAtlasCustomRect\n{\n    unsigned short  Width, Height;  // Input    // Desired rectangle dimension\n    unsigned short  X, Y;           // Output   // Packed position in Atlas\n    unsigned int    GlyphID;        // Input    // For custom font glyphs only (ID < 0x110000)\n    float           GlyphAdvanceX;  // Input    // For custom font glyphs only: glyph xadvance\n    ImVec2          GlyphOffset;    // Input    // For custom font glyphs only: glyph display offset\n    ImFont* Font;           // Input    // For custom font glyphs only: target font\n    ImFontAtlasCustomRect() { Width = Height = 0; X = Y = 0xFFFF; GlyphID = 0; GlyphAdvanceX = 0.0f; GlyphOffset = ImVec2(0, 0); Font = NULL; }\n    bool IsPacked() const { return X != 0xFFFF; }\n};\n\nenum ImFontAtlasFlags_\n{\n    ImFontAtlasFlags_None = 0,\n    ImFontAtlasFlags_NoPowerOfTwoHeight = 1 << 0,   // Don't round the height to next power of two\n    ImFontAtlasFlags_NoMouseCursors = 1 << 1    // Don't build software mouse cursors into the atlas\n};\n\n// Load and rasterize multiple TTF/OTF fonts into a same texture. The font atlas will build a single texture holding:\n//  - One or more fonts.\n//  - Custom graphics data needed to render the shapes needed by Dear ImGui.\n//  - Mouse cursor shapes for software cursor rendering (unless setting 'Flags |= ImFontAtlasFlags_NoMouseCursors' in the font atlas).\n// It is the user-code responsibility to setup/build the atlas, then upload the pixel data into a texture accessible by your graphics api.\n//  - Optionally, call any of the AddFont*** functions. If you don't call any, the default font embedded in the code will be loaded for you.\n//  - Call GetTexDataAsAlpha8() or GetTexDataAsRGBA32() to build and retrieve pixels data.\n//  - Upload the pixels data into a texture within your graphics system (see imgui_impl_xxxx.cpp examples)\n//  - Call SetTexID(my_tex_id); and pass the pointer/identifier to your texture in a format natural to your graphics API.\n//    This value will be passed back to you during rendering to identify the texture. Read FAQ entry about ImTextureID for more details.\n// Common pitfalls:\n// - If you pass a 'glyph_ranges' array to AddFont*** functions, you need to make sure that your array persist up until the\n//   atlas is build (when calling GetTexData*** or Build()). We only copy the pointer, not the data.\n// - Important: By default, AddFontFromMemoryTTF() takes ownership of the data. Even though we are not writing to it, we will free the pointer on destruction.\n//   You can set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed,\n// - Even though many functions are suffixed with \"TTF\", OTF data is supported just as well.\n// - This is an old API and it is currently awkward for those and and various other reasons! We will address them in the future!\nstruct ImFontAtlas\n{\n    IMGUI_API ImFontAtlas();\n    IMGUI_API ~ImFontAtlas();\n    IMGUI_API ImFont* AddFont(const ImFontConfig* font_cfg);\n    IMGUI_API ImFont* AddFontDefault(const ImFontConfig* font_cfg = NULL);\n    IMGUI_API ImFont* AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL);\n    IMGUI_API ImFont* AddFontFromMemoryTTF(void* font_data, int font_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL); // Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.\n    IMGUI_API ImFont* AddFontFromMemoryCompressedTTF(const void* compressed_font_data, int compressed_font_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL); // 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.\n    IMGUI_API ImFont* AddFontFromMemoryCompressedBase85TTF(const char* compressed_font_data_base85, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL);              // 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.\n    IMGUI_API void              ClearInputData();           // Clear input data (all ImFontConfig structures including sizes, TTF data, glyph ranges, etc.) = all the data used to build the texture and fonts.\n    IMGUI_API void              ClearTexData();             // Clear output texture data (CPU side). Saves RAM once the texture has been copied to graphics memory.\n    IMGUI_API void              ClearFonts();               // Clear output font data (glyphs storage, UV coordinates).\n    IMGUI_API void              Clear();                    // Clear all input and output.\n\n    // Build atlas, retrieve pixel data.\n    // User is in charge of copying the pixels into graphics memory (e.g. create a texture with your engine). Then store your texture handle with SetTexID().\n    // The pitch is always = Width * BytesPerPixels (1 or 4)\n    // Building in RGBA32 format is provided for convenience and compatibility, but note that unless you manually manipulate or copy color data into\n    // the texture (e.g. when using the AddCustomRect*** api), then the RGB pixels emitted will always be white (~75% of memory/bandwidth waste.\n    IMGUI_API bool              Build();                    // Build pixels data. This is called automatically for you by the GetTexData*** functions.\n    IMGUI_API void              GetTexDataAsAlpha8(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = NULL);  // 1 byte per-pixel\n    IMGUI_API void              GetTexDataAsRGBA32(unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = NULL);  // 4 bytes-per-pixel\n    bool                        IsBuilt() const { return Fonts.Size > 0 && (TexPixelsAlpha8 != NULL || TexPixelsRGBA32 != NULL); }\n    void                        SetTexID(ImTextureID id) { TexID = id; }\n\n    //-------------------------------------------\n    // Glyph Ranges\n    //-------------------------------------------\n\n    // Helpers to retrieve list of common Unicode ranges (2 value per range, values are inclusive, zero-terminated list)\n    // NB: Make sure that your string are UTF-8 and NOT in your local code page. In C++11, you can create UTF-8 string literal using the u8\"Hello world\" syntax. See FAQ for details.\n    // NB: Consider using ImFontGlyphRangesBuilder to build glyph ranges from textual data.\n    IMGUI_API const ImWchar* GetGlyphRangesDefault();                // Basic Latin, Extended Latin\n    IMGUI_API const ImWchar* GetGlyphRangesKorean();                 // Default + Korean characters\n    IMGUI_API const ImWchar* GetGlyphRangesJapanese();               // Default + Hiragana, Katakana, Half-Width, Selection of 1946 Ideographs\n    IMGUI_API const ImWchar* GetGlyphRangesChineseFull();            // Default + Half-Width + Japanese Hiragana/Katakana + full set of about 21000 CJK Unified Ideographs\n    IMGUI_API const ImWchar* GetGlyphRangesChineseSimplifiedCommon();// Default + Half-Width + Japanese Hiragana/Katakana + set of 2500 CJK Unified Ideographs for common simplified Chinese\n    IMGUI_API const ImWchar* GetGlyphRangesCyrillic();               // Default + about 400 Cyrillic characters\n    IMGUI_API const ImWchar* GetGlyphRangesThai();                   // Default + Thai characters\n    IMGUI_API const ImWchar* GetGlyphRangesVietnamese();             // Default + Vietnamese characters\n\n    //-------------------------------------------\n    // [BETA] Custom Rectangles/Glyphs API\n    //-------------------------------------------\n\n    // You can request arbitrary rectangles to be packed into the atlas, for your own purposes.\n    // After calling Build(), you can query the rectangle position and render your pixels.\n    // You can also request your rectangles to be mapped as font glyph (given a font + Unicode point),\n    // so you can render e.g. custom colorful icons and use them as regular glyphs.\n    // Read docs/FONTS.md for more details about using colorful icons.\n    // Note: this API may be redesigned later in order to support multi-monitor varying DPI settings.\n    IMGUI_API int               AddCustomRectRegular(int width, int height);\n    IMGUI_API int               AddCustomRectFontGlyph(ImFont* font, ImWchar id, int width, int height, float advance_x, const ImVec2& offset = ImVec2(0, 0));\n    const ImFontAtlasCustomRect* GetCustomRectByIndex(int index) const { if (index < 0) return NULL; return &CustomRects[index]; }\n\n    // [Internal]\n    IMGUI_API void              CalcCustomRectUV(const ImFontAtlasCustomRect* rect, ImVec2* out_uv_min, ImVec2* out_uv_max) const;\n    IMGUI_API bool              GetMouseCursorTexData(ImGuiMouseCursor cursor, ImVec2* out_offset, ImVec2* out_size, ImVec2 out_uv_border[2], ImVec2 out_uv_fill[2]);\n\n    //-------------------------------------------\n    // Members\n    //-------------------------------------------\n\n    bool                        Locked;             // Marked as Locked by ImGui::NewFrame() so attempt to modify the atlas will assert.\n    ImFontAtlasFlags            Flags;              // Build flags (see ImFontAtlasFlags_)\n    ImTextureID                 TexID;              // User data to refer to the texture once it has been uploaded to user's graphic systems. It is passed back to you during rendering via the ImDrawCmd structure.\n    int                         TexDesiredWidth;    // Texture width desired by user before Build(). Must be a power-of-two. If have many glyphs your graphics API have texture size restrictions you may want to increase texture width to decrease height.\n    int                         TexGlyphPadding;    // Padding between glyphs within texture in pixels. Defaults to 1. If your rendering method doesn't rely on bilinear filtering you may set this to 0.\n\n    // [Internal]\n    // NB: Access texture data via GetTexData*() calls! Which will setup a default font for you.\n    unsigned char* TexPixelsAlpha8;    // 1 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight\n    unsigned int* TexPixelsRGBA32;    // 4 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight * 4\n    int                         TexWidth;           // Texture width calculated during Build().\n    int                         TexHeight;          // Texture height calculated during Build().\n    ImVec2                      TexUvScale;         // = (1.0f/TexWidth, 1.0f/TexHeight)\n    ImVec2                      TexUvWhitePixel;    // Texture coordinates to a white pixel\n    ImVector<ImFont*>           Fonts;              // Hold all the fonts returned by AddFont*. Fonts[0] is the default font upon calling ImGui::NewFrame(), use ImGui::PushFont()/PopFont() to change the current font.\n    ImVector<ImFontAtlasCustomRect> CustomRects;    // Rectangles for packing custom texture data into the atlas.\n    ImVector<ImFontConfig>      ConfigData;         // Internal data\n    int                         CustomRectIds[1];   // Identifiers of custom texture rectangle used by ImFontAtlas/ImDrawList\n\n#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS\n    typedef ImFontAtlasCustomRect    CustomRect;         // OBSOLETED in 1.72+\n    typedef ImFontGlyphRangesBuilder GlyphRangesBuilder; // OBSOLETED in 1.67+\n#endif\n};\n\n// Font runtime data and rendering\n// ImFontAtlas automatically loads a default embedded font for you when you call GetTexDataAsAlpha8() or GetTexDataAsRGBA32().\nstruct ImFont\n{\n    // Members: Hot ~20/24 bytes (for CalcTextSize)\n    ImVector<float>             IndexAdvanceX;      // 12-16 // out //            // Sparse. Glyphs->AdvanceX in a directly indexable way (cache-friendly for CalcTextSize functions which only this this info, and are often bottleneck in large UI).\n    float                       FallbackAdvanceX;   // 4     // out // = FallbackGlyph->AdvanceX\n    float                       FontSize;           // 4     // in  //            // Height of characters/line, set during loading (don't change after loading)\n\n    // Members: Hot ~36/48 bytes (for CalcTextSize + render loop)\n    ImVector<ImWchar>           IndexLookup;        // 12-16 // out //            // Sparse. Index glyphs by Unicode code-point.\n    ImVector<ImFontGlyph>       Glyphs;             // 12-16 // out //            // All glyphs.\n    const ImFontGlyph* FallbackGlyph;      // 4-8   // out // = FindGlyph(FontFallbackChar)\n    ImVec2                      DisplayOffset;      // 8     // in  // = (0,0)    // Offset font rendering by xx pixels\n\n    // Members: Cold ~32/40 bytes\n    ImFontAtlas* ContainerAtlas;     // 4-8   // out //            // What we has been loaded into\n    const ImFontConfig* ConfigData;         // 4-8   // in  //            // Pointer within ContainerAtlas->ConfigData\n    short                       ConfigDataCount;    // 2     // in  // ~ 1        // Number of ImFontConfig involved in creating this font. Bigger than 1 when merging multiple font sources into one ImFont.\n    ImWchar                     FallbackChar;       // 2     // in  // = '?'      // Replacement character if a glyph isn't found. Only set via SetFallbackChar()\n    ImWchar                     EllipsisChar;       // 2     // out // = -1       // Character used for ellipsis rendering.\n    bool                        DirtyLookupTables;  // 1     // out //\n    float                       Scale;              // 4     // in  // = 1.f      // Base font scale, multiplied by the per-window font scale which you can adjust with SetWindowFontScale()\n    float                       Ascent, Descent;    // 4+4   // out //            // Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]\n    int                         MetricsTotalSurface;// 4     // out //            // Total surface in pixels to get an idea of the font rasterization/texture cost (not exact, we approximate the cost of padding between glyphs)\n    ImU8                        Used4kPagesMap[(IM_UNICODE_CODEPOINT_MAX + 1) / 4096 / 8]; // 2 bytes if ImWchar=ImWchar16, 34 bytes if ImWchar==ImWchar32. Store 1-bit for each block of 4K codepoints that has one active glyph. This is mainly used to facilitate iterations across all used codepoints.\n\n    // Methods\n    IMGUI_API ImFont();\n    IMGUI_API ~ImFont();\n    IMGUI_API const ImFontGlyph* FindGlyph(ImWchar c) const;\n    IMGUI_API const ImFontGlyph* FindGlyphNoFallback(ImWchar c) const;\n    float                       GetCharAdvance(ImWchar c) const { return ((int)c < IndexAdvanceX.Size) ? IndexAdvanceX[(int)c] : FallbackAdvanceX; }\n    bool                        IsLoaded() const { return ContainerAtlas != NULL; }\n    const char* GetDebugName() const { return ConfigData ? ConfigData->Name : \"<unknown>\"; }\n\n    // 'max_width' stops rendering after a certain width (could be turned into a 2d size). FLT_MAX to disable.\n    // 'wrap_width' enable automatic word-wrapping across multiple lines to fit into given width. 0.0f to disable.\n    IMGUI_API ImVec2            CalcTextSizeA(float size, float max_width, float wrap_width, const char* text_begin, const char* text_end = NULL, const char** remaining = NULL) const; // utf8\n    IMGUI_API const char* CalcWordWrapPositionA(float scale, const char* text, const char* text_end, float wrap_width) const;\n    IMGUI_API void              RenderChar(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, ImWchar c) const;\n    IMGUI_API void              RenderText(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, const ImVec4& clip_rect, const char* text_begin, const char* text_end, float wrap_width = 0.0f, bool cpu_fine_clip = false) const;\n\n    // [Internal] Don't use!\n    IMGUI_API void              BuildLookupTable();\n    IMGUI_API void              ClearOutputData();\n    IMGUI_API void              GrowIndex(int new_size);\n    IMGUI_API void              AddGlyph(ImWchar c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x);\n    IMGUI_API void              AddRemapChar(ImWchar dst, ImWchar src, bool overwrite_dst = true); // Makes 'dst' character/glyph points to 'src' character/glyph. Currently needs to be called AFTER fonts have been built.\n    IMGUI_API void              SetGlyphVisible(ImWchar c, bool visible);\n    IMGUI_API void              SetFallbackChar(ImWchar c);\n    IMGUI_API bool              IsGlyphRangeUnused(unsigned int c_begin, unsigned int c_last);\n};\n\n//-----------------------------------------------------------------------------\n// [BETA] Platform interface for multi-viewport support\n//-----------------------------------------------------------------------------\n// (Optional) This is completely optional, for advanced users!\n// If you are new to Dear ImGui and trying to integrate it into your engine, you can probably ignore this for now.\n//\n// This feature allows you to seamlessly drag Dear ImGui windows outside of your application viewport.\n// This is achieved by creating new Platform/OS windows on the fly, and rendering into them.\n// Dear ImGui manages the viewport structures, and the back-end create and maintain one Platform/OS window for each of those viewports.\n//\n// See Glossary https://github.com/ocornut/imgui/wiki/Glossary for details about some of the terminology.\n// See Thread https://github.com/ocornut/imgui/issues/1542 for gifs, news and questions about this evolving feature.\n//\n// About the coordinates system:\n// - When multi-viewports are enabled, all Dear ImGui coordinates become absolute coordinates (same as OS coordinates!)\n// - So e.g. ImGui::SetNextWindowPos(ImVec2(0,0)) will position a window relative to your primary monitor!\n// - If you want to position windows relative to your main application viewport, use ImGui::GetMainViewport()->Pos as a base position.\n//\n// Steps to use multi-viewports in your application, when using a default back-end from the examples/ folder:\n// - Application:  Enable feature with 'io.ConfigFlags |= ImGuiConfigFlags_ViewportsEnable'.\n// - Back-end:     The back-end initialization will setup all necessary ImGuiPlatformIO's functions and update monitors info every frame.\n// - Application:  In your main loop, call ImGui::UpdatePlatformWindows(), ImGui::RenderPlatformWindowsDefault() after EndFrame() or Render().\n// - Application:  Fix absolute coordinates used in ImGui::SetWindowPos() or ImGui::SetNextWindowPos() calls.\n//\n// Steps to use multi-viewports in your application, when using a custom back-end:\n// - Important:    THIS IS NOT EASY TO DO and comes with many subtleties not described here!\n//                 It's also an experimental feature, so some of the requirements may evolve.\n//                 Consider using default back-ends if you can. Either way, carefully follow and refer to examples/ back-ends for details.\n// - Application:  Enable feature with 'io.ConfigFlags |= ImGuiConfigFlags_ViewportsEnable'.\n// - Back-end:     Hook ImGuiPlatformIO's Platform_* and Renderer_* callbacks (see below).\n//                 Set 'io.BackendFlags |= ImGuiBackendFlags_PlatformHasViewports' and 'io.BackendFlags |= ImGuiBackendFlags_PlatformHasViewports'.\n//                 Update ImGuiPlatformIO's Monitors list every frame.\n//                 Update MousePos every frame, in absolute coordinates.\n// - Application:  In your main loop, call ImGui::UpdatePlatformWindows(), ImGui::RenderPlatformWindowsDefault() after EndFrame() or Render().\n//                 You may skip calling RenderPlatformWindowsDefault() if its API is not convenient for your needs. Read comments below.\n// - Application:  Fix absolute coordinates used in ImGui::SetWindowPos() or ImGui::SetNextWindowPos() calls.\n//\n// About ImGui::RenderPlatformWindowsDefault():\n// - This function is a mostly a _helper_ for the common-most cases, and to facilitate using default back-ends.\n// - You can check its simple source code to understand what it does.\n//   It basically iterates secondary viewports and call 4 functions that are setup in ImGuiPlatformIO, if available:\n//     Platform_RenderWindow(), Renderer_RenderWindow(), Platform_SwapBuffers(), Renderer_SwapBuffers()\n//   Those functions pointers exists only for the benefit of RenderPlatformWindowsDefault().\n// - If you have very specific rendering needs (e.g. flipping multiple swap-chain simultaneously, unusual sync/threading issues, etc.),\n//   you may be tempted to ignore RenderPlatformWindowsDefault() and write customized code to perform your renderingg.\n//   You may decide to setup the platform_io's *RenderWindow and *SwapBuffers pointers and call your functions through those pointers,\n//   or you may decide to never setup those pointers and call your code directly. They are a convenience, not an obligatory interface.\n//-----------------------------------------------------------------------------\n\n// (Optional) Access via ImGui::GetPlatformIO()\nstruct ImGuiPlatformIO\n{\n    //------------------------------------------------------------------\n    // Input - Back-end interface/functions + Monitor List\n    //------------------------------------------------------------------\n\n    // (Optional) Platform functions (e.g. Win32, GLFW, SDL2)\n    // For reference, the second column shows which function are generally calling the Platform Functions:\n    //   N = ImGui::NewFrame()                        ~ beginning of the dear imgui frame: read info from platform/OS windows (latest size/position)\n    //   F = ImGui::Begin(), ImGui::EndFrame()        ~ during the dear imgui frame\n    //   U = ImGui::UpdatePlatformWindows()           ~ after the dear imgui frame: create and update all platform/OS windows\n    //   R = ImGui::RenderPlatformWindowsDefault()    ~ render\n    //   D = ImGui::DestroyPlatformWindows()          ~ shutdown\n    // The general idea is that NewFrame() we will read the current Platform/OS state, and UpdatePlatformWindows() will write to it.\n    //\n    // The functions are designed so we can mix and match 2 imgui_impl_xxxx files, one for the Platform (~window/input handling), one for Renderer.\n    // Custom engine back-ends will often provide both Platform and Renderer interfaces and so may not need to use all functions.\n    // Platform functions are typically called before their Renderer counterpart, apart from Destroy which are called the other way.\n\n    // Platform function --------------------------------------------------- Called by -----\n    void    (*Platform_CreateWindow)(ImGuiViewport* vp);                    // . . U . .  // Create a new platform window for the given viewport\n    void    (*Platform_DestroyWindow)(ImGuiViewport* vp);                   // N . U . D  //\n    void    (*Platform_ShowWindow)(ImGuiViewport* vp);                      // . . U . .  // Newly created windows are initially hidden so SetWindowPos/Size/Title can be called on them before showing the window\n    void    (*Platform_SetWindowPos)(ImGuiViewport* vp, ImVec2 pos);        // . . U . .  // Set platform window position (given the upper-left corner of client area)\n    ImVec2(*Platform_GetWindowPos)(ImGuiViewport* vp);                    // N . . . .  //\n    void    (*Platform_SetWindowSize)(ImGuiViewport* vp, ImVec2 size);      // . . U . .  // Set platform window client area size (ignoring OS decorations such as OS title bar etc.)\n    ImVec2(*Platform_GetWindowSize)(ImGuiViewport* vp);                   // N . . . .  // Get platform window client area size\n    void    (*Platform_SetWindowFocus)(ImGuiViewport* vp);                  // N . . . .  // Move window to front and set input focus\n    bool    (*Platform_GetWindowFocus)(ImGuiViewport* vp);                  // . . U . .  //\n    bool    (*Platform_GetWindowMinimized)(ImGuiViewport* vp);              // N . . . .  // Get platform window minimized state. When minimized, we generally won't attempt to get/set size and contents will be culled more easily\n    void    (*Platform_SetWindowTitle)(ImGuiViewport* vp, const char* str); // . . U . .  // Set platform window title (given an UTF-8 string)\n    void    (*Platform_SetWindowAlpha)(ImGuiViewport* vp, float alpha);     // . . U . .  // (Optional) Setup window transparency\n    void    (*Platform_UpdateWindow)(ImGuiViewport* vp);                    // . . U . .  // (Optional) Called by UpdatePlatformWindows(). Optional hook to allow the platform back-end from doing general book-keeping every frame.\n    void    (*Platform_RenderWindow)(ImGuiViewport* vp, void* render_arg);  // . . . R .  // (Optional) Main rendering (platform side! This is often unused, or just setting a \"current\" context for OpenGL bindings). 'render_arg' is the value passed to RenderPlatformWindowsDefault().\n    void    (*Platform_SwapBuffers)(ImGuiViewport* vp, void* render_arg);   // . . . R .  // (Optional) Call Present/SwapBuffers (platform side! This is often unused!). 'render_arg' is the value passed to RenderPlatformWindowsDefault().\n    float   (*Platform_GetWindowDpiScale)(ImGuiViewport* vp);               // N . . . .  // (Optional) [BETA] FIXME-DPI: DPI handling: Return DPI scale for this viewport. 1.0f = 96 DPI.\n    void    (*Platform_OnChangedViewport)(ImGuiViewport* vp);               // . F . . .  // (Optional) [BETA] FIXME-DPI: DPI handling: Called during Begin() every time the viewport we are outputting into changes, so back-end has a chance to swap fonts to adjust style.\n    void    (*Platform_SetImeInputPos)(ImGuiViewport* vp, ImVec2 pos);      // . F . . .  // (Optional) Set IME (Input Method Editor, e.g. for Asian languages) input position, so text preview appears over the imgui input box. FIXME: The call timing of this is inconsistent because we want to support without multi-viewports.\n    int     (*Platform_CreateVkSurface)(ImGuiViewport* vp, ImU64 vk_inst, const void* vk_allocators, ImU64* out_vk_surface); // (Optional) For a Vulkan Renderer to call into Platform code (since the surface creation needs to tie them both).\n\n    // (Optional) Renderer functions (e.g. DirectX, OpenGL, Vulkan)\n    void    (*Renderer_CreateWindow)(ImGuiViewport* vp);                    // . . U . .  // Create swap chain, frame buffers etc. (called after Platform_CreateWindow)\n    void    (*Renderer_DestroyWindow)(ImGuiViewport* vp);                   // N . U . D  // Destroy swap chain, frame buffers etc. (called before Platform_DestroyWindow)\n    void    (*Renderer_SetWindowSize)(ImGuiViewport* vp, ImVec2 size);      // . . U . .  // Resize swap chain, frame buffers etc. (called after Platform_SetWindowSize)\n    void    (*Renderer_RenderWindow)(ImGuiViewport* vp, void* render_arg);  // . . . R .  // (Optional) Clear framebuffer, setup render target, then render the viewport->DrawData. 'render_arg' is the value passed to RenderPlatformWindowsDefault().\n    void    (*Renderer_SwapBuffers)(ImGuiViewport* vp, void* render_arg);   // . . . R .  // (Optional) Call Present/SwapBuffers. 'render_arg' is the value passed to RenderPlatformWindowsDefault().\n\n    // (Optional) Monitor list\n    // - Updated by: app/back-end. Update every frame to dynamically support changing monitor or DPI configuration.\n    // - Used by: dear imgui to query DPI info, clamp popups/tooltips within same monitor and not have them straddle monitors.\n    ImVector<ImGuiPlatformMonitor>  Monitors;\n\n    //------------------------------------------------------------------\n    // Output - List of viewports to render into platform windows\n    //------------------------------------------------------------------\n\n    // Viewports list (the list is updated by calling ImGui::EndFrame or ImGui::Render)\n    // (in the future we will attempt to organize this feature to remove the need for a \"main viewport\")\n    ImGuiViewport* MainViewport;                           // Guaranteed to be == Viewports[0]\n    ImVector<ImGuiViewport*>        Viewports;                              // Main viewports, followed by all secondary viewports.\n    ImGuiPlatformIO() { memset(this, 0, sizeof(*this)); }     // Zero clear\n};\n\n// (Optional) This is required when enabling multi-viewport. Represent the bounds of each connected monitor/display and their DPI.\n// We use this information for multiple DPI support + clamping the position of popups and tooltips so they don't straddle multiple monitors.\nstruct ImGuiPlatformMonitor\n{\n    ImVec2  MainPos, MainSize;      // Coordinates of the area displayed on this monitor (Min = upper left, Max = bottom right)\n    ImVec2  WorkPos, WorkSize;      // Coordinates without task bars / side bars / menu bars. Used to avoid positioning popups/tooltips inside this region. If you don't have this info, please copy the value for MainPos/MainSize. \n    float   DpiScale;               // 1.0f = 96 DPI\n    ImGuiPlatformMonitor() { MainPos = MainSize = WorkPos = WorkSize = ImVec2(0, 0); DpiScale = 1.0f; }\n};\n\n// Flags stored in ImGuiViewport::Flags, giving indications to the platform back-ends.\nenum ImGuiViewportFlags_\n{\n    ImGuiViewportFlags_None = 0,\n    ImGuiViewportFlags_NoDecoration = 1 << 0,   // Platform Window: Disable platform decorations: title bar, borders, etc. (generally set all windows, but if ImGuiConfigFlags_ViewportsDecoration is set we only set this on popups/tooltips)\n    ImGuiViewportFlags_NoTaskBarIcon = 1 << 1,   // Platform Window: Disable platform task bar icon (generally set on popups/tooltips, or all windows if ImGuiConfigFlags_ViewportsNoTaskBarIcon is set)\n    ImGuiViewportFlags_NoFocusOnAppearing = 1 << 2,   // Platform Window: Don't take focus when created.\n    ImGuiViewportFlags_NoFocusOnClick = 1 << 3,   // Platform Window: Don't take focus when clicked on.\n    ImGuiViewportFlags_NoInputs = 1 << 4,   // Platform Window: Make mouse pass through so we can drag this window while peaking behind it.\n    ImGuiViewportFlags_NoRendererClear = 1 << 5,   // Platform Window: Renderer doesn't need to clear the framebuffer ahead (because we will fill it entirely).\n    ImGuiViewportFlags_TopMost = 1 << 6,   // Platform Window: Display on top (for tooltips only).\n    ImGuiViewportFlags_Minimized = 1 << 7,   // Platform Window: Window is minimized, can skip render. When minimized we tend to avoid using the viewport pos/size for clipping window or testing if they are contained in the viewport.\n    ImGuiViewportFlags_NoAutoMerge = 1 << 8,   // Platform Window: Avoid merging this window into another host window. This can only be set via ImGuiWindowClass viewport flags override (because we need to now ahead if we are going to create a viewport in the first place!).\n    ImGuiViewportFlags_CanHostOtherWindows = 1 << 9    // Main viewport: can host multiple imgui windows (secondary viewports are associated to a single window).\n};\n\n// The viewports created and managed by Dear ImGui. The role of the platform back-end is to create the platform/OS windows corresponding to each viewport.\n// - Main Area = entire viewport.\n// - Work Area = entire viewport minus sections optionally used by menu bars, status bars. Some positioning code will prefer to use this. Window are also trying to stay within this area.\nstruct ImGuiViewport\n{\n    ImGuiID             ID;                     // Unique identifier for the viewport\n    ImGuiViewportFlags  Flags;                  // See ImGuiViewportFlags_\n    ImVec2              Pos;                    // Main Area: Position of the viewport (the imgui coordinates are the same as OS desktop/native coordinates)\n    ImVec2              Size;                   // Main Area: Size of the viewport.\n    ImVec2              WorkOffsetMin;          // Work Area: Offset from Pos to top-left corner of Work Area. Generally (0,0) or (0,+main_menu_bar_height). Work Area is Full Area but without menu-bars/status-bars (so WorkArea always fit inside Pos/Size!)\n    ImVec2              WorkOffsetMax;          // Work Area: Offset from Pos+Size to bottom-right corner of Work Area. Generally (0,0) or (0,-status_bar_height).\n    float               DpiScale;               // 1.0f = 96 DPI = No extra scale.\n    ImDrawData* DrawData;               // The ImDrawData corresponding to this viewport. Valid after Render() and until the next call to NewFrame().\n    ImGuiID             ParentViewportId;       // (Advanced) 0: no parent. Instruct the platform back-end to setup a parent/child relationship between platform windows.\n\n    // Our design separate the Renderer and Platform back-ends to facilitate combining default back-ends with each others.\n    // When our create your own back-end for a custom engine, it is possible that both Renderer and Platform will be handled\n    // by the same system and you may not need to use all the UserData/Handle fields.\n    // The library never uses those fields, they are merely storage to facilitate back-end implementation.\n    void* RendererUserData;       // void* to hold custom data structure for the renderer (e.g. swap chain, framebuffers etc.). generally set by your Renderer_CreateWindow function.\n    void* PlatformUserData;       // void* to hold custom data structure for the OS / platform (e.g. windowing info, render context). generally set by your Platform_CreateWindow function.\n    void* PlatformHandle;         // void* for FindViewportByPlatformHandle(). (e.g. suggested to use natural platform handle such as HWND, GLFWWindow*, SDL_Window*)\n    void* PlatformHandleRaw;      // void* to hold lower-level, platform-native window handle (e.g. the HWND) when using an abstraction layer like GLFW or SDL (where PlatformHandle would be a SDL_Window*)\n    bool                PlatformRequestMove;    // Platform window requested move (e.g. window was moved by the OS / host window manager, authoritative position will be OS window position)\n    bool                PlatformRequestResize;  // Platform window requested resize (e.g. window was resized by the OS / host window manager, authoritative size will be OS window size)\n    bool                PlatformRequestClose;   // Platform window requested closure (e.g. window was moved by the OS / host window manager, e.g. pressing ALT-F4)\n\n    ImGuiViewport() { ID = 0; Flags = 0; DpiScale = 0.0f; DrawData = NULL; ParentViewportId = 0; RendererUserData = PlatformUserData = PlatformHandle = PlatformHandleRaw = NULL; PlatformRequestMove = PlatformRequestResize = PlatformRequestClose = false; }\n    ~ImGuiViewport() { IM_ASSERT(PlatformUserData == NULL && RendererUserData == NULL); }\n\n    // Access work-area rectangle with GetWorkXXX functions (see comments above)\n    ImVec2              GetCenter() { return ImVec2(Pos.x + Size.x * 0.5f, Pos.y + Size.y * 0.5f); }\n    ImVec2              GetWorkPos() { return ImVec2(Pos.x + WorkOffsetMin.x, Pos.y + WorkOffsetMin.y); }\n    ImVec2              GetWorkSize() { return ImVec2(Size.x - WorkOffsetMin.x + WorkOffsetMax.x, Size.y - WorkOffsetMin.y + WorkOffsetMax.y); } // This not clamped\n};\n\n#if defined(__clang__)\n#pragma clang diagnostic pop\n#elif defined(__GNUC__)\n#pragma GCC diagnostic pop\n#endif\n\n// Include imgui_user.h at the end of imgui.h (convenient for user to only explicitly include vanilla imgui.h)\n#ifdef IMGUI_INCLUDE_IMGUI_USER_H\n#include \"imgui_user.h\"\n#endif\n\n#endif // #ifndef IMGUI_DISABLE\n",
			"file": "src/imgui.h",
			"file_size": 261048,
			"file_write_time": 132389572304948957,
			"settings":
			{
				"buffer_size": 258376,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/resource.h",
			"settings":
			{
				"buffer_size": 482,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/Event.cpp",
			"settings":
			{
				"buffer_size": 7524,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/keyboard.cpp",
			"settings":
			{
				"buffer_size": 10765,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/keyboard.hpp",
			"settings":
			{
				"buffer_size": 1241,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/Event.hpp",
			"settings":
			{
				"buffer_size": 1752,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mouse.hpp",
			"settings":
			{
				"buffer_size": 2744,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/imgui/imgui.h",
			"settings":
			{
				"buffer_size": 258376,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/xstd.hpp",
			"settings":
			{
				"buffer_size": 345,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "#pragma once"
			}
		},
		{
			"file": "src/cbt_hook.cpp",
			"settings":
			{
				"buffer_size": 2021,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "win_hook.exp",
			"settings":
			{
				"buffer_size": 2317,
				"encoding": "Hexadecimal",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Microsoft Windows [version 10.0.18362.959]                                                                    \n(c) 2019 Microsoft Corporation. Tous droits réservés.                                                         \n                                                                                                              \nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches>eject.ps1                                                         \n                                                                                                              \nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches>ps eject.ps1                                                      \n'ps' n’est pas reconnu en tant que commande interne                                                           \nou externe, un programme exécutable ou un fichier de commandes.                                               \n                                                                                                              \nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches>./eject.ps1                                                       \n'.' n’est pas reconnu en tant que commande interne                                                            \nou externe, un programme exécutable ou un fichier de commandes.                                               \n                                                                                                              \nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches>.\\eject.ps1                                                       \n                                                                                                              \nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches>ps                                                                \n'ps' n’est pas reconnu en tant que commande interne                                                           \nou externe, un programme exécutable ou un fichier de commandes.                                               \n                                                                                                              \nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches>powershell                                                        \nWindows PowerShell                                                                                            \nCopyright (C) Microsoft Corporation. Tous droits réservés.                                                    \n                                                                                                              \nTestez le nouveau système multiplateforme PowerShell https://aka.ms/pscore6                                   \n                                                                                                              \nPS C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches> .\\eject.ps1                                                   \n.\\eject.ps1 : Impossible de charger le fichier C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1, car     \nl’exécution de scripts est désactivée sur ce système. Pour plus d’informations, consultez                     \nabout_Execution_Policies à l’adresse https://go.microsoft.com/fwlink/?LinkID=135170.                          \nAu caractère Ligne:1 : 1                                                                                      \n+ .\\eject.ps1                                                                                                 \n+ ~~~~~~~~~~~                                                                                                 \n    + CategoryInfo          : Erreur de sécurité : (:) [], PSSecurityException                                \n    + FullyQualifiedErrorId : UnauthorizedAccess                                                              \nPS C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches> set-executionpolicy remotesigned                              \nset-executionpolicy : L'accès à la clé de Registre                                                            \n'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\PowerShell\\1\\ShellIds\\Microsoft.PowerShell' est refusé. Pour modifier  \nla stratégie d’exécution pour l’étendue par défaut (LocalMachine), démarrez Windows PowerShell avec l’option  \nExécuter en tant qu’administrateur. Pour modifier la stratégie d’exécution pour l’utilisateur actuel,         \nexécutez «Set-ExecutionPolicy -Scope CurrentUser».                                                            \nAu caractère Ligne:1 : 1                                                                                      \n+ set-executionpolicy remotesigned                                                                            \n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                                                            \n    + CategoryInfo          : PermissionDenied: (:) [Set-ExecutionPolicy], UnauthorizedAccessException        \n    + FullyQualifiedErrorId : System.UnauthorizedAccessException,Microsoft.PowerShell.Commands.SetExecutionP  \n   olicyCommand                                                                                               \nPS C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches> .\\eject.ps1                                                   \n@{Id=8536}                                                                                                    \n@{Id=5560}                                                                                                    \n@{Id=8340}                                                                                                    \n@{Id=10420}                                                                                                   \n@{Id=11752}                                                                                                   \n@{Id=14204}                                                                                                   \n@{Id=9964}                                                                                                    \n@{Id=2592}                                                                                                    \n@{Id=8364}                                                                                                    \n@{Id=12484}                                                                                                   \n@{Id=692}                                                                                                     \n@{Id=796}                                                                                                     \n@{Id=6164}                                                                                                    \n@{Id=6896}                                                                                                    \n@{Id=10764}                                                                                                   \n@{Id=1180}                                                                                                    \n@{Id=2404}                                                                                                    \n@{Id=1328}                                                                                                    \n@{Id=2752}                                                                                                    \n@{Id=3012}                                                                                                    \n@{Id=3552}                                                                                                    \n@{Id=5740}                                                                                                    \n@{Id=6208}                                                                                                    \n@{Id=8508}                                                                                                    \n@{Id=9076}                                                                                                    \n@{Id=9624}                                                                                                    \n@{Id=10016}                                                                                                   \n@{Id=10080}                                                                                                   \n@{Id=12380}                                                                                                   \n@{Id=13148}                                                                                                   \n@{Id=120}                                                                                                     \n@{Id=1112}                                                                                                    \n@{Id=0}                                                                                                       \n@{Id=3472}                                                                                                    \n@{Id=2640}                                                                                                    \n@{Id=2040}                                                                                                    \n@{Id=12224}                                                                                                   \n@{Id=864}                                                                                                     \n@{Id=2472}                                                                                                    \n@{Id=1380}                                                                                                    \n@{Id=5252}                                                                                                    \n@{Id=8472}                                                                                                    \n@{Id=3540}                                                                                                    \n@{Id=3512}                                                                                                    \n@{Id=1964}                                                                                                    \n@{Id=7296}                                                                                                    \n@{Id=2524}                                                                                                    \n@{Id=5428}                                                                                                    \n@{Id=3480}                                                                                                    \n@{Id=5580}                                                                                                    \n@{Id=5628}                                                                                                    \n@{Id=5912}                                                                                                    \n@{Id=2816}                                                                                                    \n@{Id=8632}                                                                                                    \n@{Id=12084}                                                                                                   \n@{Id=144}                                                                                                     \n@{Id=6732}                                                                                                    \n@{Id=7132}                                                                                                    \n@{Id=7592}                                                                                                    \n@{Id=7784}                                                                                                    \n@{Id=8836}                                                                                                    \n@{Id=10008}                                                                                                   \n@{Id=12252}                                                                                                   \n@{Id=12668}                                                                                                   \n@{Id=6848}                                                                                                    \n@{Id=2452}                                                                                                    \n@{Id=6840}                                                                                                    \n@{Id=7476}                                                                                                    \n@{Id=10108}                                                                                                   \n@{Id=10100}                                                                                                   \n@{Id=856}                                                                                                     \n@{Id=8804}                                                                                                    \n@{Id=11956}                                                                                                   \n@{Id=9716}                                                                                                    \n@{Id=5496}                                                                                                    \n@{Id=13616}                                                                                                   \n@{Id=500}                                                                                                     \n@{Id=2256}                                                                                                    \n@{Id=6552}                                                                                                    \n@{Id=2648}                                                                                                    \n@{Id=632}                                                                                                     \n@{Id=928}                                                                                                     \n@{Id=992}                                                                                                     \n@{Id=1012}                                                                                                    \n@{Id=1148}                                                                                                    \n@{Id=1208}                                                                                                    \n@{Id=1280}                                                                                                    \n@{Id=1284}                                                                                                    \n@{Id=1296}                                                                                                    \n@{Id=1376}                                                                                                    \n@{Id=1388}                                                                                                    \n@{Id=1416}                                                                                                    \n@{Id=1424}                                                                                                    \n@{Id=1432}                                                                                                    \n@{Id=1624}                                                                                                    \n@{Id=1672}                                                                                                    \n@{Id=1708}                                                                                                    \n@{Id=1728}                                                                                                    \n@{Id=1820}                                                                                                    \n@{Id=1864}                                                                                                    \n@{Id=1896}                                                                                                    \n@{Id=1996}                                                                                                    \n@{Id=2120}                                                                                                    \n@{Id=2136}                                                                                                    \n@{Id=2144}                                                                                                    \n@{Id=2232}                                                                                                    \n@{Id=2304}                                                                                                    \n@{Id=2376}                                                                                                    \n@{Id=2384}                                                                                                    \n@{Id=2392}                                                                                                    \n@{Id=2428}                                                                                                    \n@{Id=2516}                                                                                                    \n@{Id=2552}                                                                                                    \n@{Id=2560}                                                                                                    \n@{Id=2700}                                                                                                    \n@{Id=2728}                                                                                                    \n@{Id=2808}                                                                                                    \n@{Id=2836}                                                                                                    \n@{Id=2844}                                                                                                    \n@{Id=2896}                                                                                                    \n@{Id=2972}                                                                                                    \n@{Id=3228}                                                                                                    \n@{Id=3236}                                                                                                    \n@{Id=3248}                                                                                                    \n@{Id=3440}                                                                                                    \n@{Id=3448}                                                                                                    \n@{Id=3464}                                                                                                    \n@{Id=3488}                                                                                                    \n@{Id=3496}                                                                                                    \n@{Id=3504}                                                                                                    \n@{Id=3532}                                                                                                    \n@{Id=3768}                                                                                                    \n@{Id=3836}                                                                                                    \n@{Id=4396}                                                                                                    \n@{Id=4544}                                                                                                    \n@{Id=4560}                                                                                                    \n@{Id=4600}                                                                                                    \n@{Id=4656}                                                                                                    \n@{Id=4968}                                                                                                    \n@{Id=5644}                                                                                                    \n@{Id=5704}                                                                                                    \n@{Id=6088}                                                                                                    \n@{Id=7344}                                                                                                    \n@{Id=7708}                                                                                                    \n@{Id=7980}                                                                                                    \n@{Id=8140}                                                                                                    \n@{Id=8248}                                                                                                    \n@{Id=8252}                                                                                                    \n@{Id=8864}                                                                                                    \n@{Id=10620}                                                                                                   \n@{Id=10708}                                                                                                   \n@{Id=11144}                                                                                                   \n@{Id=11668}                                                                                                   \n@{Id=11780}                                                                                                   \n@{Id=11988}                                                                                                   \n@{Id=12100}                                                                                                   \n@{Id=12124}                                                                                                   \n@{Id=12268}                                                                                                   \n@{Id=13204}                                                                                                   \n@{Id=4}                                                                                                       \n@{Id=3572}                                                                                                    \n@{Id=2644}                                                                                                    \n@{Id=6408}                                                                                                    \n@{Id=11620}                                                                                                   \n@{Id=5920}                                                                                                    \n@{Id=3404}                                                                                                    \n@{Id=8132}                                                                                                    \n@{Id=7628}                                                                                                    \n@{Id=2652}                                                                                                    \n@{Id=7876}                                                                                                    \n@{Id=2216}                                                                                                    \n@{Id=780}                                                                                                     \n@{Id=1048}                                                                                                    \n@{Id=6080}                                                                                                    \n@{Id=7044}                                                                                                    \n@{Id=3524}                                                                                                    \n@{Id=7232}                                                                                                    \nPS C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches> .\\eject.ps1                                                   \n@{Id=8536}.id                                                                                                 \n@{Id=5560}.id                                                                                                 \n@{Id=8340}.id                                                                                                 \n@{Id=10420}.id                                                                                                \n@{Id=11752}.id                                                                                                \n@{Id=14204}.id                                                                                                \n@{Id=9964}.id                                                                                                 \n@{Id=2592}.id                                                                                                 \n@{Id=8364}.id                                                                                                 \n@{Id=12484}.id                                                                                                \n@{Id=692}.id                                                                                                  \n@{Id=796}.id                                                                                                  \n@{Id=6164}.id                                                                                                 \n@{Id=6896}.id                                                                                                 \n@{Id=10764}.id                                                                                                \n@{Id=1180}.id                                                                                                 \n@{Id=2404}.id                                                                                                 \n@{Id=1328}.id                                                                                                 \n@{Id=2752}.id                                                                                                 \n@{Id=3012}.id                                                                                                 \n@{Id=3552}.id                                                                                                 \n@{Id=5740}.id                                                                                                 \n@{Id=6208}.id                                                                                                 \n@{Id=8508}.id                                                                                                 \n@{Id=9076}.id                                                                                                 \n@{Id=9624}.id                                                                                                 \n@{Id=10016}.id                                                                                                \n@{Id=10080}.id                                                                                                \n@{Id=12380}.id                                                                                                \n@{Id=13148}.id                                                                                                \n@{Id=120}.id                                                                                                  \n@{Id=1112}.id                                                                                                 \n@{Id=0}.id                                                                                                    \n@{Id=3472}.id                                                                                                 \n@{Id=2640}.id                                                                                                 \n@{Id=2040}.id                                                                                                 \n@{Id=12224}.id                                                                                                \n@{Id=864}.id                                                                                                  \n@{Id=2472}.id                                                                                                 \n@{Id=1380}.id                                                                                                 \n@{Id=5252}.id                                                                                                 \n@{Id=8472}.id                                                                                                 \n@{Id=3540}.id                                                                                                 \n@{Id=3512}.id                                                                                                 \n@{Id=1964}.id                                                                                                 \n@{Id=7296}.id                                                                                                 \n@{Id=2524}.id                                                                                                 \n@{Id=5428}.id                                                                                                 \n@{Id=3480}.id                                                                                                 \n@{Id=5580}.id                                                                                                 \n@{Id=5628}.id                                                                                                 \n@{Id=5912}.id                                                                                                 \n@{Id=2816}.id                                                                                                 \n@{Id=8632}.id                                                                                                 \n@{Id=12084}.id                                                                                                \n@{Id=144}.id                                                                                                  \n@{Id=6732}.id                                                                                                 \n@{Id=7132}.id                                                                                                 \n@{Id=7592}.id                                                                                                 \n@{Id=7784}.id                                                                                                 \n@{Id=8836}.id                                                                                                 \n@{Id=10008}.id                                                                                                \n@{Id=12252}.id                                                                                                \n@{Id=6848}.id                                                                                                 \n@{Id=2452}.id                                                                                                 \n@{Id=8664}.id                                                                                                 \n@{Id=6840}.id                                                                                                 \n@{Id=7476}.id                                                                                                 \n@{Id=10108}.id                                                                                                \n@{Id=10100}.id                                                                                                \n@{Id=856}.id                                                                                                  \n@{Id=8804}.id                                                                                                 \n@{Id=11956}.id                                                                                                \n@{Id=9716}.id                                                                                                 \n@{Id=5496}.id                                                                                                 \n@{Id=13616}.id                                                                                                \n@{Id=500}.id                                                                                                  \n@{Id=2256}.id                                                                                                 \n@{Id=6552}.id                                                                                                 \n@{Id=2648}.id                                                                                                 \n@{Id=632}.id                                                                                                  \n@{Id=928}.id                                                                                                  \n@{Id=992}.id                                                                                                  \n@{Id=1012}.id                                                                                                 \n@{Id=1148}.id                                                                                                 \n@{Id=1208}.id                                                                                                 \n@{Id=1280}.id                                                                                                 \n@{Id=1284}.id                                                                                                 \n@{Id=1296}.id                                                                                                 \n@{Id=1376}.id                                                                                                 \n@{Id=1388}.id                                                                                                 \n@{Id=1416}.id                                                                                                 \n@{Id=1424}.id                                                                                                 \n@{Id=1432}.id                                                                                                 \n@{Id=1624}.id                                                                                                 \n@{Id=1672}.id                                                                                                 \n@{Id=1708}.id                                                                                                 \n@{Id=1728}.id                                                                                                 \n@{Id=1820}.id                                                                                                 \n@{Id=1864}.id                                                                                                 \n@{Id=1896}.id                                                                                                 \n@{Id=1996}.id                                                                                                 \n@{Id=2120}.id                                                                                                 \n@{Id=2136}.id                                                                                                 \n@{Id=2144}.id                                                                                                 \n@{Id=2232}.id                                                                                                 \n@{Id=2304}.id                                                                                                 \n@{Id=2376}.id                                                                                                 \n@{Id=2384}.id                                                                                                 \n@{Id=2392}.id                                                                                                 \n@{Id=2428}.id                                                                                                 \n@{Id=2516}.id                                                                                                 \n@{Id=2552}.id                                                                                                 \n@{Id=2560}.id                                                                                                 \n@{Id=2700}.id                                                                                                 \n@{Id=2728}.id                                                                                                 \n@{Id=2808}.id                                                                                                 \n@{Id=2836}.id                                                                                                 \n@{Id=2844}.id                                                                                                 \n@{Id=2896}.id                                                                                                 \n@{Id=2972}.id                                                                                                 \n@{Id=3228}.id                                                                                                 \n@{Id=3236}.id                                                                                                 \n@{Id=3248}.id                                                                                                 \n@{Id=3440}.id                                                                                                 \n@{Id=3448}.id                                                                                                 \n@{Id=3464}.id                                                                                                 \n@{Id=3488}.id                                                                                                 \n@{Id=3496}.id                                                                                                 \n@{Id=3504}.id                                                                                                 \n@{Id=3532}.id                                                                                                 \n@{Id=3768}.id                                                                                                 \n@{Id=3836}.id                                                                                                 \n@{Id=4396}.id                                                                                                 \n@{Id=4544}.id                                                                                                 \n@{Id=4560}.id                                                                                                 \n@{Id=4600}.id                                                                                                 \n@{Id=4656}.id                                                                                                 \n@{Id=4968}.id                                                                                                 \n@{Id=5644}.id                                                                                                 \n@{Id=5704}.id                                                                                                 \n@{Id=6088}.id                                                                                                 \n@{Id=7344}.id                                                                                                 \n@{Id=7708}.id                                                                                                 \n@{Id=7980}.id                                                                                                 \n@{Id=8140}.id                                                                                                 \n@{Id=8248}.id                                                                                                 \n@{Id=8252}.id                                                                                                 \n@{Id=8864}.id                                                                                                 \n@{Id=10620}.id                                                                                                \n@{Id=10708}.id                                                                                                \n@{Id=11144}.id                                                                                                \n@{Id=11668}.id                                                                                                \n@{Id=11780}.id                                                                                                \n@{Id=11988}.id                                                                                                \n@{Id=12100}.id                                                                                                \n@{Id=12124}.id                                                                                                \n@{Id=12268}.id                                                                                                \n@{Id=13204}.id                                                                                                \n@{Id=4}.id                                                                                                    \n@{Id=3572}.id                                                                                                 \n@{Id=2644}.id                                                                                                 \n@{Id=6408}.id                                                                                                 \n@{Id=11620}.id                                                                                                \n@{Id=5920}.id                                                                                                 \n@{Id=3404}.id                                                                                                 \n@{Id=8132}.id                                                                                                 \n@{Id=7628}.id                                                                                                 \n@{Id=2652}.id                                                                                                 \n@{Id=7876}.id                                                                                                 \n@{Id=2216}.id                                                                                                 \n@{Id=780}.id                                                                                                  \n@{Id=1048}.id                                                                                                 \n@{Id=6080}.id                                                                                                 \n@{Id=7044}.id                                                                                                 \n@{Id=3524}.id                                                                                                 \n@{Id=7232}.id                                                                                                 \nPS C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches> .\\eject.ps1                                                   \n8536                                                                                                          \n5560                                                                                                          \n8340                                                                                                          \n10420                                                                                                         \n11752                                                                                                         \n14204                                                                                                         \n9964                                                                                                          \n2592                                                                                                          \n8364                                                                                                          \n12484                                                                                                         \n692                                                                                                           \n796                                                                                                           \n6164                                                                                                          \n6896                                                                                                          \n10764                                                                                                         \n1180                                                                                                          \n2404                                                                                                          \n1328                                                                                                          \n2752                                                                                                          \n3012                                                                                                          \n3552                                                                                                          \n5740                                                                                                          \n6208                                                                                                          \n8508                                                                                                          \n9076                                                                                                          \n9624                                                                                                          \n10016                                                                                                         \n10080                                                                                                         \n12380                                                                                                         \n13148                                                                                                         \n120                                                                                                           \n1112                                                                                                          \n0                                                                                                             \n3472                                                                                                          \n2640                                                                                                          \n2040                                                                                                          \n12224                                                                                                         \n864                                                                                                           \n2472                                                                                                          \n1380                                                                                                          \n5252                                                                                                          \n8472                                                                                                          \n3540                                                                                                          \n3512                                                                                                          \n1964                                                                                                          \n7296                                                                                                          \n2524                                                                                                          \n5428                                                                                                          \n3480                                                                                                          \n5580                                                                                                          \n5628                                                                                                          \n5912                                                                                                          \n2816                                                                                                          \n8632                                                                                                          \n12084                                                                                                         \n144                                                                                                           \n6732                                                                                                          \n7132                                                                                                          \n7592                                                                                                          \n7784                                                                                                          \n8836                                                                                                          \n10008                                                                                                         \n12252                                                                                                         \n1000                                                                                                          \n6848                                                                                                          \n2452                                                                                                          \n8664                                                                                                          \n6840                                                                                                          \n7476                                                                                                          \n10108                                                                                                         \n10100                                                                                                         \n856                                                                                                           \n8804                                                                                                          \n11956                                                                                                         \n9716                                                                                                          \n5496                                                                                                          \n13616                                                                                                         \n500                                                                                                           \n2256                                                                                                          \n6552                                                                                                          \n2648                                                                                                          \n632                                                                                                           \n928                                                                                                           \n992                                                                                                           \n1012                                                                                                          \n1148                                                                                                          \n1208                                                                                                          \n1280                                                                                                          \n1284                                                                                                          \n1296                                                                                                          \n1376                                                                                                          \n1388                                                                                                          \n1416                                                                                                          \n1424                                                                                                          \n1432                                                                                                          \n1624                                                                                                          \n1672                                                                                                          \n1708                                                                                                          \n1728                                                                                                          \n1820                                                                                                          \n1864                                                                                                          \n1896                                                                                                          \n1996                                                                                                          \n2120                                                                                                          \n2136                                                                                                          \n2144                                                                                                          \n2232                                                                                                          \n2304                                                                                                          \n2376                                                                                                          \n2384                                                                                                          \n2392                                                                                                          \n2428                                                                                                          \n2516                                                                                                          \n2552                                                                                                          \n2560                                                                                                          \n2700                                                                                                          \n2728                                                                                                          \n2808                                                                                                          \n2836                                                                                                          \n2844                                                                                                          \n2896                                                                                                          \n2972                                                                                                          \n3228                                                                                                          \n3236                                                                                                          \n3248                                                                                                          \n3440                                                                                                          \n3448                                                                                                          \n3464                                                                                                          \n3488                                                                                                          \n3496                                                                                                          \n3504                                                                                                          \n3532                                                                                                          \n3768                                                                                                          \n3836                                                                                                          \n4396                                                                                                          \n4544                                                                                                          \n4560                                                                                                          \n4600                                                                                                          \n4656                                                                                                          \n4968                                                                                                          \n5644                                                                                                          \n5704                                                                                                          \n6088                                                                                                          \n7344                                                                                                          \n7708                                                                                                          \n7980                                                                                                          \n8140                                                                                                          \n8248                                                                                                          \n8252                                                                                                          \n8864                                                                                                          \n10620                                                                                                         \n10708                                                                                                         \n11144                                                                                                         \n11668                                                                                                         \n11780                                                                                                         \n11988                                                                                                         \n12100                                                                                                         \n12124                                                                                                         \n12268                                                                                                         \n13204                                                                                                         \n4                                                                                                             \n3572                                                                                                          \n2644                                                                                                          \n6408                                                                                                          \n11620                                                                                                         \n5920                                                                                                          \n3404                                                                                                          \n8132                                                                                                          \n7628                                                                                                          \n2652                                                                                                          \n7876                                                                                                          \n2216                                                                                                          \n780                                                                                                           \n1048                                                                                                          \n6080                                                                                                          \n7044                                                                                                          \n3524                                                                                                          \n7232                                                                                                          \nPS C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches> .\\eject.ps1                                                   \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nInjector.exe : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier    \nde script ou programme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez    \nque le chemin d'accès est correct et réessayez.                                                               \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 2                                      \n+     Injector.exe -p $i -e .\\win_hook.dll                                                                    \n+     ~~~~~~~~~~~~                                                                                            \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nPS C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches> .\\eject.ps1                                                   \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & Injector.exe -p $i -e .\\win_hook.dll                                                                  \n+       ~~~~~~~~~~~~                                                                                          \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & Injector.exe -p $i -e .\\win_hook.dll                                                                  \n+       ~~~~~~~~~~~~                                                                                          \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & Injector.exe -p $i -e .\\win_hook.dll                                                                  \n+       ~~~~~~~~~~~~                                                                                          \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & Injector.exe -p $i -e .\\win_hook.dll                                                                  \n+       ~~~~~~~~~~~~                                                                                          \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & Injector.exe -p $i -e .\\win_hook.dll                                                                  \n+       ~~~~~~~~~~~~                                                                                          \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & Injector.exe -p $i -e .\\win_hook.dll                                                                  \n+       ~~~~~~~~~~~~                                                                                          \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & Injector.exe -p $i -e .\\win_hook.dll                                                                  \n+       ~~~~~~~~~~~~                                                                                          \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & Injector.exe -p $i -e .\\win_hook.dll                                                                  \n+       ~~~~~~~~~~~~                                                                                          \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & Injector.exe -p $i -e .\\win_hook.dll                                                                  \n+       ~~~~~~~~~~~~                                                                                          \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & Injector.exe -p $i -e .\\win_hook.dll                                                                  \n+       ~~~~~~~~~~~~                                                                                          \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nPS C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches> .\\eject.ps1                                                   \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & \"Injector.exe\" -p $i -e .\\win_hook.dll                                                                \n+       ~~~~~~~~~~~~~~                                                                                        \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & \"Injector.exe\" -p $i -e .\\win_hook.dll                                                                \n+       ~~~~~~~~~~~~~~                                                                                        \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & \"Injector.exe\" -p $i -e .\\win_hook.dll                                                                \n+       ~~~~~~~~~~~~~~                                                                                        \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & \"Injector.exe\" -p $i -e .\\win_hook.dll                                                                \n+       ~~~~~~~~~~~~~~                                                                                        \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & \"Injector.exe\" -p $i -e .\\win_hook.dll                                                                \n+       ~~~~~~~~~~~~~~                                                                                        \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & \"Injector.exe\" -p $i -e .\\win_hook.dll                                                                \n+       ~~~~~~~~~~~~~~                                                                                        \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & \"Injector.exe\" -p $i -e .\\win_hook.dll                                                                \n+       ~~~~~~~~~~~~~~                                                                                        \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & \"Injector.exe\" -p $i -e .\\win_hook.dll                                                                \n+       ~~~~~~~~~~~~~~                                                                                        \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & \"Injector.exe\" -p $i -e .\\win_hook.dll                                                                \n+       ~~~~~~~~~~~~~~                                                                                        \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & \"Injector.exe\" -p $i -e .\\win_hook.dll                                                                \n+       ~~~~~~~~~~~~~~                                                                                        \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & \"Injector.exe\" -p $i -e .\\win_hook.dll                                                                \n+       ~~~~~~~~~~~~~~                                                                                        \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & \"Injector.exe\" -p $i -e .\\win_hook.dll                                                                \n+       ~~~~~~~~~~~~~~                                                                                        \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & \"Injector.exe\" -p $i -e .\\win_hook.dll                                                                \n+       ~~~~~~~~~~~~~~                                                                                        \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & \"Injector.exe\" -p $i -e .\\win_hook.dll                                                                \n+       ~~~~~~~~~~~~~~                                                                                        \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & \"Injector.exe\" -p $i -e .\\win_hook.dll                                                                \n+       ~~~~~~~~~~~~~~                                                                                        \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & \"Injector.exe\" -p $i -e .\\win_hook.dll                                                                \n+       ~~~~~~~~~~~~~~                                                                                        \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \n& : Le terme «Injector.exe» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou  \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\eject.ps1:5 : 4                                      \n+     & \"Injector.exe\" -p $i -e .\\win_hook.dll                                                                \n+       ~~~~~~~~~~~~~~                                                                                        \n    + CategoryInfo          : ObjectNotFound: (Injector.exe:String) [], CommandNotFoundException              \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nPS C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches> \nMicrosoft Windows [version 10.0.18362.959]                                            \n(c) 2019 Microsoft Corporation. Tous droits réservés.                                 \n                                                                                      \nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches>",
			"settings":
			{
				"buffer_size": 138105,
				"line_ending": "Windows",
				"name": "  - powershell  ",
				"scratch": true
			}
		},
		{
			"contents": "Microsoft Windows [version 10.0.18362.959]                                            \n(c) 2019 Microsoft Corporation. Tous droits réservés.                                 \n                                                                                      \nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches>Mes_Touches.aps                                                   \nLe système ne peut exécuter le programme spécifié.                                                            \n                                                                                                              \nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches>Mes_Touches.exe                                                   \nInstall                                                                                                       \n^C                                                                                                            \nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches>Mes_Touches.exe                                                   \nInstall                                                                                                       \nError: Impossible dÆÚtablir un hook non local sans un descripteur de module.                                  \n^C                                                                                                            \nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches>Mes_Touches.exe                                                   \nInstall                                                                                                       \n^C                                                                                                            \nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches>Mes_Touches.exe                                                   \n^C                                                                                                            \nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches>Mes_Touches.exe                                                   \n^C                                                                                                            \nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches>",
			"settings":
			{
				"buffer_size": 2192,
				"line_ending": "Windows",
				"name": " ",
				"scratch": true
			}
		},
		{
			"file": "src/TimeInfo.hpp",
			"settings":
			{
				"buffer_size": 223,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/Mes_Touches.rc",
			"settings":
			{
				"buffer_size": 1701,
				"encoding": "UTF-16 LE with BOM",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/Main.cpp",
			"settings":
			{
				"buffer_size": 32409,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/cbt_hook.hpp",
			"settings":
			{
				"buffer_size": 0,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/Logs.hpp",
			"settings":
			{
				"buffer_size": 749,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/NotifyIcon.cpp",
			"settings":
			{
				"buffer_size": 2769,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/NotifyIcon.hpp",
			"settings":
			{
				"buffer_size": 567,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "/*****************************************************************************\n\n\t\t\t\t\t\t\t\tdbg(...) macro\n\nLicense (MIT):\n\n  Copyright (c) 2019 David Peter <mail@david-peter.de>\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to\n  deal in the Software without restriction, including without limitation the\n  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n  sell copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n\n*****************************************************************************/\n\n#ifndef DBG_MACRO_DBG_H\n#define DBG_MACRO_DBG_H\n\n#pragma message(\"WARNING: the 'dbg.h' header is included in your code base\")\n\n#include <ios>\n#include <iostream>\n#include <sstream>\n#include <string>\n#include <type_traits>\n#include <vector>\n\n#if __cplusplus >= 201703L\n#include <optional>\n#endif\n\nnamespace dbg_macro {\n\n\tnamespace pretty_function {\n\n\t\t// Compiler-agnostic version of __PRETTY_FUNCTION__ and constants to\n\t\t// extract the template argument in `type_name_impl`\n\n#if defined(__clang__)\n#define DBG_MACRO_PRETTY_FUNCTION __PRETTY_FUNCTION__\n\t\tstatic constexpr size_t PREFIX_LENGTH =\n\t\t\tsizeof(\"const char *dbg_macro::type_name_impl() [T = \") - 1;\n\t\tstatic constexpr size_t SUFFIX_LENGTH = sizeof(\"]\") - 1;\n#elif defined(__GNUC__) && !defined(__clang__)\n#define DBG_MACRO_PRETTY_FUNCTION __PRETTY_FUNCTION__\n\t\tstatic constexpr size_t PREFIX_LENGTH =\n\t\t\tsizeof(\"const char* dbg_macro::type_name_impl() [with T = \") - 1;\n\t\tstatic constexpr size_t SUFFIX_LENGTH = sizeof(\"]\") - 1;\n#elif defined(_MSC_VER)\n#define DBG_MACRO_PRETTY_FUNCTION __FUNCSIG__\n\t\tstatic constexpr size_t PREFIX_LENGTH =\n\t\t\tsizeof(\"const char *__cdecl dbg_macro::type_name_impl<\") - 1;\n\t\tstatic constexpr size_t SUFFIX_LENGTH = sizeof(\">(void)\") - 1;\n#else\n#error \"This compiler is currently not supported by dbg_macro.\"\n#endif\n\n\t}  // namespace pretty_function\n\n\t// Implementation of 'type_name<T>()'\n\n\ttemplate <typename T>\n\tconst char* type_name_impl() {\n\t\treturn DBG_MACRO_PRETTY_FUNCTION;\n\t}\n\n\ttemplate <typename T>\n\tstruct type_tag {};\n\n\ttemplate <int& ... ExplicitArgumentBarrier, typename T>\n\tstd::string get_type_name(type_tag<T>) {\n\t\tnamespace pf = pretty_function;\n\n\t\tstd::string type = type_name_impl<T>();\n\t\treturn type.substr(pf::PREFIX_LENGTH,\n\t\t\ttype.size() - pf::PREFIX_LENGTH - pf::SUFFIX_LENGTH);\n\t}\n\n\ttemplate <typename T>\n\tstd::string type_name() {\n\t\tif (std::is_volatile<T>::value) {\n\t\t\tif (std::is_pointer<T>::value) {\n\t\t\t\treturn type_name<typename std::remove_volatile<T>::type>() + \" volatile\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn \"volatile \" + type_name<typename std::remove_volatile<T>::type>();\n\t\t\t}\n\t\t}\n\t\tif (std::is_const<T>::value) {\n\t\t\tif (std::is_pointer<T>::value) {\n\t\t\t\treturn type_name<typename std::remove_const<T>::type>() + \" const\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn \"const \" + type_name<typename std::remove_const<T>::type>();\n\t\t\t}\n\t\t}\n\t\tif (std::is_pointer<T>::value) {\n\t\t\treturn type_name<typename std::remove_pointer<T>::type>() + \"*\";\n\t\t}\n\t\tif (std::is_lvalue_reference<T>::value) {\n\t\t\treturn type_name<typename std::remove_reference<T>::type>() + \"&\";\n\t\t}\n\t\tif (std::is_rvalue_reference<T>::value) {\n\t\t\treturn type_name<typename std::remove_reference<T>::type>() + \"&&\";\n\t\t}\n\t\treturn get_type_name(type_tag<T>{});\n\t}\n\n\tinline std::string get_type_name(type_tag<short>) {\n\t\treturn \"short\";\n\t}\n\n\tinline std::string get_type_name(type_tag<unsigned short>) {\n\t\treturn \"unsigned short\";\n\t}\n\n\tinline std::string get_type_name(type_tag<long>) {\n\t\treturn \"long\";\n\t}\n\n\tinline std::string get_type_name(type_tag<unsigned long>) {\n\t\treturn \"unsigned long\";\n\t}\n\n\tinline std::string get_type_name(type_tag<std::string>) {\n\t\treturn \"std::string\";\n\t}\n\n\ttemplate <typename T>\n\tstd::string get_type_name(type_tag<std::vector<T, std::allocator<T>>>) {\n\t\treturn \"std::vector<\" + type_name<T>() + \">\";\n\t}\n\n\t// Implementation of 'is_detected' to specialize for container-like types\n\n\tnamespace detail_detector {\n\n\t\tstruct nonesuch {\n\t\t\tnonesuch() = delete;\n\t\t\t~nonesuch() = delete;\n\t\t\tnonesuch(nonesuch const&) = delete;\n\t\t\tvoid operator=(nonesuch const&) = delete;\n\t\t};\n\n\t\ttemplate <typename...>\n\t\tusing void_t = void;\n\n\t\ttemplate <class Default,\n\t\t\tclass AlwaysVoid,\n\t\t\ttemplate <class...>\n\t\tclass Op,\n\t\t\tclass... Args>\n\t\t\tstruct detector {\n\t\t\tusing value_t = std::false_type;\n\t\t\tusing type = Default;\n\t\t};\n\n\t\ttemplate <class Default, template <class...> class Op, class... Args>\n\t\tstruct detector<Default, void_t<Op<Args...>>, Op, Args...> {\n\t\t\tusing value_t = std::true_type;\n\t\t\tusing type = Op<Args...>;\n\t\t};\n\n\t}  // namespace detail_detector\n\n\ttemplate <template <class...> class Op, class... Args>\n\tusing is_detected = typename detail_detector::\n\t\tdetector<detail_detector::nonesuch, void, Op, Args...>::value_t;\n\n\ttemplate <typename T>\n\tusing detect_begin_t = decltype(begin(std::declval<T>()));\n\n\ttemplate <typename T>\n\tusing detect_end_t = decltype(end(std::declval<T>()));\n\n\ttemplate <typename T>\n\tusing detect_size_t = decltype(std::declval<T>().size());\n\n\ttemplate <typename T>\n\tstruct has_begin_end_size {\n\t\tstatic constexpr bool value = is_detected<detect_begin_t, T>::value&&\n\t\t\tis_detected<detect_end_t, T>::value&&\n\t\t\tis_detected<detect_size_t, T>::value;\n\t};\n\n\t// Specializations of \"pretty_print\"\n\n\ttemplate <typename T>\n\ttypename std::enable_if<!has_begin_end_size<T>::value &&\n\t\t!std::is_enum<T>::value,\n\t\tbool>::type\n\t\tpretty_print(std::ostream& stream, const T& value) {\n\t\tstream << value;\n\t\treturn true;\n\t}\n\n\ttemplate <>\n\tinline bool pretty_print(std::ostream& stream, const bool& value) {\n\t\tstream << std::boolalpha << value;\n\t\treturn true;\n\t}\n\n\ttemplate <>\n\tinline bool pretty_print(std::ostream& stream, const char& value) {\n\t\tstream << \"'\" << value << \"'\";\n\t\treturn true;\n\t}\n\n\ttemplate <typename P>\n\tbool pretty_print(std::ostream& stream, P* const& value) {\n\t\tif (value == nullptr) {\n\t\t\tstream << \"nullptr\";\n\t\t}\n\t\telse {\n\t\t\tstream << value;\n\t\t}\n\t\treturn true;\n\t}\n\n\ttemplate <size_t N>\n\tbool pretty_print(std::ostream& stream, const char(&value)[N]) {\n\t\tstream << value;\n\t\treturn false;\n\t}\n\n\ttemplate <>\n\tinline bool pretty_print(std::ostream& stream, const char* const& value) {\n\t\tstream << '\"' << value << '\"';\n\t\treturn true;\n\t}\n\n#if __cplusplus >= 201703L\n\n\ttemplate <typename T>\n\tbool pretty_print(std::ostream & stream, const std::optional<T> & value) {\n\t\tif (value) {\n\t\t\tstream << '{' << *value << '}';\n\t\t}\n\t\telse {\n\t\t\tstream << \"nullopt\";\n\t\t}\n\n\t\treturn true;\n\t}\n\n#endif  // __cplusplus >= 201703L\n\n\ttemplate <typename Container>\n\ttypename std::enable_if<has_begin_end_size<Container>::value, bool>::type\n\t\tpretty_print(std::ostream& stream, Container const& value) {\n\t\tstream << \"{\";\n\t\tconst size_t size = value.size();\n\t\tconst size_t n = std::min(size_t{ 5 }, size);\n\t\tsize_t i = 0;\n\t\tfor (auto it = begin(value); it != end(value) && i < n; ++it, ++i) {\n\t\t\tpretty_print(stream, *it);\n\t\t\tif (i != n - 1) {\n\t\t\t\tstream << \", \";\n\t\t\t}\n\t\t}\n\n\t\tif (size > n) {\n\t\t\tstream << \", ...\";\n\t\t\tstream << \" size:\" << size;\n\t\t}\n\n\t\tstream << \"}\";\n\t\treturn true;\n\t}\n\n\ttemplate <typename Enum>\n\ttypename std::enable_if<std::is_enum<Enum>::value, bool>::type pretty_print(\n\t\tstd::ostream& stream,\n\t\tEnum const& value) {\n\t\tusing UnderlyingType = typename std::underlying_type<Enum>::type;\n\t\tstream << static_cast<UnderlyingType>(value);\n\n\t\treturn true;\n\t}\n\n\ttemplate <>\n\tinline bool pretty_print(std::ostream& stream, const std::string& value) {\n\t\tstream << '\"' << value << '\"';\n\t\treturn true;\n\t}\n\n\tclass DebugOutput {\n\tpublic:\n\t\tDebugOutput(const char* filepath,\n\t\t\tint line,\n\t\t\tconst char* function_name,\n\t\t\tconst char* expression)\n\t\t\t: m_stderr_is_a_tty(false),\n\t\t\tm_filepath(filepath),\n\t\t\tm_line(line),\n\t\t\tm_function_name(function_name),\n\t\t\tm_expression(expression) {\n\t\t\tconst int path_length = m_filepath.length();\n\t\t\tif (path_length > MAX_PATH_LENGTH) {\n\t\t\t\tm_filepath = \"..\" + m_filepath.substr(path_length - MAX_PATH_LENGTH,\n\t\t\t\t\tMAX_PATH_LENGTH);\n\t\t\t}\n\t\t}\n\n\t\ttemplate <typename T>\n\t\tT&& print(const std::string& type, T&& value) const {\n\t\t\tconst T& ref = value;\n\t\t\tstd::stringstream stream_value;\n\t\t\tconst bool print_expr_and_type = pretty_print(stream_value, ref);\n\n\t\t\tstd::cerr << ansi(ANSI_DEBUG) << \"[\" << m_filepath << \":\" << m_line << \" (\"\n\t\t\t\t<< m_function_name << \")] \" << ansi(ANSI_RESET);\n\t\t\tif (print_expr_and_type) {\n\t\t\t\tstd::cerr << ansi(ANSI_EXPRESSION) << m_expression << ansi(ANSI_RESET)\n\t\t\t\t\t<< \" = \";\n\t\t\t}\n\t\t\tstd::cerr << ansi(ANSI_VALUE) << stream_value.str() << ansi(ANSI_RESET);\n\t\t\tif (print_expr_and_type) {\n\t\t\t\tstd::cerr << \" (\" << ansi(ANSI_TYPE) << type << ansi(ANSI_RESET) << \")\";\n\t\t\t}\n\t\t\tstd::cerr << std::endl;\n\n\t\t\treturn std::forward<T>(value);\n\t\t}\n\n\tprivate:\n\t\tconst char* ansi(const char* code) const {\n\t\t\tif (m_stderr_is_a_tty) {\n\t\t\t\treturn code;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn ANSI_EMPTY;\n\t\t\t}\n\t\t}\n\n\t\tconst bool m_stderr_is_a_tty;\n\n\t\tstd::string m_filepath;\n\t\tconst int m_line;\n\t\tconst std::string m_function_name;\n\t\tconst std::string m_expression;\n\n\t\tstatic constexpr int MAX_PATH_LENGTH = 20;\n\n\t\tstatic constexpr const char* const ANSI_EMPTY = \"\";\n\t\tstatic constexpr const char* const ANSI_DEBUG = \"\\x1b[02m\";\n\t\tstatic constexpr const char* const ANSI_EXPRESSION = \"\\x1b[36m\";\n\t\tstatic constexpr const char* const ANSI_VALUE = \"\\x1b[01m\";\n\t\tstatic constexpr const char* const ANSI_TYPE = \"\\x1b[32m\";\n\t\tstatic constexpr const char* const ANSI_RESET = \"\\x1b[0m\";\n\t};\n\n}  // namespace dbg_macro\n\n#ifndef DBG_MACRO_DISABLE\n// We use a variadic macro to support commas inside expressions (e.g.\n// initializer lists):\n#define dbg(...)                                                     \\\n  dbg_macro::DebugOutput(__FILE__, __LINE__, __func__, #__VA_ARGS__) \\\n      .print(dbg_macro::type_name<decltype(__VA_ARGS__)>(), (__VA_ARGS__))\n#else\n#define dbg(...) __VA_ARGS__\n#endif  // DBG_MACRO_DISABLE\n\n#endif  // DBG_MACRO_DBG_H\n",
			"file": "dbg.h",
			"file_size": 10949,
			"file_write_time": 132413663311576904,
			"settings":
			{
				"buffer_size": 10571,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "// dear imgui: standalone example application for DirectX 9\n// If you are new to dear imgui, see examples/README.txt and documentation at the top of imgui.cpp.\n#define START_WITH_VISU 1\n#define REGISTER_HOOKS 1\n#define REGISTER_MOUSE_HOOK 0\n#define REGISTER_EVENT_HOOK 1\n#define REGISTER_KEYBOARD_HOOK 0\n#define IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS   // [Win32] Don't implement default clipboard handler. Won't use and link with OpenClipboard/GetClipboardData/CloseClipboard etc.\n//#define IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS         // [Win32] Don't implement default IME handler. Won't use and link with ImmGetContext/ImmSetCompositionWindow.\n//#define IMGUI_DISABLE_WIN32_FUNCTIONS                     // [Win32] Won't use and link with any Win32 function.\n//#define IMGUI_DISABLE_FORMAT_STRING_FUNCTIONS             // Don't implement ImFormatString/ImFormatStringV so you can implement them yourself if you don't want to link with vsnprintf.\n//#define IMGUI_DISABLE_MATH_FUNCTIONS                      // Don't implement ImFabs/ImSqrt/ImPow/ImFmod/ImCos/ImSin/ImAcos/ImAtan2 wrapper so you can implement them yourself. Declare your prototypes in imconfig.h.\n//#define IMGUI_DISABLE_DEFAULT_ALLOCATORS                  // Don't implement default allocators calling malloc()/free() to avoid linking with them. You will need to call ImGui::SetAllocatorFunctions().\n#include \"imgui.h\"\n#include <thread>\n#include \"imgui_impl_win32.h\"\n#include \"imgui_impl_opengl3.h\"\n#include \"GL/glew.h\"\n#include \"GL/wglew.h\"\n\n#include <tchar.h>\n\n#include <mutex>\n#include <atomic>\n#include <iostream>\n#include <iomanip>\n#include <filesystem>\n#include <set>\n#include <cassert>\n#include <unordered_set>\n\n#include \"resource.h\"\n\n#include \"render_stats.hpp\"\n#include \"keyboard.hpp\"\n#include \"Mouse.hpp\"\n#include \"Settings.hpp\"\n#include \"NotifyIcon.hpp\"\n#include \"Common.hpp\"\n#include \"TimeInfo.hpp\"\n#include \"file.hpp\"\n#include \"Logs.hpp\"\n#include \"Screen.hpp\"\n#include \"Event.hpp\"\n\nconstexpr auto WM_NOTIFY_MSG = WM_APP + 1;\nconstexpr auto Quit_Request = WM_APP + 2;\n// Data\nstatic LPDIRECT3DDEVICE9\t\tg_pd3dDevice = NULL;\nstatic D3DPRESENT_PARAMETERS\tg_d3dpp;\n\nvoid window_process() noexcept;\n\nextern LRESULT ImGui_ImplWin32_WndProcHandler(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);\n\nvoid event_queue_process() noexcept;\n\nLRESULT CALLBACK display_hook();\nLRESULT CALLBACK keyboard_hook(int n_code, WPARAM w_param, LPARAM l_param) noexcept;\nLRESULT CALLBACK mouse_hook(int n_code, WPARAM w_param, LPARAM l_param) noexcept;\nvoid CALLBACK event_hook(\n\tHWINEVENTHOOK handle_hook,\n\tDWORD event,\n\tHWND handle_window,\n\tLONG object,\n\tLONG child,\n\tDWORD event_thread,\n\tDWORD event_time\n) noexcept;\n\nstd::optional<std::string> get_last_error_message() noexcept;\nstd::optional<HGLRC> create_gl_context(HWND handle_window) noexcept;\nvoid destroy_gl_context(HGLRC gl_context) noexcept;\n\n// It's shared data between the hook process and the windows process.\nstruct SharedData {\n\tstd::mutex mut_keyboard_state;\n\tstd::optional<KeyboardState> keyboard_state;\n\n\tstd::mutex mut_mouse_state;\n\tstd::optional<MouseState> mouse_state;\n\n\tstd::mutex mut_event_state;\n\tstd::optional<EventState> event_state;\n\n\tstd::atomic<HWND> hook_window = nullptr;\n\tstd::atomic<HWND> visu_window = nullptr;\n\tSettings settings;\n} shared;\n\nconstexpr auto hook_class_name = \"Hook MT\";\nconstexpr auto visu_class_name = \"Visu MT\";\nconstexpr auto window_title = \"Mes Touches\";\n\nLogs logs;\n\nstruct EventQueueCache {\n\tstd::mutex mutex;\n\tstd::condition_variable wait_var;\n\tbool event_received{ false };\n\n\tstd::vector<KeyEntry> keyboard;\n\tstd::vector<ClickEntry> click;\n\tstd::vector<Display> display;\n\n\tstruct OpenWindow {\n\t\tuint64_t timestamp;\n\t\tchar name[OpenedApp::Max_Class_Name];\n\t};\n\tstd::vector<OpenWindow> open_windows;\n} event_queue_cache;\n\nvoid toggle_fullscren(HWND hwnd) {\n\tstatic WINDOWPLACEMENT g_wpPrev = { sizeof(g_wpPrev) };\n\n\tDWORD dwStyle = GetWindowLong(hwnd, GWL_STYLE);\n\tif (dwStyle & WS_OVERLAPPEDWINDOW) {\n\t\tMONITORINFO mi = { sizeof(mi) };\n\t\tif (\n\t\t\tGetWindowPlacement(hwnd, &g_wpPrev) &&\n\t\t\tGetMonitorInfo(MonitorFromWindow(hwnd, MONITOR_DEFAULTTOPRIMARY), &mi)\n\t\t\t) {\n\t\t\tSetWindowLong(hwnd, GWL_STYLE, dwStyle & ~WS_OVERLAPPEDWINDOW);\n\t\t\tSetWindowPos(\n\t\t\t\thwnd, HWND_TOP,\n\t\t\t\tmi.rcMonitor.left, mi.rcMonitor.top,\n\t\t\t\tmi.rcMonitor.right - mi.rcMonitor.left,\n\t\t\t\tmi.rcMonitor.bottom - mi.rcMonitor.top,\n\t\t\t\tSWP_NOOWNERZORDER | SWP_FRAMECHANGED\n\t\t\t);\n\t\t}\n\t}\n\telse {\n\t\tSetWindowLong(hwnd, GWL_STYLE, dwStyle | WS_OVERLAPPEDWINDOW);\n\t\tSetWindowPlacement(hwnd, &g_wpPrev);\n\t\tSetWindowPos(\n\t\t\thwnd,\n\t\t\tNULL,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\t0,\n\t\t\tSWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER | SWP_NOOWNERZORDER | SWP_FRAMECHANGED\n\t\t);\n\t}\n}\n\nLRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam) noexcept {\n\tswitch (msg)\n\t{\n\tcase WM_NOTIFY_MSG: {\n\t\tswitch (lParam) {\n\t\tcase WM_LBUTTONDBLCLK:\n\t\t\tif (!shared.visu_window) {\n\t\t\t\tstd::thread{ window_process }.detach();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSetForegroundWindow(shared.visu_window);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t} break;\n\tcase WM_SYSCOMMAND:\n\t\tif ((wParam & 0xfff0) == SC_KEYMENU) // Disable ALT application menu\n\t\t\treturn 0;\n\t\tbreak;\n\tcase WM_DESTROY:\n\tcase Quit_Request:\n\t\tPostQuitMessage(0);\n\t\treturn 0;\n\t}\n\treturn DefWindowProc(hWnd, msg, wParam, lParam);\n}\n\nstatic bool visu_windows_ended = false;\nLRESULT WINAPI WndProc_visu(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam) noexcept {\n\tif (ImGui_ImplWin32_WndProcHandler(hWnd, msg, wParam, lParam))\n\t\treturn true;\n\n\tswitch (msg)\n\t{\n\tcase WM_KEYDOWN: {\n\t\tif (wParam == VK_F11) toggle_fullscren(hWnd);\n\t\tbreak;\n\t}\n\tcase WM_SIZE:\n\t\treturn 0;\n\tcase WM_SYSCOMMAND:\n\t\tif ((wParam & 0xfff0) == SC_KEYMENU) // Disable ALT application menu\n\t\t\treturn 0;\n\t\tbreak;\n\tcase Quit_Request:\n\t\tif (shared.hook_window) {\n\t\t\tPostMessage(shared.hook_window, Quit_Request, NULL, NULL);\n\t\t}\n\tcase WM_DESTROY:\n\t\tvisu_windows_ended = true;\n\t\tPostQuitMessage(0);\n\t\treturn 0;\n\t}\n\treturn DefWindowProc(hWnd, msg, wParam, lParam);\n}\n\n#ifdef DEBUG_CONSOLE\nint main() {\n#else\nint __stdcall WinMain(HINSTANCE, HINSTANCE, LPSTR, int) {\n#endif\n\tauto time_start = get_milliseconds_epoch();\n\n\tstd::filesystem::create_directories(get_app_data_path());\n\t\n\tshared.settings.copy_system();\n\tshared.keyboard_state =\n\t\tKeyboardState::load_from_file(get_app_data_path() / Default_Keyboard_Path);\n\tshared.mouse_state =\n\t\tMouseState::load_from_file(get_app_data_path() / MouseState::Default_Path, true);\n\tshared.event_state =\n\t\tEventState::load_from_file(get_app_data_path() / EventState::Default_Path);\n\n\tdefer{\n\t\tif (shared.keyboard_state) {\n\t\t\t(void)shared.keyboard_state->save_to_file(get_app_data_path() / Default_Keyboard_Path);\n\t\t}\n\n\t\tif (shared.mouse_state){\n\t\t\t(void)shared.mouse_state->save_to_file(get_app_data_path() / MouseState::Default_Path);\n\t\t}\n\n\t\tif (shared.event_state){\n\t\t\tshared.event_state->close_all_apps();\n\t\t\t(void)shared.event_state->save_to_file(get_app_data_path() / EventState::Default_Path);\n\t\t}\n\t};\n\n\t// Create application window\n\tWNDCLASSEX wc = {\n\t\tsizeof(WNDCLASSEX),\n\t\tCS_CLASSDC,\n\t\tWndProc,\n\t\t0L,\n\t\t0L,\n\t\tGetModuleHandle(nullptr),\n\t\tnullptr,\n\t\tnullptr,\n\t\tnullptr,\n\t\tnullptr,\n\t\thook_class_name,\n\t\tnullptr\n\t};\n\n\twc.hIcon = LoadIcon(wc.hInstance, MAKEINTRESOURCE(IDI_ICON1));\n\twc.hIconSm = wc.hIcon;\n\n\tRegisterClassEx(&wc);\n\tdefer{ UnregisterClass(hook_class_name, wc.hInstance); };\n\tHWND hwnd = CreateWindow(\n\t\thook_class_name,\n\t\twindow_title,\n\t\tWS_OVERLAPPED,\n\t\t400,\n\t\t300,\n\t\t0,\n\t\t0,\n\t\tNULL,\n\t\tNULL,\n\t\twc.hInstance,\n\t\tNULL\n\t);\n\tshared.hook_window = hwnd;\n\n\t// so now we are after the creation of the koow window\n\t// but before its registration as a hook so it's the perfect time\n\t// to start the event_queue process.\n\tstd::thread{ event_queue_process }.detach();\n\n\tdefer{ DestroyWindow(hwnd); };\n\tdefer{ shared.hook_window = nullptr; };\n\n#if REGISTER_HOOKS\n#if REGISTER_KEYBOARD_HOOK\n\tSetWindowsHookEx(WH_KEYBOARD_LL, keyboard_hook, NULL, NULL);\n#endif\n#if REGISTER_MOUSE_HOOK\n\tSetWindowsHookEx(WH_MOUSE_LL, mouse_hook, NULL, NULL);\n#endif\n#if REGISTER_EVENT_HOOK\n\tSetWinEventHook(\n\t\tEVENT_SYSTEM_FOREGROUND,\n\t\tEVENT_SYSTEM_FOREGROUND,\n\t\tNULL,\n\t\tevent_hook,\n\t\t0,\n\t\t0,\n\t\tWINEVENT_OUTOFCONTEXT | WINEVENT_SKIPOWNPROCESS\n\t);\n#endif\n#endif\n\n\tNotifyIcon sys_tray_icon;\n\tsys_tray_icon.set_icon(wc.hIcon);\n\tsys_tray_icon.set_tooltip(\"You can open me\");\n\tsys_tray_icon.set_window(hwnd);\n\tsys_tray_icon.set_message(WM_NOTIFY_MSG);\n\tsys_tray_icon.add();\n\tsys_tray_icon.show();\n\tdefer{ sys_tray_icon.remove(); };\n\n\tLogEntry entry;\n\tentry.message = \"Started in: \" + std::to_string(get_milliseconds_epoch() - time_start) + \"ms.\";\n\tentry.tag.push_back(\"PERF\");\n\tlogs.lock_and_write(entry);\n\n#if START_WITH_VISU\n\tstd::thread{ window_process }.detach();\n#endif\n\n\tMSG msg{};\n\twhile (GetMessage(&msg, NULL, 0U, 0U)) {\n\t\tTranslateMessage(&msg);\n\t\tDispatchMessage(&msg);\n\t}\n\n\treturn 0;\n}\n\nvoid window_process() noexcept {\n\tLogWindow log_window;\n\tMouseWindow mou_window;\n\tSettingsWindow set_window;\n\tKeyboardWindow key_window;\n\tEventWindow eve_window;\n\tvisu_windows_ended = false;\n\t// Create application window\n\tWNDCLASSEX wc = {\n\t\tsizeof(WNDCLASSEX),\n\t\tCS_CLASSDC,\n\t\tWndProc_visu,\n\t\t0L,\n\t\t0L,\n\t\tGetModuleHandle(NULL),\n\t\tNULL,\n\t\tNULL,\n\t\tNULL,\n\t\tNULL,\n\t\tvisu_class_name,\n\t\tNULL\n\t};\n\twc.hIcon = LoadIcon(wc.hInstance, MAKEINTRESOURCE(IDI_ICON1));\n\twc.hIconSm = wc.hIcon;\n\n\tRegisterClassEx(&wc);\n\tHWND hwnd = CreateWindow(\n\t\tvisu_class_name,\n\t\twindow_title,\n\t\tWS_OVERLAPPEDWINDOW,\n\t\t100,\n\t\t75,\n\t\t1280,\n\t\t720,\n\t\tNULL,\n\t\tNULL,\n\t\twc.hInstance,\n\t\tNULL\n\t);\n\tshared.visu_window = hwnd;\n\n\tdefer{\n\t\tUnregisterClass(visu_class_name, wc.hInstance);\n\t\tDestroyWindow(hwnd);\n\t\tshared.visu_window = nullptr;\n\t};\n\n\n\tauto gl_context = *create_gl_context(hwnd);\n\tdefer{ destroy_gl_context(gl_context); };\n\n\t// Setup Dear ImGui context\n\tIMGUI_CHECKVERSION();\n\tImGui::CreateContext();\n\tImGuiIO& io = ImGui::GetIO(); (void)io;\n\tio.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;       // Enable Keyboard Controls\n\t//io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;      // Enable Gamepad Controls\n\tio.ConfigFlags |= ImGuiConfigFlags_DockingEnable;           // Enable Docking\n\tio.ConfigFlags |= ImGuiConfigFlags_ViewportsEnable;         // Enable Multi-Viewport / Platform Windows\n\t//io.ConfigViewportsNoAutoMerge = true;\n\t//io.ConfigViewportsNoTaskBarIcon = true;\n\n\t// Setup Dear ImGui style\n\tImGui::StyleColorsDark();\n\t//ImGui::StyleColorsClassic();\n\n\t// When viewports are enabled we tweak WindowRounding/WindowBg so platform windows can look identical to regular ones.\n\tImGuiStyle& style = ImGui::GetStyle();\n\tif (io.ConfigFlags & ImGuiConfigFlags_ViewportsEnable)\n\t{\n\t\tstyle.WindowRounding = 0.0f;\n\t\tstyle.Colors[ImGuiCol_WindowBg].w = 1.0f;\n\t}\n\n\t// Setup Platform/Renderer bindings\n\tImGui_ImplWin32_Init(hwnd);\n\tImGui_ImplOpenGL3_Init();\n\n\tauto dc_window = GetDC(hwnd);\n\tif (!dc_window) {\n\t\t// >TODO error handling\n\t\tprintf(\"%s\", get_last_error_message()->c_str());\n\t\treturn;\n\t}\n\t\n\tdefer{\n\t\tImGui_ImplOpenGL3_Shutdown();\n\t\tImGui_ImplWin32_Shutdown();\n\t\tImGui::DestroyContext();\n\t};\n\n\t// Main loop\n\tMSG msg = {};\n\tShowWindow(hwnd, SW_SHOWDEFAULT);\n\tUpdateWindow(hwnd);\n\n\tauto delta_clock = get_microseconds_epoch();\n\twhile (msg.message != WM_QUIT) {\n\t\tauto dt = (get_microseconds_epoch() - delta_clock) / 1'000'000.0;\n\t\tdelta_clock = get_microseconds_epoch();\n\n\t\tif (PeekMessage(&msg, NULL, 0U, 0U, PM_REMOVE)) {\n\t\t\tTranslateMessage(&msg);\n\t\t\tDispatchMessage(&msg);\n\t\t}\n\t\tif (visu_windows_ended) break;\n\t\t// Start the Dear ImGui frame\n\t\tImGui_ImplOpenGL3_NewFrame();\n\t\tImGui_ImplWin32_NewFrame();\n\t\tImGui::NewFrame();\n\n\t\tglClearColor(0.5f, 0.5f, 0.5f, 1.f);\n\t\tglClear(GL_COLOR_BUFFER_BIT);\n\n\t\tstatic ImGuiDockNodeFlags dockspace_flags = ImGuiDockNodeFlags_None;\n\n\t\t// We are using the ImGuiWindowFlags_NoDocking flag to make the parent window not dockable into,\n\t\t// because it would be confusing to have two docking targets within each others.\n\t\tImGuiWindowFlags window_flags = ImGuiWindowFlags_NoDocking;\n\t\tImGuiViewport* viewport = ImGui::GetMainViewport();\n\t\tImGui::SetNextWindowPos(viewport->GetWorkPos());\n\t\tImGui::SetNextWindowSize(viewport->GetWorkSize());\n\t\tImGui::SetNextWindowViewport(viewport->ID);\n\t\tImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);\n\t\tImGui::PushStyleVar(ImGuiStyleVar_WindowBorderSize, 0.0f);\n\t\twindow_flags |= ImGuiWindowFlags_NoDecoration | ImGuiWindowFlags_NoMove;\n\t\twindow_flags |= ImGuiWindowFlags_NoBringToFrontOnFocus | ImGuiWindowFlags_NoNavFocus;\n\n\t\t// When using ImGuiDockNodeFlags_PassthruCentralNode, DockSpace() will render our background\n\t\t// and handle the pass-thru hole, so we ask Begin() to not render a background.\n\t\tif (dockspace_flags & ImGuiDockNodeFlags_PassthruCentralNode)\n\t\t\twindow_flags |= ImGuiWindowFlags_NoBackground;\n\n\t\t// Important: note that we proceed even if Begin() returns false (aka window is collapsed).\n\t\t// This is because we want to keep our DockSpace() active. If a DockSpace() is inactive,\n\t\t// all active windows docked into it will lose their parent and become undocked.\n\t\t// We cannot preserve the docking relationship between an active window and an inactive docking, otherwise\n\t\t// any change of dockspace/settings would lead to windows being stuck in limbo and never being visible.\n\t\tImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0.0f, 0.0f));\n\t\tImGui::Begin(\"DockSpace Demo\", nullptr, window_flags);\n\t\tImGui::PopStyleVar();\n\t\tImGui::PopStyleVar(2);\n\t\t\n\t\tImGui::DockSpace(ImGui::GetID(\"dock\"));\n\n\t\tImGui::Begin(\"Debug\");\n\t\tImGui::Text(\"%f\", 1.f / (float)dt);\n\t\tImGui::End();\n\n\t\tkey_window.render(shared.keyboard_state);\n\t\tmou_window.render(shared.mouse_state);\n\t\teve_window.render(shared.event_state);\n\t\tset_window.render(shared.settings);\n\t\tlog_window.render(logs);\n\n\t\tif (ImGui::BeginPopup(\"Error Prompt\")) {\n\t\t\tdefer{ ImGui::EndPopup(); };\n\n\t\t\tImGui::Text(\"The last action ended with an error see the logs for more details.\");\n\t\t}\n\n\t\t// update\n\t\tif (set_window.show_log) {\n\t\t\tlog_window.open = true;\n\t\t\tset_window.show_log = false;\n\t\t}\n\t\tif (set_window.reset_keyboard_state && shared.keyboard_state) {\n\t\t\tstd::lock_guard guard{ shared.mut_keyboard_state };\n\t\t\tif (!shared.keyboard_state->reset_everything()) {\n\t\t\t\tImGui::OpenPopup(\"Error Prompt\");\n\t\t\t}\n\t\t\tset_window.reset_keyboard_state = false;\n\t\t}\n\t\tif (set_window.reset_mouse_state && shared.mouse_state) {\n\t\t\tstd::lock_guard guard{ shared.mut_mouse_state };\n\t\t\tif (!shared.mouse_state->reset_everything()) {\n\t\t\t\tImGui::OpenPopup(\"Error Prompt\");\n\t\t\t}\n\t\t\tset_window.reset_mouse_state = false;\n\t\t}\n\t\tif (set_window.quit) {\n\t\t\tPostMessage(shared.visu_window, Quit_Request, 0, 0);\n\t\t\t// set_window.quit = false. We don't reset it because a quit is authoritative.\n\t\t\t// we will spam messages until we quit.\n\t\t}\n\t\tif (set_window.install) {\n\n\t\t}\n\n\t\tif (key_window.reset) {\n\t\t\tauto t = std::lock_guard{ shared.mut_keyboard_state };\n\t\t\tif (!shared.keyboard_state) shared.keyboard_state = KeyboardState{};\n\t\t\tif (!shared.keyboard_state->reset_everything()) {\n\t\t\t\tImGui::OpenPopup(\"Error Prompt\");\n\t\t\t}\n\t\t\tkey_window.reset = false;\n\t\t}\n\t\tif (key_window.save) {\n\t\t\tauto full_path = get_app_data_path() / Default_Keyboard_Path;\n\t\t\tauto t = std::lock_guard{ shared.mut_keyboard_state };\n\t\t\tif (!shared.keyboard_state->save_to_file(full_path)) {\n\t\t\t\tImGui::OpenPopup(\"Error Prompt\");\n\t\t\t}\n\t\t\tkey_window.save = false;\n\t\t}\n\t\tif (key_window.reload) {\n\t\t\tauto full_path = get_app_data_path() / Default_Keyboard_Path;\n\t\t\tauto t = std::lock_guard{ shared.mut_keyboard_state };\n\t\t\tauto opt = KeyboardState::load_from_file(full_path);\n\t\t\tif (opt) shared.keyboard_state = *opt;\n\t\t\telse ImGui::OpenPopup(\"Error Prompt\");\n\t\t\tkey_window.reload = false;\n\t\t}\n\n\t\tif (mou_window.reset) {\n\t\t\tauto t = std::lock_guard{ shared.mut_mouse_state };\n\t\t\tif (!shared.mouse_state) shared.mouse_state = MouseState{};\n\t\t\tif (!shared.mouse_state->reset_everything()) {\n\t\t\t\tImGui::OpenPopup(\"Error Prompt\");\n\t\t\t}\n\t\t\tmou_window.reset = false;\n\t\t}\n\t\tif (mou_window.save) {\n\t\t\tauto full_path = get_app_data_path() / MouseState::Default_Path;\n\t\t\tauto t = std::lock_guard{ shared.mut_mouse_state };\n\t\t\tif (!shared.mouse_state->save_to_file(full_path)) {\n\t\t\t\tImGui::OpenPopup(\"Error Prompt\");\n\t\t\t}\n\t\t\tmou_window.save = false;\n\t\t}\n\t\tif (mou_window.reload) {\n\t\t\tauto full_path = get_app_data_path() / MouseState::Default_Path;\n\t\t\tauto t = std::lock_guard{ shared.mut_mouse_state };\n\t\t\tauto opt = MouseState::load_from_file(full_path, mou_window.strict);\n\t\t\tif (opt) shared.mouse_state = *opt;\n\t\t\telse ImGui::OpenPopup(\"Error Prompt\");\n\t\t\tmou_window.reload = false;\n\t\t}\n\n\n\t\tif (eve_window.reset) {\n\t\t\tauto t = std::lock_guard{ shared.mut_event_state };\n\t\t\tif (!shared.event_state) shared.event_state = EventState{};\n\t\t\tif (!shared.event_state->reset_everything()) {\n\t\t\t\tImGui::OpenPopup(\"Error Prompt\");\n\t\t\t}\n\t\t\teve_window.reset = false;\n\t\t}\n\t\tif (eve_window.save) {\n\t\t\tauto full_path = get_app_data_path() / EventState::Default_Path;\n\t\t\tauto t = std::lock_guard{ shared.mut_event_state };\n\t\t\tif (!shared.event_state->save_to_file(full_path)) {\n\t\t\t\tImGui::OpenPopup(\"Error Prompt\");\n\t\t\t}\n\t\t\teve_window.save = false;\n\t\t}\n\t\tif (eve_window.reload) {\n\t\t\tauto full_path = get_app_data_path() / EventState::Default_Path;\n\t\t\tauto t = std::lock_guard{ shared.mut_event_state };\n\t\t\tauto opt = EventState::load_from_file(full_path);\n\t\t\tif (opt) shared.event_state = *opt;\n\t\t\telse ImGui::OpenPopup(\"Error Prompt\");\n\t\t\teve_window.reload = false;\n\t\t}\n\n\t\tImGui::End();\n\t\t// Rendering\n\t\tImGui::Render();\n\t\tImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());\n\t\tSwapBuffers(dc_window);\n\t\t//using namespace std::chrono_literals;\n\t\t//std::this_thread::sleep_for(16ms);\n\t}\n}\n\nLRESULT CALLBACK keyboard_hook(int n_code, WPARAM w_param, LPARAM l_param) noexcept {\n\tthread_local std::vector<KeyEntry> key_entries_to_add;\n\n\tauto time_start = get_microseconds_epoch();\n\tdefer{\n\t\tauto time_end = get_microseconds_epoch();\n\t\tauto dt = time_end - time_start;\n\n\t\tif (dt > 500) {\n\t\t\tLogEntry entry;\n\t\t\tentry.message = \"Keyboard hook blocked for: \" + std::to_string(dt) + \"us.\";\n\t\t\tentry.tag.push_back(\"PERF\");\n\t\t\tlogs.lock_and_write(entry);\n\t\t}\n\t};\n\n\n\tif (n_code < 0) return CallNextHookEx(NULL, n_code, w_param, l_param);\n\n\tswitch (w_param) {\n\tcase WM_KEYUP:\n\tcase WM_SYSKEYUP: {\n\t\tauto& arg = *(KBDLLHOOKSTRUCT*)l_param;\n\t\tKeyEntry entry;\n\t\tentry.key_code = (uint8_t)arg.vkCode;\n\t\tentry.timestamp = get_seconds_epoch();\n\n\t\tkey_entries_to_add.push_back(entry);\n\t\tbreak;\n\t}\n\tdefault:\n\t\tbreak;\n\t}\n\n\tif (!key_entries_to_add.empty() && event_queue_cache.mutex.try_lock()) {\n\t\tdefer{\n\t\t\tevent_queue_cache.mutex.unlock();\n\t\t\tevent_queue_cache.wait_var.notify_all();\n\t\t};\n\n\t\tfor (auto& x : key_entries_to_add) event_queue_cache.keyboard.push_back(x);\n\t\tkey_entries_to_add.resize(0);\n\t}\n\n\treturn CallNextHookEx(NULL, n_code, w_param, l_param);\n}\n\nLRESULT CALLBACK mouse_hook(int n_code, WPARAM w_param, LPARAM l_param) noexcept {\n\tthread_local std::vector<ClickEntry> click_entries_to_add;\n\n\tauto time_start = get_microseconds_epoch();\n\tdefer{\n\t\tauto time_end = get_microseconds_epoch();\n\t\tauto dt = time_end - time_start;\n\n\t\tif (dt > 500) {\n\t\t\tLogEntry entry;\n\t\t\tentry.message = \"Mouse hook blocked for: \" + std::to_string(dt) + \"us.\";\n\t\t\tentry.tag.push_back(\"PERF\");\n\t\t\tlogs.lock_and_write(entry);\n\t\t}\n\t};\n\n\tif (n_code < 0) return CallNextHookEx(NULL, n_code, w_param, l_param);\n\n\n\tswitch (w_param) {\n\tcase WM_LBUTTONUP:\n\tcase WM_RBUTTONUP:\n\tcase WM_MBUTTONUP:\n\tcase WM_XBUTTONUP:\n\tcase WM_MOUSEWHEEL: {\n\t\tauto& arg = *(MSLLHOOKSTRUCT*)l_param;\n\t\tClickEntry click;\n\t\tclick.timestamp = get_seconds_epoch();\n\t\tswitch (w_param) {\n\t\tcase WM_LBUTTONUP:\n\t\t\tclick.button_code = (uint8_t)MouseState::ButtonMap::Left;\n\t\t\tbreak;\n\t\tcase WM_RBUTTONUP:\n\t\t\tclick.button_code = (uint8_t)MouseState::ButtonMap::Right;\n\t\t\tbreak;\n\t\tcase WM_MOUSEWHEEL:\n\t\t\tif ((short)(arg.mouseData >> (8 * sizeof(WORD))) > 0) {\n\t\t\t\tclick.button_code = (uint8_t)MouseState::ButtonMap::Wheel_Up;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tclick.button_code = (uint8_t)MouseState::ButtonMap::Wheel_Down;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase WM_MBUTTONUP:\n\t\t\tclick.button_code = (uint8_t)MouseState::ButtonMap::Wheel;\n\t\t\tbreak;\n\t\tcase WM_XBUTTONUP:\n\t\t\tif ((arg.mouseData >> (8 * sizeof(WORD))) == XBUTTON1) {\n\t\t\t\tclick.button_code = (uint8_t)MouseState::ButtonMap::Mouse_3;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tclick.button_code = (uint8_t)MouseState::ButtonMap::Mouse_4;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\t\tclick.x = arg.pt.x;\n\t\tclick.y = arg.pt.y;\n\t\tclick_entries_to_add.push_back(click);\n\n\t\tbreak;\n\t}\n\tdefault:\n\t\tbreak;\n\t}\n\n\tif (!click_entries_to_add.empty() && event_queue_cache.mutex.try_lock()) {\n\t\tdefer{\n\t\t\tevent_queue_cache.mutex.unlock();\n\t\t\tevent_queue_cache.wait_var.notify_all();\n\t\t};\n\n\t\tfor (auto& x : click_entries_to_add) event_queue_cache.click.push_back(x);\n\n\t\tclick_entries_to_add.resize(0);\n\t}\n\n\treturn CallNextHookEx(NULL, n_code, w_param, l_param);\n}\n\nstruct Params {\n\tstd::vector<EventQueueCache::OpenWindow>* open_windows;\n};\n\nBOOL CALLBACK enum_windows(HWND handle, LPARAM ptr) {\n\tParams* params = (Params*)ptr;\n\tauto dc = GetWindowDC(handle);\n\tdefer { ReleaseDC(handle, dc); };\n\n\tRECT r;\n\tif (GetClipBox(dc, &r) == NULLREGION) return TRUE;\n\n\tWCHAR wide_buffer[MAX_PATH] = {};\n\tGetWindowTextW(handle, wide_buffer, MAX_PATH);\n\n\tauto size = WideCharToMultiByte(CP_UTF8, 0, wide_buffer, -1, nullptr, 0, NULL, NULL);\n\tif (size == 1) return TRUE; // If after that we don't know the name then there is no\n\t\t\t\t\t\t\t\t\t\t // point to continue.\n\n\n\tEventQueueCache::OpenWindow x;\n\tmemset(x.name, 0, sizeof(x.name));\n\tWideCharToMultiByte(CP_UTF8, 0, wide_buffer, -1, x.name, sizeof(x.name), NULL, NULL);\n\tx.timestamp = get_seconds_epoch();\n\tparams->open_windows->push_back(x);\n\n\treturn TRUE;\n}\n\nvoid CALLBACK event_hook(\n\tHWINEVENTHOOK /*handle_hook*/,\n\tDWORD /*event*/,\n\tHWND /*handle_window*/,\n\tLONG object,\n\tLONG /*child*/,\n\tDWORD /*event_thread*/,\n\tDWORD /*event_time*/\n) noexcept {\n\tif (object != OBJID_WINDOW) return;\n\n\n\tthread_local std::vector<EventQueueCache::OpenWindow> open_windows;\n\tParams params;\n\tparams.open_windows = &open_windows;\n\n\tEnumWindows(enum_windows, (LPARAM)&params);\n\n\tif (!open_windows.empty() && event_queue_cache.mutex.try_lock()) {\n\t\tdefer {\n\t\t\tevent_queue_cache.mutex.unlock();\n\t\t\tevent_queue_cache.wait_var.notify_all();\n\t\t};\n\t\t\n\t\tfor (auto& x : open_windows) event_queue_cache.open_windows.push_back(x);\n\n\t\topen_windows.clear();\n\t}\n}\n\nClickEntry transform_click_to_canonical(ClickEntry x) noexcept;\nvoid update_displays_from_click(MouseState& state, ClickEntry x) noexcept;\n\nvoid event_queue_process() noexcept {\n\twhile (shared.hook_window != nullptr) {\n\t\tstd::unique_lock lk{ event_queue_cache.mutex };\n\t\tevent_queue_cache.wait_var.wait(lk, [] {\n\t\t\treturn\n\t\t\t\t!event_queue_cache.click.empty() ||\n\t\t\t\t!event_queue_cache.display.empty() ||\n\t\t\t\t!event_queue_cache.keyboard.empty() ||\n\t\t\t\t!event_queue_cache.open_windows.empty();\n\t\t});\n\t\tevent_queue_cache.event_received = false;\n\n\t\tif (\n\t\t\tshared.mouse_state &&\n\t\t\t(!event_queue_cache.click.empty() || !event_queue_cache.display.empty())&&\n\t\t\t// Maybe we should be more aggresive and do a lock here instead ?\n\t\t\tshared.mut_mouse_state.try_lock()\n\t\t) {\n\t\t\tdefer{ shared.mut_mouse_state.unlock(); };\n\n\t\t\tfor (auto& x : event_queue_cache.click) {\n\t\t\t\tupdate_displays_from_click(*shared.mouse_state, x);\n\t\t\t\tshared.mouse_state->increment_button(transform_click_to_canonical(x));\n\t\t\t}\n\t\t\tevent_queue_cache.click.clear();\n\t\t\tevent_queue_cache.display.clear();\n\t\t}\n\n\t\tif (\n\t\t\tshared.keyboard_state &&\n\t\t\t!event_queue_cache.keyboard.empty() &&\n\t\t\tshared.mut_keyboard_state.try_lock()\n\t\t) {\n\t\t\tdefer{ shared.mut_keyboard_state.unlock(); };\n\t\t\t\t\n\t\t\tfor (auto x : event_queue_cache.keyboard) shared.keyboard_state->increment_key(x);\n\t\t\tevent_queue_cache.keyboard.clear();\n\t\t}\n\t\t\n\t\tif (\n\t\t\tshared.event_state &&\n\t\t\t!event_queue_cache.open_windows.empty() &&\n\t\t\tshared.mut_event_state.try_lock()\n\t\t) {\n\t\t\tdefer{ shared.mut_event_state.unlock(); };\n\n\t\t\tstd::set<std::string> searching_windows;\n\t\t\tfor (auto& x : event_queue_cache.open_windows) {\n\t\t\t\tstd::string n(x.name, strnlen(x.name, sizeof(x.name)));\n\t\t\t\tsearching_windows.insert(n);\n\t\t\t}\n\n\t\t\t// So right nows i get the list of every open windows every time i switched focus\n\t\t\t// so i need to figure out an efficient way to update timestamp_end if a previous\n\t\t\t// open apps is not present in this batch of OpenWindows.\n\n\t\t\tauto& state = *shared.event_state;\n\t\t\tfor (size_t i = state.currently_opened_idx.size() - 1; i + 1 > 0; --i) {\n\t\t\t\tauto& x = state.opened_apps[state.currently_opened_idx[i]];\n\t\t\t\tstd::string n(x.class_name, strnlen(x.class_name, sizeof(x.class_name)));\n\t\t\t\tif (searching_windows.count(n) == 0) {\n\t\t\t\t\tx.timestamp_end = get_seconds_epoch();\n\t\t\t\t}\n\t\t\t\tstate.currently_opened_idx.erase(BEG(state.currently_opened_idx) + i);\n\t\t\t}\n\t\t\t\n\t\t\tfor (auto& x : event_queue_cache.open_windows) {\n\t\t\t\tOpenedApp n;\n\t\t\t\tmemcpy(n.class_name, x.name, OpenedApp::Max_Class_Name);\n\t\t\t\tn.timestamp_start = x.timestamp;\n\t\t\t\tn.timestamp_end = UINT64_MAX;\n\n\t\t\t\tbool found = false;\n\t\t\t\tfor (auto i : state.currently_opened_idx) {\n\t\t\t\t\tauto& y = state.opened_apps[i];\n\t\t\t\t\tif (memcmp(y.class_name, n.class_name, OpenedApp::Max_Class_Name)) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!found) {\n\t\t\t\t\tstate.currently_opened_idx.push_back(state.opened_apps.size());\n\t\t\t\t\tstate.opened_apps.push_back(n);\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tevent_queue_cache.open_windows.clear();\n\t\t}\n\t}\n}\n\nClickEntry transform_click_to_canonical(ClickEntry x) noexcept {\n\tauto screens = get_all_screens();\n\n\tx.x += screens.main_x;\n\tx.y += screens.main_y;\n\treturn x;\n}\n\nvoid update_displays_from_click(MouseState& state, ClickEntry x) noexcept {\n#undef max\n\tconstexpr auto MAX = std::numeric_limits<decltype(Display::timestamp_end)>::max();\n\n\tauto screen_is_display = [](Screen s, Display d) {\n\t\treturn\n\t\t\t(memcmp(s.unique_hash_char, d.unique_hash_char, Display::Unique_Hash_Size) == 0) &&\n\t\t\ts.x == d.x && s.y == d.y && s.width == d.width && s.height == d.height;\n\t};\n\n\tauto screens = get_all_screens();\n\n\tstd::unordered_set<Screen> screens_found;\n\tfor (auto& d : state.display_entries) {\n\t\t// We are intersted only in the displays that are alive.\n\t\tif (d.timestamp_end != MAX) continue;\n\n\t\tbool found = false;\n\t\tfor (auto& y : screens.screens) {\n\t\t\tif (screen_is_display(y, d)) {\n\t\t\t\tfound = true;\n\t\t\t\tscreens_found.insert(y);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If we can't find the registered display d in the actual screen set 'screens'\n\t\t// Then that mean that d has been disconnected and we should terminate it\n\t\t// taking x.timestamp as it's death time.\n\t\tif (!found) {\n\t\t\td.timestamp_end = x.timestamp;\n\t\t}\n\t}\n\n\t// Now the screens in 'screens.screens' that are _not_ in (screens_found'\n\t// are screens that we see for the first time ever ! So we simply register them.\n\tfor (auto& s : screens.screens) {\n\t\tif (screens_found.count(s) > 0) continue;\n\n\t\tDisplay d;\n\t\td.x = s.x;\n\t\td.y = s.y;\n\t\tmemcpy_s(\n\t\t\t&d.unique_hash_char,\n\t\t\tDisplay::Unique_Hash_Size,\n\t\t\t&s.unique_hash_char,\n\t\t\tDisplay::Unique_Hash_Size\n\t\t);\n\t\tmemset(d.custom_name, 0, Display::Custom_Name_Size);\n\t\td.width = s.width;\n\t\td.height = s.height;\n\t\td.timestamp_start = x.timestamp;\n\t\td.timestamp_end = MAX;\n\n\t\tstate.display_entries.push_back(d);\n\t}\n}\n\n#define PROFILER_BEGIN_SEQ(x)\n#define PROFILER_END_SEQ()\n#define PROFILER_SEQ(x)\n\nstd::optional<HGLRC> create_gl_context(HWND handle_window) noexcept {\n\tPROFILER_BEGIN_SEQ(\"DC\");\n\tauto dc = GetDC(handle_window);\n\tif (!dc) {\n\t\t// >TODO error handling\n\t\tprintf(\"%s\", get_last_error_message()->c_str());\n\t\treturn std::nullopt;\n\t}\n\tdefer{ ReleaseDC(handle_window, dc); };\n\n\tPROFILER_SEQ(\"Pixel\");\n\tPIXELFORMATDESCRIPTOR pixel_format{};\n\tpixel_format.nSize = sizeof(PIXELFORMATDESCRIPTOR);\n\tpixel_format.nVersion = 1;\n\tpixel_format.dwFlags = PFD_SUPPORT_OPENGL | PFD_DRAW_TO_WINDOW | PFD_DOUBLEBUFFER;\n\tpixel_format.cColorBits = 32;\n\tpixel_format.cAlphaBits = 8;\n\tpixel_format.iLayerType = PFD_MAIN_PLANE;\n\n\tPROFILER_BEGIN_SEQ(\"choose\");\n\tauto suggested_pixel_format = ChoosePixelFormat(dc, &pixel_format);\n\tif (!suggested_pixel_format) {\n\t\t// >TODO error handling\n\t\tprintf(\"%s\", get_last_error_message()->c_str());\n\t\treturn std::nullopt;\n\t}\n\tPROFILER_SEQ(\"describe\");\n\tauto result = DescribePixelFormat(\n\t\tdc, suggested_pixel_format, sizeof(PIXELFORMATDESCRIPTOR), &pixel_format\n\t);\n\tif (!result) {\n\t\t// >TODO error handling\n\t\tprintf(\"%s\", get_last_error_message()->c_str());\n\t\treturn std::nullopt;\n\t}\n\n\tPROFILER_SEQ(\"set\");\n\tif (!SetPixelFormat(dc, suggested_pixel_format, &pixel_format)) {\n\t\t// >TODO error handling\n\t\tprintf(\"%s\", get_last_error_message()->c_str());\n\t\treturn std::nullopt;\n\t}\n\tPROFILER_END_SEQ();\n\n\tPROFILER_SEQ(\"first context\");\n\tauto gl_context = wglCreateContext(dc);\n\tif (!gl_context) {\n\t\t// >TODO error handling\n\t\tprintf(\"%s\", get_last_error_message()->c_str());\n\t\treturn std::nullopt;\n\t}\n\n\tif (!wglMakeCurrent(dc, gl_context)) {\n\t\twglDeleteContext(gl_context);\n\n\t\tprintf(\"%s\", get_last_error_message()->c_str());\n\t\treturn std::nullopt;\n\t}\n\n\tPROFILER_SEQ(\"glew\");\n\tglewExperimental = true; // Needed for core profile\n\tif (glewInit() != GLEW_OK) {\n\t\tprintf(\"Can't init glew\\n\");\n\t\treturn gl_context;\n\t}\n\n\tstatic int attribs[] = {\n\t#ifndef NDEBUG\n\t\tWGL_CONTEXT_FLAGS_ARB, WGL_CONTEXT_DEBUG_BIT_ARB,\n\t#endif\n\t\t0\n\t};\n\n\tPROFILER_SEQ(\"second context\");\n\tauto gl = wglCreateContextAttribsARB(dc, nullptr, attribs);\n\tif (!gl) {\n\t\tauto err = glGetError();\n\t\tprintf(\"%s\", std::to_string(err).c_str());\n\n\t\treturn gl_context;\n\t}\n\n\tif (!wglMakeCurrent(dc, gl)) {\n\t\twglDeleteContext(gl);\n\t\treturn gl_context;\n\t}\n\n\n\tPROFILER_SEQ(\"destroy\");\n\twglDeleteContext(gl_context);\n\tPROFILER_END_SEQ();\n\treturn (HGLRC)gl;\n}\nvoid destroy_gl_context(HGLRC gl_context) noexcept {\n\t// >TODO error handling\n\tprintf(\"deleting... \");\n\tif (!wglDeleteContext(gl_context)) {\n\t\tprintf(\"%s\", get_last_error_message()->c_str());\n\t}\n}\n\nstd::optional<std::string> get_last_error_message() noexcept {\n\tDWORD errorMessageID = ::GetLastError();\n\tif (errorMessageID == 0)\n\t\treturn std::nullopt; //No error message has been recorded\n\n\tLPSTR messageBuffer = nullptr;\n\tauto flags = FORMAT_MESSAGE_ALLOCATE_BUFFER;\n\tflags |= FORMAT_MESSAGE_FROM_SYSTEM;\n\tflags |= FORMAT_MESSAGE_IGNORE_INSERTS;\n\tsize_t size = FormatMessageA(\n\t\tflags, nullptr, errorMessageID, 0, (LPSTR)&messageBuffer, 0, nullptr\n\t);\n\n\tstd::string message(messageBuffer, size);\n\n\tLocalFree(messageBuffer);\n\treturn message;\n}\n",
			"file": "Main.cpp",
			"file_size": 31340,
			"file_write_time": 132391534015922920,
			"settings":
			{
				"buffer_size": 30268,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Tackwin/Documents/Code/sans-peine/Simulation/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 1551,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 128 files for \"set_tooltip\"\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\Main.cpp:\n  300  \tNotifyIcon sys_tray_icon;\n  301  \tsys_tray_icon.set_icon(wc.hIcon);\n  302: \tsys_tray_icon.set_tooltip(\"You can open me\");\n  303  \tsys_tray_icon.set_window(hwnd);\n  304  \tsys_tray_icon.set_message(WM_NOTIFY_MSG);\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\NotifyIcon.cpp:\n   35  \tset_window(window);\n   36  \tset_icon(ico);\n   37: \tset_tooltip(tip);\n   38  \tset_message(msg);\n   39  \tadd();\n   ..\n   52  }\n   53  \n   54: void NotifyIcon::set_tooltip(const std::string& tip) noexcept {\n   55  \tconstexpr auto MAX_LENGTH_TIP = 128;\n   56  \tassert(tip.size() < MAX_LENGTH_TIP);\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\NotifyIcon.hpp:\n   11  \tvoid set_window(HWND window) noexcept;\n   12  \tvoid set_icon(HICON ico) noexcept;\n   13: \tvoid set_tooltip(const std::string& tip) noexcept;\n   14  \tvoid set_message(size_t msg) noexcept;\n   15  \tvoid remove() noexcept;\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\Main.cpp:\n  300  \tNotifyIcon sys_tray_icon;\n  301  \tsys_tray_icon.set_icon(wc.hIcon);\n  302: \tsys_tray_icon.set_tooltip(\"You can open me\");\n  303  \tsys_tray_icon.set_window(hwnd);\n  304  \tsys_tray_icon.set_message(WM_NOTIFY_MSG);\n\n5 matches across 4 files\n\n\nSearching 149 files for \"printf\"\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\Release\\CMakeFiles\\3.18.1\\CMakeDetermineCompilerABI_CXX.bin:\n    <binary>\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\cbt_hook.cpp:\n   33  \t\t\t\tGetModuleFileNameA(NULL, big_buffer, sizeof(big_buffer));\n   34  \n   35: \t\t\t\tsprintf(\n   36  \t\t\t\t\tbuffer,\n   37  \t\t\t\t\t\"Sending Event %s from %s to %zu mail (%s) with %zu msg\\n\",\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\Event.cpp:\n  236  \tfor (auto& [name, time] : state->cache.apps_time_usage) {\n  237  \t\tchar buffer[128] = {0};\n  238: \t\tstd::snprintf(buffer, 128, \"%-32s : % 10llu seconds\", name.data(), time);\n  239  \t\tImGui::Selectable(buffer);\n  240  \t}\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\File_Win.cpp:\n  104  \tauto err = fopen_s(&f, path.generic_string().c_str(), \"wb+\");\n  105  \tif (!f || err) {\n  106: \t\tprintf(\"Error: %d\\n\", err);\n  107  \t\treturn err;\n  108  \t}\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui.cpp:\n  723  // System includes\n  724  #include <ctype.h>      // toupper\n  725: #include <stdio.h>      // vsnprintf, sscanf, printf\n  726  #if defined(_MSC_VER) && _MSC_VER <= 1500 // MSVC 2008 or earlier\n  727  #include <stddef.h>     // intptr_t\n  ...\n  760  #ifdef _MSC_VER\n  761  #pragma warning (disable: 4127)             // condition expression is constant\n  762: #pragma warning (disable: 4996)             // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen\n  763  #if defined(_MSC_VER) && _MSC_VER >= 1922   // MSVC 2019 16.2 or later\n  764  #pragma warning (disable: 5054)             // operator '|': deprecated between enumerations of different types\n  ...\n  781  #pragma clang diagnostic ignored \"-Wint-to-void-pointer-cast\"       // warning: cast to 'void *' from smaller integer type 'int'\n  782  #pragma clang diagnostic ignored \"-Wzero-as-null-pointer-constant\"  // warning: zero as null pointer constant                    // some standard header variations use #define NULL 0\n  783: #pragma clang diagnostic ignored \"-Wdouble-promotion\"               // warning: implicit conversion from 'float' to 'double' when passing argument to function  // using printf() is a misery with this as C++ va_arg ellipsis changes float to double.\n  784  #pragma clang diagnostic ignored \"-Wimplicit-int-float-conversion\"  // warning: implicit conversion from 'xxx' to 'float' may lose precision\n  785  #elif defined(__GNUC__)\n  ...\n 1368  \n 1369  // A) MSVC version appears to return -1 on overflow, whereas glibc appears to return total count (which may be >= buf_size).\n 1370: // Ideally we would test for only one of those limits at runtime depending on the behavior the vsnprintf(), but trying to deduct it at compile time sounds like a pandora can of worm.\n 1371: // B) When buf==NULL vsnprintf() will return the output size.\n 1372  #ifndef IMGUI_DISABLE_DEFAULT_FORMAT_FUNCTIONS\n 1373  \n 1374: // We support stb_sprintf which is much faster (see: https://github.com/nothings/stb/blob/master/stb_sprintf.h)\n 1375: // You may set IMGUI_USE_STB_SPRINTF to use our default wrapper, or set IMGUI_DISABLE_DEFAULT_FORMAT_FUNCTIONS\n 1376  // and setup the wrapper yourself. (FIXME-OPT: Some of our high-level operations such as ImGuiTextBuffer::appendfv() are\n 1377: // designed using two-passes worst case, which probably could be improved using the stbsp_vsprintfcb() function.)\n 1378: #ifdef IMGUI_USE_STB_SPRINTF\n 1379: #define STB_SPRINTF_IMPLEMENTATION\n 1380: #include \"stb_sprintf.h\"\n 1381  #endif\n 1382  \n 1383: #if defined(_MSC_VER) && !defined(vsnprintf)\n 1384: #define vsnprintf _vsnprintf\n 1385  #endif\n 1386  \n ....\n 1389      va_list args;\n 1390      va_start(args, fmt);\n 1391: #ifdef IMGUI_USE_STB_SPRINTF\n 1392:     int w = stbsp_vsnprintf(buf, (int)buf_size, fmt, args);\n 1393  #else\n 1394:     int w = vsnprintf(buf, buf_size, fmt, args);\n 1395  #endif\n 1396      va_end(args);\n ....\n 1405  int ImFormatStringV(char* buf, size_t buf_size, const char* fmt, va_list args)\n 1406  {\n 1407: #ifdef IMGUI_USE_STB_SPRINTF\n 1408:     int w = stbsp_vsnprintf(buf, (int)buf_size, fmt, args);\n 1409  #else\n 1410:     int w = vsnprintf(buf, buf_size, fmt, args);\n 1411  #endif\n 1412      if (buf == NULL)\n ....\n 2083  //-----------------------------------------------------------------------------\n 2084  \n 2085: // On some platform vsnprintf() takes va_list by reference and modifies it.\n 2086  // va_copy is the 'correct' way to copy a va_list but Visual Studio prior to 2013 doesn't have it.\n 2087  #ifndef va_copy\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui.h:\n   82  #define IM_ASSERT(_EXPR)            assert(_EXPR)                               // You can override the default assert handler by editing imconfig.h\n   83  #endif\n   84: #if !defined(IMGUI_USE_STB_SPRINTF) && (defined(__clang__) || defined(__GNUC__))\n   85: #define IM_FMTARGS(FMT)             __attribute__((format(printf, FMT, FMT+1))) // To apply printf-style warnings to our functions.\n   86: #define IM_FMTLIST(FMT)             __attribute__((format(printf, FMT, 0)))\n   87  #else\n   88  #define IM_FMTARGS(FMT)\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui_draw.cpp:\n   35  #include \"imgui_internal.h\"\n   36  \n   37: #include <stdio.h>      // vsnprintf, sscanf, printf\n   38  #if !defined(alloca)\n   39  #if defined(__GLIBC__) || defined(__sun) || defined(__APPLE__) || defined(__NEWLIB__)\n   ..\n   53  #pragma warning (disable: 4127) // condition expression is constant\n   54  #pragma warning (disable: 4505) // unreferenced local function has been removed (stb stuff)\n   55: #pragma warning (disable: 4996) // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen\n   56  #endif\n   57  \n   ..\n   69  #pragma clang diagnostic ignored \"-Wcomma\"                          // warning: possible misuse of comma operator here\n   70  #pragma clang diagnostic ignored \"-Wreserved-id-macro\"              // warning: macro name is a reserved identifier\n   71: #pragma clang diagnostic ignored \"-Wdouble-promotion\"               // warning: implicit conversion from 'float' to 'double' when passing argument to function  // using printf() is a misery with this as C++ va_arg ellipsis changes float to double.\n   72  #pragma clang diagnostic ignored \"-Wimplicit-int-float-conversion\"  // warning: implicit conversion from 'xxx' to 'float' may lose precision\n   73  #elif defined(__GNUC__)\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui_impl_dx9.cpp:\n   21  //#define IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS         // [Win32] Don't implement default IME handler. Won't use and link with ImmGetContext/ImmSetCompositionWindow.\n   22  //#define IMGUI_DISABLE_WIN32_FUNCTIONS                     // [Win32] Won't use and link with any Win32 function.\n   23: //#define IMGUI_DISABLE_FORMAT_STRING_FUNCTIONS             // Don't implement ImFormatString/ImFormatStringV so you can implement them yourself if you don't want to link with vsnprintf.\n   24  //#define IMGUI_DISABLE_MATH_FUNCTIONS                      // Don't implement ImFabs/ImSqrt/ImPow/ImFmod/ImCos/ImSin/ImAcos/ImAtan2 wrapper so you can implement them yourself. Declare your prototypes in imconfig.h.\n   25  //#define IMGUI_DISABLE_DEFAULT_ALLOCATORS                  // Don't implement default allocators calling malloc()/free() to avoid linking with them. You will need to call ImGui::SetAllocatorFunctions().\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui_impl_opengl3.cpp:\n  466      glGetShaderiv(handle, GL_INFO_LOG_LENGTH, &log_length);\n  467      if ((GLboolean)status == GL_FALSE)\n  468:         fprintf(stderr, \"ERROR: ImGui_ImplOpenGL3_CreateDeviceObjects: failed to compile %s!\\n\", desc);\n  469      if (log_length > 1)\n  470      {\n  ...\n  472          buf.resize((int)(log_length + 1));\n  473          glGetShaderInfoLog(handle, log_length, NULL, (GLchar*)buf.begin());\n  474:         fprintf(stderr, \"%s\\n\", buf.begin());\n  475      }\n  476      return (GLboolean)status == GL_TRUE;\n  ...\n  484      glGetProgramiv(handle, GL_INFO_LOG_LENGTH, &log_length);\n  485      if ((GLboolean)status == GL_FALSE)\n  486:         fprintf(stderr, \"ERROR: ImGui_ImplOpenGL3_CreateDeviceObjects: failed to link %s! (with GLSL '%s')\\n\", desc, g_GlslVersionString);\n  487      if (log_length > 1)\n  488      {\n  ...\n  490          buf.resize((int)(log_length + 1));\n  491          glGetProgramInfoLog(handle, log_length, NULL, (GLchar*)buf.begin());\n  492:         fprintf(stderr, \"%s\\n\", buf.begin());\n  493      }\n  494      return (GLboolean)status == GL_TRUE;\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui_impl_win32.cpp:\n   12  //#define IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS         // [Win32] Don't implement default IME handler. Won't use and link with ImmGetContext/ImmSetCompositionWindow.\n   13  //#define IMGUI_DISABLE_WIN32_FUNCTIONS                     // [Win32] Won't use and link with any Win32 function.\n   14: //#define IMGUI_DISABLE_FORMAT_STRING_FUNCTIONS             // Don't implement ImFormatString/ImFormatStringV so you can implement them yourself if you don't want to link with vsnprintf.\n   15  //#define IMGUI_DISABLE_MATH_FUNCTIONS                      // Don't implement ImFabs/ImSqrt/ImPow/ImFmod/ImCos/ImSin/ImAcos/ImAtan2 wrapper so you can implement them yourself. Declare your prototypes in imconfig.h.\n   16  //#define IMGUI_DISABLE_DEFAULT_ALLOCATORS                  // Don't implement default allocators calling malloc()/free() to avoid linking with them. You will need to call ImGui::SetAllocatorFunctions().\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui_internal.h:\n  169  // Debug Logging\n  170  #ifndef IMGUI_DEBUG_LOG\n  171: #define IMGUI_DEBUG_LOG(_FMT,...)       printf(\"[%05d] \" _FMT, GImGui->FrameCount, __VA_ARGS__)\n  172  #endif\n  173  \n  ...\n  805  {\n  806      size_t      Size;           // Size in byte\n  807:     const char* PrintFmt;       // Default printf format for the type\n  808      const char* ScanFmt;        // Default scanf format for the type\n  809  };\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui_widgets.cpp:\n   51  #ifdef _MSC_VER\n   52  #pragma warning (disable: 4127)     // condition expression is constant\n   53: #pragma warning (disable: 4996)     // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen\n   54  #if defined(_MSC_VER) && _MSC_VER >= 1922 // MSVC 2019 16.2 or later\n   55  #pragma warning (disable: 5054)     // operator '|': deprecated between enumerations of different types\n   ..\n   68  #pragma clang diagnostic ignored \"-Wsign-conversion\"                // warning: implicit conversion changes signedness\n   69  #pragma clang diagnostic ignored \"-Wzero-as-null-pointer-constant\"  // warning: zero as null pointer constant                    // some standard header variations use #define NULL 0\n   70: #pragma clang diagnostic ignored \"-Wdouble-promotion\"               // warning: implicit conversion from 'float' to 'double' when passing argument to function  // using printf() is a misery with this as C++ va_arg ellipsis changes float to double.\n   71  #pragma clang diagnostic ignored \"-Wenum-enum-conversion\"           // warning: bitwise operation between different enumeration types ('XXXFlags_' and 'XXXFlagsPrivate_')\n   72  #pragma clang diagnostic ignored \"-Wdeprecated-enum-enum-conversion\"// warning: bitwise operation between different enumeration types ('XXXFlags_' and 'XXXFlagsPrivate_') is deprecated\n   ..\n 1718          return \"%d\";\n 1719      const char* fmt_start = ImParseFormatFindStart(fmt);    // Find % (if any, and ignore %%)\n 1720:     const char* fmt_end = ImParseFormatFindEnd(fmt_start);  // Find end of format specifier, which itself is an exercise of confidence/recklessness (because snprintf is dependent on libc or user).\n 1721      if (fmt_end > fmt_start&& fmt_end[-1] == 'f')\n 1722      {\n ....\n 1876      else if (data_type == ImGuiDataType_Double)\n 1877      {\n 1878:         format = \"%lf\"; // scanf differentiate float/double unlike printf which forces everything to double because of ellipsis\n 1879          double* v = (double*)p_data;\n 1880          double arg0f = *v, arg1f = 0.0;\n ....\n 2165      // Default format string when passing NULL\n 2166      if (format == NULL)\n 2167:         format = DataTypeGetInfo(data_type)->PrintFmt;\n 2168      else if (data_type == ImGuiDataType_S32 && strcmp(format, \"%d\") != 0) // (FIXME-LEGACY: Patch old \"%.0f\" format string to use \"%d\", read function more details.)\n 2169          format = PatchFormatStringFloatToInt(format);\n ....\n 2619      // Default format string when passing NULL\n 2620      if (format == NULL)\n 2621:         format = DataTypeGetInfo(data_type)->PrintFmt;\n 2622      else if (data_type == ImGuiDataType_S32 && strcmp(format, \"%d\") != 0) // (FIXME-LEGACY: Patch old \"%.0f\" format string to use \"%d\", read function more details.)\n 2623          format = PatchFormatStringFloatToInt(format);\n ....\n 2782      // Default format string when passing NULL\n 2783      if (format == NULL)\n 2784:         format = DataTypeGetInfo(data_type)->PrintFmt;\n 2785      else if (data_type == ImGuiDataType_S32 && strcmp(format, \"%d\") != 0) // (FIXME-LEGACY: Patch old \"%.0f\" format string to use \"%d\", read function more details.)\n 2786          format = PatchFormatStringFloatToInt(format);\n ....\n 2868  const char* ImParseFormatFindEnd(const char* fmt)\n 2869  {\n 2870:     // Printf/scanf types modifiers: I/L/h/j/l/t/w/z. Other uppercase letters qualify as types aka end of the format.\n 2871      if (fmt[0] != '%')\n 2872          return fmt;\n ....\n 3005  \n 3006      if (format == NULL)\n 3007:         format = DataTypeGetInfo(data_type)->PrintFmt;\n 3008  \n 3009      char buf[64];\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\Main.cpp:\n    9  //#define IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS         // [Win32] Don't implement default IME handler. Won't use and link with ImmGetContext/ImmSetCompositionWindow.\n   10  //#define IMGUI_DISABLE_WIN32_FUNCTIONS                     // [Win32] Won't use and link with any Win32 function.\n   11: //#define IMGUI_DISABLE_FORMAT_STRING_FUNCTIONS             // Don't implement ImFormatString/ImFormatStringV so you can implement them yourself if you don't want to link with vsnprintf.\n   12  //#define IMGUI_DISABLE_MATH_FUNCTIONS                      // Don't implement ImFabs/ImSqrt/ImPow/ImFmod/ImCos/ImSin/ImAcos/ImAtan2 wrapper so you can implement them yourself. Declare your prototypes in imconfig.h.\n   13  //#define IMGUI_DISABLE_DEFAULT_ALLOCATORS                  // Don't implement default allocators calling malloc()/free() to avoid linking with them. You will need to call ImGui::SetAllocatorFunctions().\n   ..\n  438  \tif (!dc_window) {\n  439  \t\t// >TODO error handling\n  440: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n  441  \t\treturn;\n  442  \t}\n  ...\n  774  \t\t\tlogs.lock_and_write(entry);\n  775  \n  776: \t\t\tprintf(\"Opening\\n\");\n  777  \t\t\topened[(HWND)w_param] = get_microseconds_epoch();\n  778  \t\t\tbreak;\n  ...\n  962  \tif (!dc) {\n  963  \t\t// >TODO error handling\n  964: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n  965  \t\treturn std::nullopt;\n  966  \t}\n  ...\n  980  \tif (!suggested_pixel_format) {\n  981  \t\t// >TODO error handling\n  982: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n  983  \t\treturn std::nullopt;\n  984  \t}\n  ...\n  989  \tif (!result) {\n  990  \t\t// >TODO error handling\n  991: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n  992  \t\treturn std::nullopt;\n  993  \t}\n  ...\n  996  \tif (!SetPixelFormat(dc, suggested_pixel_format, &pixel_format)) {\n  997  \t\t// >TODO error handling\n  998: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n  999  \t\treturn std::nullopt;\n 1000  \t}\n ....\n 1005  \tif (!gl_context) {\n 1006  \t\t// >TODO error handling\n 1007: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n 1008  \t\treturn std::nullopt;\n 1009  \t}\n ....\n 1012  \t\twglDeleteContext(gl_context);\n 1013  \n 1014: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n 1015  \t\treturn std::nullopt;\n 1016  \t}\n ....\n 1019  \tglewExperimental = true; // Needed for core profile\n 1020  \tif (glewInit() != GLEW_OK) {\n 1021: \t\tprintf(\"Can't init glew\\n\");\n 1022  \t\treturn gl_context;\n 1023  \t}\n ....\n 1034  \tif (!gl) {\n 1035  \t\tauto err = glGetError();\n 1036: \t\tprintf(\"%s\", std::to_string(err).c_str());\n 1037  \n 1038  \t\treturn gl_context;\n ....\n 1053  \t// >TODO error handling\n 1054  \tif (!wglDeleteContext(gl_context)) {\n 1055: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n 1056  \t}\n 1057  }\n ....\n 1080  \n 1081  \tif (shared.mail_slot == INVALID_HANDLE_VALUE) {\n 1082: \t\tfprintf(stderr, \"Error creating mail slot\\n\");\n 1083  \t}\n 1084  }\n ....\n 1111  \n 1112  \tif (!fResult) {\n 1113: \t    fprintf(stderr, \"GetMailslotInfo failed with %d.\\n\", GetLastError()); \n 1114  \t    return std::nullopt;\n 1115  \t}\n ....\n 1132  \n 1133  \tif (!fResult) {\n 1134: \t    fprintf(stderr, \"ReadFile failed with %d.\\n\", GetLastError());\n 1135  \t    GlobalFree((HGLOBAL) lpszBuffer);\n 1136  \t    return std::nullopt;\n ....\n 1151  \n 1152  \tif (!fResult) {\n 1153: \t    fprintf(stderr, \"GetMailslotInfo failed (%d)\\n\", GetLastError());\n 1154  \t    return std::nullopt;\n 1155  \t}\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\GL\\glewinfo.c:\n   86  {\n   87    unsigned int i;\n   88:   fprintf(f, \"\\n%s:\", name);\n   89:   for (i=0; i<62-strlen(name); i++) fprintf(f, \" \");\n   90:   fprintf(f, \"%s \", def1 ? \"OK\" : \"MISSING\");\n   91    if (def1 != def2)\n   92:     fprintf(f, \"[%s] \", def2 ? \"OK\" : \"MISSING\");\n   93    if (def1 != def3)\n   94:     fprintf(f, \"[%s]\\n\", def3 ? \"OK\" : \"MISSING\");\n   95    else\n   96:     fprintf(f, \"\\n\");\n   97:   for (i=0; i<strlen(name)+1; i++) fprintf(f, \"-\");\n   98:   fprintf(f, \"\\n\");\n   99    fflush(f);\n  100  }\n  ...\n  103  {\n  104    unsigned int i;\n  105:   fprintf(f, \"  %s:\", name);\n  106:   for (i=0; i<60-strlen(name); i++) fprintf(f, \" \");\n  107:   fprintf(f, \"%s\\n\", undefined ? \"MISSING\" : \"OK\");\n  108    fflush(f);\n  109  }\n  ...\n 16314    if (glewParseArgs(argc-1, argv+1, &params))\n 16315    {\n 16316:     fprintf(stderr, \"Usage: glewinfo \"\n 16317  #if defined(GLEW_OSMESA)\n 16318  #elif defined(GLEW_EGL)\n .....\n 16332    if (GL_TRUE == glewCreateContext(&params))\n 16333    {\n 16334:     fprintf(stderr, \"Error: glewCreateContext failed\\n\");\n 16335      glewDestroyContext();\n 16336      return 1;\n .....\n 16340    if (GLEW_OK != err)\n 16341    {\n 16342:     fprintf(stderr, \"Error [main]: glewInit failed: %s\\n\", glewGetErrorString(err));\n 16343      glewDestroyContext();\n 16344      return 1;\n .....\n 16349    if (!getString)\n 16350    {\n 16351:     fprintf(stderr, \"Error: eglGetProcAddress failed to fetch glGetString\\n\");\n 16352      glewDestroyContext();\n 16353      return 1;\n .....\n 16366    f = stdout;\n 16367  #endif\n 16368:   fprintf(f, \"---------------------------\\n\");\n 16369:   fprintf(f, \"    GLEW Extension Info\\n\");\n 16370:   fprintf(f, \"---------------------------\\n\\n\");\n 16371:   fprintf(f, \"GLEW version %s\\n\", glewGetString(GLEW_VERSION));\n 16372  #if defined(GLEW_OSMESA)\n 16373  #elif defined(GLEW_EGL)\n 16374  #elif defined(_WIN32)\n 16375:   fprintf(f, \"Reporting capabilities of pixelformat %d\\n\", params.pixelformat);\n 16376  #elif !defined(__APPLE__) || defined(GLEW_APPLE_GLX)\n 16377:   fprintf(f, \"Reporting capabilities of display %s, visual 0x%x\\n\",\n 16378      params.display == NULL ? getenv(\"DISPLAY\") : params.display, params.visual);\n 16379  #endif\n 16380  #if defined(GLEW_EGL)\n 16381:   fprintf(f, \"Running on a %s from %s\\n\",\n 16382      getString(GL_RENDERER), getString(GL_VENDOR));\n 16383:   fprintf(f, \"OpenGL version %s is supported\\n\", getString(GL_VERSION));\n 16384  #else\n 16385:   fprintf(f, \"Running on a %s from %s\\n\",\n 16386      glGetString(GL_RENDERER), glGetString(GL_VENDOR));\n 16387:   fprintf(f, \"OpenGL version %s is supported\\n\", glGetString(GL_VERSION));\n 16388  #endif\n 16389    glewInfo();\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\GL\\visualinfo.c:\n  110    {\n  111  #if defined(_WIN32)\n  112:     fprintf(stderr, \"Usage: visualinfo [-a] [-s] [-h] [-pf <id>]\\n\");\n  113:     fprintf(stderr, \"        -a: show all visuals\\n\");\n  114:     fprintf(stderr, \"        -s: display to stdout instead of visualinfo.txt\\n\");\n  115:     fprintf(stderr, \"        -pf <id>: use given pixelformat\\n\");\n  116:     fprintf(stderr, \"        -h: this screen\\n\");\n  117  #else\n  118:     fprintf(stderr, \"Usage: visualinfo [-h] [-display <display>] [-visual <id>]\\n\");\n  119:     fprintf(stderr, \"        -h: this screen\\n\");\n  120:     fprintf(stderr, \"        -display <display>: use given display\\n\");\n  121:     fprintf(stderr, \"        -visual <id>: use given visual\\n\");\n  122  #endif\n  123      return 1;\n  ...\n  129    if (GL_TRUE == CreateContext(&ctx))\n  130    {\n  131:     fprintf(stderr, \"Error: CreateContext failed\\n\");\n  132      DestroyContext(&ctx);\n  133      return 1;\n  ...\n  149    if (GLEW_OK != err)\n  150    {\n  151:     fprintf(stderr, \"Error [main]: glewInit failed: %s\\n\", glewGetErrorString(err));\n  152      DestroyContext(&ctx);\n  153      return 1;\n  ...\n  175    /* output header information */\n  176    /* OpenGL extensions */\n  177:   fprintf(file, \"OpenGL vendor string: %s\\n\", glGetString(GL_VENDOR));\n  178:   fprintf(file, \"OpenGL renderer string: %s\\n\", glGetString(GL_RENDERER));\n  179:   fprintf(file, \"OpenGL version string: %s\\n\", glGetString(GL_VERSION));\n  180:   fprintf(file, \"OpenGL extensions (GL_): \\n\");\n  181    PrintExtensions((const char*)glGetString(GL_EXTENSIONS));\n  182  \n  183  #ifndef GLEW_NO_GLU\n  184    /* GLU extensions */\n  185:   fprintf(file, \"GLU version string: %s\\n\", gluGetString(GLU_VERSION));\n  186:   fprintf(file, \"GLU extensions (GLU_): \\n\");\n  187    PrintExtensions((const char*)gluGetString(GLU_EXTENSIONS));\n  188  #endif\n  ...\n  196    if (WGLEW_ARB_extensions_string || WGLEW_EXT_extensions_string)\n  197    {\n  198:     fprintf(file, \"WGL extensions (WGL_): \\n\");\n  199      PrintExtensions(wglGetExtensionsStringARB ? \n  200                      (const char*)wglGetExtensionsStringARB(ctx.dc) :\n  ...\n  209  #else\n  210    /* GLX extensions */\n  211:   fprintf(file, \"GLX extensions (GLX_): \\n\");\n  212    PrintExtensions(glXQueryExtensionsString(glXGetCurrentDisplay(), \n  213                                             DefaultScreen(glXGetCurrentDisplay())));\n  ...\n  253      {\n  254        *p = t[i] = '\\0';\n  255:       fprintf(file, \"    %s\\n\", t);\n  256        p++;\n  257        i = (int)strlen(p);\n  ...\n  265    }\n  266    t[i] = '\\0';\n  267:   fprintf(file, \"    %s.\\n\", t);\n  268  }\n  269  \n  ...\n  349    {\n  350      /* print table header */\n  351:     fprintf(file, \" +-----+-------------------------+-----------------+----------+-----------------+----------+\\n\");\n  352:     fprintf(file, \" |     |          visual         |      color      | ax dp st |      accum      |   layer  |\\n\");\n  353:     fprintf(file, \" |  id | tp ac gd fm db sw st ms |  sz  r  g  b  a | bf th cl |  sz  r  g  b  a | ov un sw |\\n\");\n  354:     fprintf(file, \" +-----+-------------------------+-----------------+----------+-----------------+----------+\\n\");\n  355      /* loop through all the pixel formats */\n  356      for(i = 1; i <= maxpf; i++)\n  ...\n  366        /* print out the information for this visual */\n  367        /* visual id */\n  368:       fprintf(file, \" |% 4d | \", i);\n  369        /* visual type */\n  370        if (value[1])\n  371        {\n  372: \tif (WGLEW_ARB_pbuffer && value[n_pbuffer]) fprintf(file, \"wp \");\n  373: \telse fprintf(file, \"wn \");\n  374        }\n  375        else\n  376        {\n  377: \tif (value[2]) fprintf(file, \"bm \");\n  378: \telse if (WGLEW_ARB_pbuffer && value[n_pbuffer]) fprintf(file, \"pb \");\n  379        }\n  380        /* acceleration */\n  381:       fprintf(file, \"%s \", value[3] == WGL_FULL_ACCELERATION_ARB ? \"fu\" : \n  382  \t      value[3] == WGL_GENERIC_ACCELERATION_ARB ? \"ge\" :\n  383  \t      value[3] == WGL_NO_ACCELERATION_ARB ? \"no\" : \". \");\n  384        /* gdi support */\n  385:       fprintf(file, \" %c \", value[25] ? 'y' : '.');\n  386        /* format */\n  387:       if (WGLEW_NV_float_buffer && value[n_float]) fprintf(file, \" f \");\n  388:       else if (WGLEW_ATI_pixel_format_float && value[7] == WGL_TYPE_RGBA_FLOAT_ATI) fprintf(file, \" f \");\n  389:       else if (value[7] == WGL_TYPE_RGBA_ARB) fprintf(file, \" i \");\n  390:       else if (value[7] == WGL_TYPE_COLORINDEX_ARB) fprintf(file, \" c \");\n  391:       else if (value[7] == WGL_TYPE_RGBA_UNSIGNED_FLOAT_EXT) fprintf(file,\" p \");\n  392:       else fprintf(file,\" ? \");\n  393        /* double buffer */\n  394:       fprintf(file, \" %c \", value[5] ? 'y' : '.');\n  395        /* swap method */\n  396:       if (value[4] == WGL_SWAP_EXCHANGE_ARB) fprintf(file, \" x \");\n  397:       else if (value[4] == WGL_SWAP_COPY_ARB) fprintf(file, \" c \");\n  398:       else if (value[4] == WGL_SWAP_UNDEFINED_ARB) fprintf(file, \" . \");\n  399:       else fprintf(file, \" . \");\n  400        /* stereo */\n  401:       fprintf(file, \" %c \", value[6] ? 'y' : '.');\n  402        /* multisample */\n  403        if (value[24] > 0)\n  404: \tfprintf(file, \"%2d | \", value[24]);\n  405        else\n  406: \tfprintf(file, \" . | \");\n  407        /* color size */\n  408:       if (value[8]) fprintf(file, \"%3d \", value[8]);\n  409:       else fprintf(file, \"  . \");\n  410        /* red */\n  411:       if (value[9]) fprintf(file, \"%2d \", value[9]); \n  412:       else fprintf(file, \" . \");\n  413        /* green */\n  414:       if (value[10]) fprintf(file, \"%2d \", value[10]); \n  415:       else fprintf(file, \" . \");\n  416        /* blue */\n  417:       if (value[11]) fprintf(file, \"%2d \", value[11]);\n  418:       else fprintf(file, \" . \");\n  419        /* alpha */\n  420:       if (value[12]) fprintf(file, \"%2d | \", value[12]); \n  421:       else fprintf(file, \" . | \");\n  422        /* aux buffers */\n  423:       if (value[20]) fprintf(file, \"%2d \", value[20]);\n  424:       else fprintf(file, \" . \");\n  425        /* depth */\n  426:       if (value[18]) fprintf(file, \"%2d \", value[18]);\n  427:       else fprintf(file, \" . \");\n  428        /* stencil */\n  429:       if (value[19]) fprintf(file, \"%2d | \", value[19]);\n  430:       else fprintf(file, \" . | \");\n  431        /* accum size */\n  432:       if (value[13]) fprintf(file, \"%3d \", value[13]);\n  433:       else fprintf(file, \"  . \");\n  434        /* accum red */\n  435:       if (value[14]) fprintf(file, \"%2d \", value[14]);\n  436:       else fprintf(file, \" . \");\n  437        /* accum green */\n  438:       if (value[15]) fprintf(file, \"%2d \", value[15]);\n  439:       else fprintf(file, \" . \");\n  440        /* accum blue */\n  441:       if (value[16]) fprintf(file, \"%2d \", value[16]);\n  442:       else fprintf(file, \" . \");\n  443        /* accum alpha */\n  444:       if (value[17]) fprintf(file, \"%2d | \", value[17]);\n  445:       else fprintf(file, \" . | \");\n  446        /* overlay */\n  447:       if (value[21]) fprintf(file, \"%2d \", value[21]);\n  448:       else fprintf(file, \" . \");\n  449        /* underlay */\n  450:       if (value[22]) fprintf(file, \"%2d \", value[22]);\n  451:       else fprintf(file, \" . \");\n  452        /* layer swap */\n  453:       if (value[23]) fprintf(file, \"y \");\n  454:       else fprintf(file, \" . \");\n  455:       fprintf(file, \"|\\n\");\n  456      }\n  457      /* print table footer */\n  458:     fprintf(file, \" +-----+-------------------------+-----------------+----------+-----------------+----------+\\n\");\n  459:     fprintf(file, \" |     |          visual         |      color      | ax dp st |      accum      |   layer  |\\n\");\n  460:     fprintf(file, \" |  id | tp ac gd fm db sw st ms |  sz  r  g  b  a | bf th cl |  sz  r  g  b  a | ov un sw |\\n\");\n  461:     fprintf(file, \" +-----+-------------------------+-----------------+----------+-----------------+----------+\\n\");\n  462    }\n  463    else /* verbose */\n  464    {\n  465  #if 0\n  466:     fprintf(file, \"\\n\");\n  467      /* loop through all the pixel formats */\n  468      for(i = 1; i <= maxpf; i++)\n  ...\n  472        if(!(pfd.dwFlags & PFD_SUPPORT_OPENGL)\n  473  \t || (drawableonly && !(pfd.dwFlags & PFD_DRAW_TO_WINDOW))) continue;\n  474:       fprintf(file, \"Visual ID: %2d  depth=%d  class=%s\\n\", i, pfd.cDepthBits, \n  475  \t     pfd.cColorBits <= 8 ? \"PseudoColor\" : \"TrueColor\");\n  476:       fprintf(file, \"    bufferSize=%d level=%d renderType=%s doubleBuffer=%d stereo=%d\\n\", pfd.cColorBits, pfd.bReserved, pfd.iPixelType == PFD_TYPE_RGBA ? \"rgba\" : \"ci\", pfd.dwFlags & PFD_DOUBLEBUFFER, pfd.dwFlags & PFD_STEREO);\n  477:       fprintf(file, \"    generic=%d generic accelerated=%d\\n\", (pfd.dwFlags & PFD_GENERIC_FORMAT) == PFD_GENERIC_FORMAT, (pfd.dwFlags & PFD_GENERIC_ACCELERATED) == PFD_GENERIC_ACCELERATED);\n  478:       fprintf(file, \"    rgba: redSize=%d greenSize=%d blueSize=%d alphaSize=%d\\n\", pfd.cRedBits, pfd.cGreenBits, pfd.cBlueBits, pfd.cAlphaBits);\n  479:       fprintf(file, \"    auxBuffers=%d depthSize=%d stencilSize=%d\\n\", pfd.cAuxBuffers, pfd.cDepthBits, pfd.cStencilBits);\n  480:       fprintf(file, \"    accum: redSize=%d greenSize=%d blueSize=%d alphaSize=%d\\n\", pfd.cAccumRedBits, pfd.cAccumGreenBits, pfd.cAccumBlueBits, pfd.cAccumAlphaBits);\n  481:       fprintf(file, \"    multiSample=%d multisampleBuffers=%d\\n\", 0, 0);\n  482:       fprintf(file, \"    Opaque.\\n\");\n  483      }\n  484  #endif\n  ...\n  498    if (!verbose)\n  499    {\n  500:     fprintf(file, \"-----------------------------------------------------------------------------\\n\");\n  501:     fprintf(file, \"   visual   x  bf  lv rg d st ge ge  r  g  b a  ax dp st   accum buffs    ms \\n\");\n  502:     fprintf(file, \" id  dep tp sp sz  l  ci b ro ne ac sz sz sz sz bf th cl  sz  r  g  b  a ns b\\n\");\n  503:     fprintf(file, \"-----------------------------------------------------------------------------\\n\");\n  504  \n  505      /* loop through all the pixel formats */\n  ...\n  527        */\n  528        /* print out the information for this pixel format */\n  529:       fprintf(file, \"0x%02x \", i);\n  530:       fprintf(file, \"%3d \", pfd.cColorBits);\n  531:       if(pfd.dwFlags & PFD_DRAW_TO_WINDOW) fprintf(file, \"wn \");\n  532:       else if(pfd.dwFlags & PFD_DRAW_TO_BITMAP) fprintf(file, \"bm \");\n  533:       else fprintf(file, \"pb \");\n  534        /* should find transparent pixel from LAYERPLANEDESCRIPTOR */\n  535:       fprintf(file, \" . \"); \n  536:       fprintf(file, \"%3d \", pfd.cColorBits);\n  537        /* bReserved field indicates number of over/underlays */\n  538:       if(pfd.bReserved) fprintf(file, \" %d \", pfd.bReserved);\n  539:       else fprintf(file, \" . \"); \n  540:       fprintf(file, \" %c \", pfd.iPixelType == PFD_TYPE_RGBA ? 'r' : 'c');\n  541:       fprintf(file, \"%c \", pfd.dwFlags & PFD_DOUBLEBUFFER ? 'y' : '.');\n  542:       fprintf(file, \" %c \", pfd.dwFlags & PFD_STEREO ? 'y' : '.');\n  543        /* added: */\n  544:       fprintf(file, \" %c \", pfd.dwFlags & PFD_GENERIC_FORMAT ? 'y' : '.');\n  545:       fprintf(file, \" %c \", pfd.dwFlags & PFD_GENERIC_ACCELERATED ? 'y' : '.');\n  546        if(pfd.cRedBits && pfd.iPixelType == PFD_TYPE_RGBA) \n  547: \tfprintf(file, \"%2d \", pfd.cRedBits);\n  548:       else fprintf(file, \" . \");\n  549        if(pfd.cGreenBits && pfd.iPixelType == PFD_TYPE_RGBA) \n  550: \tfprintf(file, \"%2d \", pfd.cGreenBits);\n  551:       else fprintf(file, \" . \");\n  552        if(pfd.cBlueBits && pfd.iPixelType == PFD_TYPE_RGBA) \n  553: \tfprintf(file, \"%2d \", pfd.cBlueBits);\n  554:       else fprintf(file, \" . \");\n  555        if(pfd.cAlphaBits && pfd.iPixelType == PFD_TYPE_RGBA) \n  556: \tfprintf(file, \"%2d \", pfd.cAlphaBits);\n  557:       else fprintf(file, \" . \");\n  558:       if(pfd.cAuxBuffers)     fprintf(file, \"%2d \", pfd.cAuxBuffers);\n  559:       else fprintf(file, \" . \");\n  560:       if(pfd.cDepthBits)      fprintf(file, \"%2d \", pfd.cDepthBits);\n  561:       else fprintf(file, \" . \");\n  562:       if(pfd.cStencilBits)    fprintf(file, \"%2d \", pfd.cStencilBits);\n  563:       else fprintf(file, \" . \");\n  564:       if(pfd.cAccumBits)   fprintf(file, \"%3d \", pfd.cAccumBits);\n  565:       else fprintf(file, \"  . \");\n  566:       if(pfd.cAccumRedBits)   fprintf(file, \"%2d \", pfd.cAccumRedBits);\n  567:       else fprintf(file, \" . \");\n  568:       if(pfd.cAccumGreenBits) fprintf(file, \"%2d \", pfd.cAccumGreenBits);\n  569:       else fprintf(file, \" . \");\n  570:       if(pfd.cAccumBlueBits)  fprintf(file, \"%2d \", pfd.cAccumBlueBits);\n  571:       else fprintf(file, \" . \");\n  572:       if(pfd.cAccumAlphaBits) fprintf(file, \"%2d \", pfd.cAccumAlphaBits);\n  573:       else fprintf(file, \" . \");\n  574        /* no multisample in win32 */\n  575:       fprintf(file, \" . .\\n\");\n  576      }\n  577      /* print table footer */\n  578:     fprintf(file, \"-----------------------------------------------------------------------------\\n\");\n  579:     fprintf(file, \"   visual   x  bf  lv rg d st ge ge  r  g  b a  ax dp st   accum buffs    ms \\n\");\n  580:     fprintf(file, \" id  dep tp sp sz  l  ci b ro ne ac sz sz sz sz bf th cl  sz  r  g  b  a ns b\\n\");\n  581:     fprintf(file, \"-----------------------------------------------------------------------------\\n\");\n  582    }\n  583    else /* verbose */\n  584    {\n  585:     fprintf(file, \"\\n\");\n  586      /* loop through all the pixel formats */\n  587      for(i = 1; i <= maxpf; i++)\n  ...\n  591        if(!(pfd.dwFlags & PFD_SUPPORT_OPENGL)\n  592  \t || (drawableonly && !(pfd.dwFlags & PFD_DRAW_TO_WINDOW))) continue;\n  593:       fprintf(file, \"Visual ID: %2d  depth=%d  class=%s\\n\", i, pfd.cDepthBits, \n  594  \t     pfd.cColorBits <= 8 ? \"PseudoColor\" : \"TrueColor\");\n  595:       fprintf(file, \"    bufferSize=%d level=%d renderType=%s doubleBuffer=%ld stereo=%ld\\n\", pfd.cColorBits, pfd.bReserved, pfd.iPixelType == PFD_TYPE_RGBA ? \"rgba\" : \"ci\", pfd.dwFlags & PFD_DOUBLEBUFFER, pfd.dwFlags & PFD_STEREO);\n  596:       fprintf(file, \"    generic=%d generic accelerated=%d\\n\", (pfd.dwFlags & PFD_GENERIC_FORMAT) == PFD_GENERIC_FORMAT, (pfd.dwFlags & PFD_GENERIC_ACCELERATED) == PFD_GENERIC_ACCELERATED);\n  597:       fprintf(file, \"    rgba: redSize=%d greenSize=%d blueSize=%d alphaSize=%d\\n\", pfd.cRedBits, pfd.cGreenBits, pfd.cBlueBits, pfd.cAlphaBits);\n  598:       fprintf(file, \"    auxBuffers=%d depthSize=%d stencilSize=%d\\n\", pfd.cAuxBuffers, pfd.cDepthBits, pfd.cStencilBits);\n  599:       fprintf(file, \"    accum: redSize=%d greenSize=%d blueSize=%d alphaSize=%d\\n\", pfd.cAccumRedBits, pfd.cAccumGreenBits, pfd.cAccumBlueBits, pfd.cAccumAlphaBits);\n  600:       fprintf(file, \"    multiSample=%d multisampleBuffers=%d\\n\", 0, 0);\n  601:       fprintf(file, \"    Opaque.\\n\");\n  602      }\n  603    }\n  ...\n  628    {\n  629      aglDescribePixelFormat(pf, GL_RGBA, &value);\n  630:     fprintf(stderr, \"%d\\n\", value);\n  631      pf = aglNextPixelFormat(pf);\n  632    }\n  ...\n  660      {\n  661        /* print table header */\n  662:       fprintf(file, \" +-----+-------------------------+-----------------+----------+-------------+-------+------+\\n\");\n  663:       fprintf(file, \" |     |        visual           |      color      | ax dp st |    accum    |   ms  |  cav |\\n\");\n  664:       fprintf(file, \" |  id | tp xr cl fm db st lv xp |  sz  r  g  b  a | bf th cl | r  g  b  a  | ns  b |  eat |\\n\");\n  665:       fprintf(file, \" +-----+-------------------------+-----------------+----------+-------------+-------+------+\\n\");\n  666        /* loop through all the fbcs */\n  667        for (i=0; i<n_fbc; i++)\n  ...\n  672          if (ret != Success)\n  673          {\n  674:           fprintf(file, \"|  ?  |\");\n  675          }\n  676          else\n  677          {\n  678:           fprintf(file, \" |% 4d | \", value);\n  679          }\n  680          /* visual type */\n  ...\n  682          if (ret != Success)\n  683          {\n  684:           fprintf(file, \" ? \");\n  685          }\n  686          else\n  ...\n  690              if (value & GLX_PBUFFER_BIT)\n  691              {\n  692:               fprintf(file, \"wp \");\n  693              }\n  694              else\n  695              {\n  696:               fprintf(file, \"wn \");\n  697              }\n  698            }\n  ...\n  701              if (value & GLX_PBUFFER_BIT)\n  702              {\n  703:               fprintf(file, \"pb \");\n  704              }\n  705              else if (value & GLX_PIXMAP_BIT)\n  706              {\n  707:               fprintf(file, \"pm \");\n  708              }\n  709              else\n  710              {\n  711:               fprintf(file, \" ? \");\n  712              }\n  713            }\n  ...\n  717          if (ret != Success)\n  718          {\n  719:           fprintf(file, \" ? \");\n  720          }\n  721          else\n  722          {\n  723:           fprintf(file, value ? \" y \" : \" n \");\n  724          }\n  725          /* class */\n  ...\n  727          if (ret != Success)\n  728          {\n  729:           fprintf(file, \" ? \");\n  730          }\n  731          else\n  732          {\n  733            if (GLX_TRUE_COLOR == value)\n  734:             fprintf(file, \"tc \");\n  735            else if (GLX_DIRECT_COLOR == value)\n  736:             fprintf(file, \"dc \");\n  737            else if (GLX_PSEUDO_COLOR == value)\n  738:             fprintf(file, \"pc \");\n  739            else if (GLX_STATIC_COLOR == value)\n  740:             fprintf(file, \"sc \");\n  741            else if (GLX_GRAY_SCALE == value)\n  742:             fprintf(file, \"gs \");\n  743            else if (GLX_STATIC_GRAY == value)\n  744:             fprintf(file, \"sg \");\n  745            else if (GLX_X_VISUAL_TYPE == value)\n  746:             fprintf(file, \" . \");\n  747            else\n  748:             fprintf(file, \" ? \");\n  749          }\n  750          /* format */\n  ...\n  752          if (ret != Success)\n  753          {\n  754:           fprintf(file, \" ? \");\n  755          }\n  756          else\n  ...\n  762              if (Success == ret2 && GL_TRUE == value2)\n  763              {\n  764:               fprintf(file, \" f \");\n  765              }\n  766              else if (value & GLX_RGBA_BIT)\n  767:               fprintf(file, \" i \");\n  768              else if (value & GLX_COLOR_INDEX_BIT)\n  769:               fprintf(file, \" c \");\n  770              else\n  771:               fprintf(file, \" ? \");\n  772            }\n  773            else\n  774            {\n  775              if (value & GLX_RGBA_FLOAT_ATI_BIT)\n  776:               fprintf(file, \" f \");\n  777              else if (value & GLX_RGBA_BIT)\n  778:               fprintf(file, \" i \");\n  779              else if (value & GLX_COLOR_INDEX_BIT)\n  780:               fprintf(file, \" c \");\n  781              else\n  782:               fprintf(file, \" ? \");\n  783            }\n  784          }\n  785          /* double buffer */\n  786          ret = glXGetFBConfigAttrib(ctx->dpy, fbc[i], GLX_DOUBLEBUFFER, &value);\n  787:         fprintf(file, \" %c \", Success != ret ? '?' : (value ? 'y' : '.'));\n  788          /* stereo */\n  789          ret = glXGetFBConfigAttrib(ctx->dpy, fbc[i], GLX_STEREO, &value);\n  790:         fprintf(file, \" %c \", Success != ret ? '?' : (value ? 'y' : '.'));\n  791          /* level */\n  792          ret = glXGetFBConfigAttrib(ctx->dpy, fbc[i], GLX_LEVEL, &value);\n  793          if (Success != ret)\n  794          {\n  795:           fprintf(file, \" ? \");\n  796          }\n  797          else\n  798          {\n  799:           fprintf(file, \"%2d \", value);\n  800          }\n  801          /* transparency */\n  ...\n  803          if (Success != ret)\n  804          {\n  805:           fprintf(file, \" ? | \");\n  806          }\n  807          else\n  808          {\n  809            if (GLX_TRANSPARENT_RGB == value)\n  810:             fprintf(file, \" r | \");\n  811            else if (GLX_TRANSPARENT_INDEX == value)\n  812:             fprintf(file, \" i | \");\n  813            else if (GLX_NONE == value)\n  814:             fprintf(file, \" . | \");\n  815            else\n  816:             fprintf(file, \" ? | \");\n  817          }\n  818          /* color size */\n  ...\n  820          if (Success != ret)\n  821          {\n  822:           fprintf(file, \"  ? \");\n  823          }\n  824          else\n  825          {\n  826            if (value)\n  827:             fprintf(file, \"%3d \", value);\n  828            else\n  829:             fprintf(file, \"  . \");\n  830          }\n  831          /* red size */\n  ...\n  833          if (Success != ret)\n  834          {\n  835:           fprintf(file, \" ? \");\n  836          }\n  837          else\n  838          {\n  839            if (value)\n  840:             fprintf(file, \"%2d \", value);\n  841            else\n  842:             fprintf(file, \" . \");\n  843          }\n  844          /* green size */\n  ...\n  846          if (Success != ret)\n  847          {\n  848:           fprintf(file, \" ? \");\n  849          }\n  850          else\n  851          {\n  852            if (value)\n  853:             fprintf(file, \"%2d \", value);\n  854            else\n  855:             fprintf(file, \" . \");\n  856          }\n  857          /* blue size */\n  ...\n  859          if (Success != ret)\n  860          {\n  861:           fprintf(file, \" ? \");\n  862          }\n  863          else\n  864          {\n  865            if (value)\n  866:             fprintf(file, \"%2d \", value);\n  867            else\n  868:             fprintf(file, \" . \");\n  869          }\n  870          /* alpha size */\n  ...\n  872          if (Success != ret)\n  873          {\n  874:           fprintf(file, \" ? | \");\n  875          }\n  876          else\n  877          {\n  878            if (value)\n  879:             fprintf(file, \"%2d | \", value);\n  880            else\n  881:             fprintf(file, \" . | \");\n  882          }\n  883          /* aux buffers */\n  ...\n  885          if (Success != ret)\n  886          {\n  887:           fprintf(file, \" ? \");\n  888          }\n  889          else\n  890          {\n  891            if (value)\n  892:             fprintf(file, \"%2d \", value);\n  893            else\n  894:             fprintf(file, \" . \");\n  895          }\n  896          /* depth size */\n  ...\n  898          if (Success != ret)\n  899          {\n  900:           fprintf(file, \" ? \");\n  901          }\n  902          else\n  903          {\n  904            if (value)\n  905:             fprintf(file, \"%2d \", value);\n  906            else\n  907:             fprintf(file, \" . \");\n  908          }\n  909          /* stencil size */\n  ...\n  911          if (Success != ret)\n  912          {\n  913:           fprintf(file, \" ? | \");\n  914          }\n  915          else\n  916          {\n  917            if (value)\n  918:             fprintf(file, \"%2d | \", value);\n  919            else\n  920:             fprintf(file, \" . | \");\n  921          }\n  922          /* accum red size */\n  ...\n  924          if (Success != ret)\n  925          {\n  926:           fprintf(file, \" ? \");\n  927          }\n  928          else\n  929          {\n  930            if (value)\n  931:             fprintf(file, \"%2d \", value);\n  932            else\n  933:             fprintf(file, \" . \");\n  934          }\n  935          /* accum green size */\n  ...\n  937          if (Success != ret)\n  938          {\n  939:           fprintf(file, \" ? \");\n  940          }\n  941          else\n  942          {\n  943            if (value)\n  944:             fprintf(file, \"%2d \", value);\n  945            else\n  946:             fprintf(file, \" . \");\n  947          }\n  948          /* accum blue size */\n  ...\n  950          if (Success != ret)\n  951          {\n  952:           fprintf(file, \" ? \");\n  953          }\n  954          else\n  955          {\n  956            if (value)\n  957:             fprintf(file, \"%2d \", value);\n  958            else\n  959:             fprintf(file, \" . \");\n  960          }\n  961          /* accum alpha size */\n  ...\n  963          if (Success != ret)\n  964          {\n  965:           fprintf(file, \" ? | \");\n  966          }\n  967          else\n  968          {\n  969            if (value)\n  970:             fprintf(file, \"%2d | \", value);\n  971            else\n  972:             fprintf(file, \" . | \");\n  973          }\n  974          /* multisample */\n  ...\n  976          if (Success != ret)\n  977          {\n  978:           fprintf(file, \" ? \");\n  979          }\n  980          else\n  981          {\n  982:           fprintf(file, \"%2d \", value);\n  983          }\n  984          ret = glXGetFBConfigAttrib(ctx->dpy, fbc[i], GLX_SAMPLE_BUFFERS, &value);\n  985          if (Success != ret)\n  986          {\n  987:           fprintf(file, \" ? | \");\n  988          }\n  989          else\n  990          {\n  991:           fprintf(file, \"%2d | \", value);\n  992          }\n  993          /* caveat */\n  ...\n  995          if (Success != ret)\n  996          {\n  997:           fprintf(file, \"???? |\");\n  998          }\n  999          else\n 1000          {\n 1001            if (GLX_NONE == value)\n 1002:             fprintf(file, \"none |\\n\");\n 1003            else if (GLX_SLOW_CONFIG == value)\n 1004:             fprintf(file, \"slow |\\n\");\n 1005            else if (GLX_NON_CONFORMANT_CONFIG == value)\n 1006:             fprintf(file, \"ncft |\\n\");\n 1007            else\n 1008:             fprintf(file, \"???? |\\n\");\n 1009          }\n 1010        }\n 1011        /* print table footer */\n 1012:       fprintf(file, \" +-----+-------------------------+-----------------+----------+-------------+-------+------+\\n\");\n 1013:       fprintf(file, \" |  id | tp xr cl fm db st lv xp |  sz  r  g  b  a | bf th cl | r  g  b  a  | ns  b |  eat |\\n\");\n 1014:       fprintf(file, \" |     |        visual           |      color      | ax dp st |    accum    |   ms  |  cav |\\n\");\n 1015:       fprintf(file, \" +-----+-------------------------+-----------------+----------+-------------+-------+------+\\n\");\n 1016      }\n 1017    }\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\Main.cpp:\n    9  //#define IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS         // [Win32] Don't implement default IME handler. Won't use and link with ImmGetContext/ImmSetCompositionWindow.\n   10  //#define IMGUI_DISABLE_WIN32_FUNCTIONS                     // [Win32] Won't use and link with any Win32 function.\n   11: //#define IMGUI_DISABLE_FORMAT_STRING_FUNCTIONS             // Don't implement ImFormatString/ImFormatStringV so you can implement them yourself if you don't want to link with vsnprintf.\n   12  //#define IMGUI_DISABLE_MATH_FUNCTIONS                      // Don't implement ImFabs/ImSqrt/ImPow/ImFmod/ImCos/ImSin/ImAcos/ImAtan2 wrapper so you can implement them yourself. Declare your prototypes in imconfig.h.\n   13  //#define IMGUI_DISABLE_DEFAULT_ALLOCATORS                  // Don't implement default allocators calling malloc()/free() to avoid linking with them. You will need to call ImGui::SetAllocatorFunctions().\n   ..\n  406  \tif (!dc_window) {\n  407  \t\t// >TODO error handling\n  408: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n  409  \t\treturn;\n  410  \t}\n  ...\n  957  \tif (!dc) {\n  958  \t\t// >TODO error handling\n  959: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n  960  \t\treturn std::nullopt;\n  961  \t}\n  ...\n  975  \tif (!suggested_pixel_format) {\n  976  \t\t// >TODO error handling\n  977: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n  978  \t\treturn std::nullopt;\n  979  \t}\n  ...\n  984  \tif (!result) {\n  985  \t\t// >TODO error handling\n  986: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n  987  \t\treturn std::nullopt;\n  988  \t}\n  ...\n  991  \tif (!SetPixelFormat(dc, suggested_pixel_format, &pixel_format)) {\n  992  \t\t// >TODO error handling\n  993: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n  994  \t\treturn std::nullopt;\n  995  \t}\n  ...\n 1000  \tif (!gl_context) {\n 1001  \t\t// >TODO error handling\n 1002: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n 1003  \t\treturn std::nullopt;\n 1004  \t}\n ....\n 1007  \t\twglDeleteContext(gl_context);\n 1008  \n 1009: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n 1010  \t\treturn std::nullopt;\n 1011  \t}\n ....\n 1014  \tglewExperimental = true; // Needed for core profile\n 1015  \tif (glewInit() != GLEW_OK) {\n 1016: \t\tprintf(\"Can't init glew\\n\");\n 1017  \t\treturn gl_context;\n 1018  \t}\n ....\n 1029  \tif (!gl) {\n 1030  \t\tauto err = glGetError();\n 1031: \t\tprintf(\"%s\", std::to_string(err).c_str());\n 1032  \n 1033  \t\treturn gl_context;\n ....\n 1047  void destroy_gl_context(HGLRC gl_context) noexcept {\n 1048  \t// >TODO error handling\n 1049: \tprintf(\"deleting... \");\n 1050  \tif (!wglDeleteContext(gl_context)) {\n 1051: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n 1052  \t}\n 1053  }\n\nC:\\Users\\Tackwin\\Documents\\Code\\sans-peine\\Client\\src\\Main.cpp:\n  313  \n  314  \tif (state.mail_slot == INVALID_HANDLE_VALUE) {\n  315: \t\tfprintf(stderr, \"Error creating mail slot\\n\");\n  316  \t\tstd::terminate();\n  317  \t}\n  ...\n  344   \n  345      if (!fResult) {\n  346:         fprintf(stderr, \"GetMailslotInfo failed with %d.\\n\", GetLastError()); \n  347          return std::nullopt;\n  348      }\n  ...\n  365  \n  366      if (!fResult) {\n  367:         fprintf(stderr, \"ReadFile failed with %d.\\n\", GetLastError());\n  368          GlobalFree((HGLOBAL) lpszBuffer);\n  369          return std::nullopt;\n  ...\n  384  \n  385      if (!fResult) {\n  386:         fprintf(stderr, \"GetMailslotInfo failed (%d)\\n\", GetLastError());\n  387          return std::nullopt;\n  388      }\n\nC:\\Users\\Tackwin\\Documents\\Code\\sans-peine\\Simulation\\src\\Main.cpp:\n  328  \t);\n  329  \tif (state.mail_slot == INVALID_HANDLE_VALUE) {\n  330: \t\tfprintf(stderr, \"CreateFile failed with %d.\\n\", GetLastError());\n  331  \t\treturn;\n  332  \t}\n  ...\n  344  \t);\n  345  \n  346: \tif (!fResult) fprintf(stderr, \"Write failed with %d.\\n\", GetLastError());\n  347  }\n  348  \n\n354 matches across 18 files\n\n\nSearching 0 files for \"printf\"\n\n0 matches\n\nSearching 149 files for \"printf\"\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\Release\\CMakeFiles\\3.18.1\\CMakeDetermineCompilerABI_CXX.bin:\n    <binary>\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\cbt_hook.cpp:\n   33  \t\t\t\tGetModuleFileNameA(NULL, big_buffer, sizeof(big_buffer));\n   34  \n   35: \t\t\t\tsprintf(\n   36  \t\t\t\t\tbuffer,\n   37  \t\t\t\t\t\"Sending Event %s from %s to %zu mail (%s) with %zu msg\\n\",\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\Event.cpp:\n  236  \tfor (auto& [name, time] : state->cache.apps_time_usage) {\n  237  \t\tchar buffer[128] = {0};\n  238: \t\tstd::snprintf(buffer, 128, \"%-32s : % 10llu seconds\", name.data(), time);\n  239  \t\tImGui::Selectable(buffer);\n  240  \t}\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\File_Win.cpp:\n  104  \tauto err = fopen_s(&f, path.generic_string().c_str(), \"wb+\");\n  105  \tif (!f || err) {\n  106: \t\tprintf(\"Error: %d\\n\", err);\n  107  \t\treturn err;\n  108  \t}\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui.cpp:\n  723  // System includes\n  724  #include <ctype.h>      // toupper\n  725: #include <stdio.h>      // vsnprintf, sscanf, printf\n  726  #if defined(_MSC_VER) && _MSC_VER <= 1500 // MSVC 2008 or earlier\n  727  #include <stddef.h>     // intptr_t\n  ...\n  760  #ifdef _MSC_VER\n  761  #pragma warning (disable: 4127)             // condition expression is constant\n  762: #pragma warning (disable: 4996)             // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen\n  763  #if defined(_MSC_VER) && _MSC_VER >= 1922   // MSVC 2019 16.2 or later\n  764  #pragma warning (disable: 5054)             // operator '|': deprecated between enumerations of different types\n  ...\n  781  #pragma clang diagnostic ignored \"-Wint-to-void-pointer-cast\"       // warning: cast to 'void *' from smaller integer type 'int'\n  782  #pragma clang diagnostic ignored \"-Wzero-as-null-pointer-constant\"  // warning: zero as null pointer constant                    // some standard header variations use #define NULL 0\n  783: #pragma clang diagnostic ignored \"-Wdouble-promotion\"               // warning: implicit conversion from 'float' to 'double' when passing argument to function  // using printf() is a misery with this as C++ va_arg ellipsis changes float to double.\n  784  #pragma clang diagnostic ignored \"-Wimplicit-int-float-conversion\"  // warning: implicit conversion from 'xxx' to 'float' may lose precision\n  785  #elif defined(__GNUC__)\n  ...\n 1368  \n 1369  // A) MSVC version appears to return -1 on overflow, whereas glibc appears to return total count (which may be >= buf_size).\n 1370: // Ideally we would test for only one of those limits at runtime depending on the behavior the vsnprintf(), but trying to deduct it at compile time sounds like a pandora can of worm.\n 1371: // B) When buf==NULL vsnprintf() will return the output size.\n 1372  #ifndef IMGUI_DISABLE_DEFAULT_FORMAT_FUNCTIONS\n 1373  \n 1374: // We support stb_sprintf which is much faster (see: https://github.com/nothings/stb/blob/master/stb_sprintf.h)\n 1375: // You may set IMGUI_USE_STB_SPRINTF to use our default wrapper, or set IMGUI_DISABLE_DEFAULT_FORMAT_FUNCTIONS\n 1376  // and setup the wrapper yourself. (FIXME-OPT: Some of our high-level operations such as ImGuiTextBuffer::appendfv() are\n 1377: // designed using two-passes worst case, which probably could be improved using the stbsp_vsprintfcb() function.)\n 1378: #ifdef IMGUI_USE_STB_SPRINTF\n 1379: #define STB_SPRINTF_IMPLEMENTATION\n 1380: #include \"stb_sprintf.h\"\n 1381  #endif\n 1382  \n 1383: #if defined(_MSC_VER) && !defined(vsnprintf)\n 1384: #define vsnprintf _vsnprintf\n 1385  #endif\n 1386  \n ....\n 1389      va_list args;\n 1390      va_start(args, fmt);\n 1391: #ifdef IMGUI_USE_STB_SPRINTF\n 1392:     int w = stbsp_vsnprintf(buf, (int)buf_size, fmt, args);\n 1393  #else\n 1394:     int w = vsnprintf(buf, buf_size, fmt, args);\n 1395  #endif\n 1396      va_end(args);\n ....\n 1405  int ImFormatStringV(char* buf, size_t buf_size, const char* fmt, va_list args)\n 1406  {\n 1407: #ifdef IMGUI_USE_STB_SPRINTF\n 1408:     int w = stbsp_vsnprintf(buf, (int)buf_size, fmt, args);\n 1409  #else\n 1410:     int w = vsnprintf(buf, buf_size, fmt, args);\n 1411  #endif\n 1412      if (buf == NULL)\n ....\n 2083  //-----------------------------------------------------------------------------\n 2084  \n 2085: // On some platform vsnprintf() takes va_list by reference and modifies it.\n 2086  // va_copy is the 'correct' way to copy a va_list but Visual Studio prior to 2013 doesn't have it.\n 2087  #ifndef va_copy\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui.h:\n   82  #define IM_ASSERT(_EXPR)            assert(_EXPR)                               // You can override the default assert handler by editing imconfig.h\n   83  #endif\n   84: #if !defined(IMGUI_USE_STB_SPRINTF) && (defined(__clang__) || defined(__GNUC__))\n   85: #define IM_FMTARGS(FMT)             __attribute__((format(printf, FMT, FMT+1))) // To apply printf-style warnings to our functions.\n   86: #define IM_FMTLIST(FMT)             __attribute__((format(printf, FMT, 0)))\n   87  #else\n   88  #define IM_FMTARGS(FMT)\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui_draw.cpp:\n   35  #include \"imgui_internal.h\"\n   36  \n   37: #include <stdio.h>      // vsnprintf, sscanf, printf\n   38  #if !defined(alloca)\n   39  #if defined(__GLIBC__) || defined(__sun) || defined(__APPLE__) || defined(__NEWLIB__)\n   ..\n   53  #pragma warning (disable: 4127) // condition expression is constant\n   54  #pragma warning (disable: 4505) // unreferenced local function has been removed (stb stuff)\n   55: #pragma warning (disable: 4996) // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen\n   56  #endif\n   57  \n   ..\n   69  #pragma clang diagnostic ignored \"-Wcomma\"                          // warning: possible misuse of comma operator here\n   70  #pragma clang diagnostic ignored \"-Wreserved-id-macro\"              // warning: macro name is a reserved identifier\n   71: #pragma clang diagnostic ignored \"-Wdouble-promotion\"               // warning: implicit conversion from 'float' to 'double' when passing argument to function  // using printf() is a misery with this as C++ va_arg ellipsis changes float to double.\n   72  #pragma clang diagnostic ignored \"-Wimplicit-int-float-conversion\"  // warning: implicit conversion from 'xxx' to 'float' may lose precision\n   73  #elif defined(__GNUC__)\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui_impl_dx9.cpp:\n   21  //#define IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS         // [Win32] Don't implement default IME handler. Won't use and link with ImmGetContext/ImmSetCompositionWindow.\n   22  //#define IMGUI_DISABLE_WIN32_FUNCTIONS                     // [Win32] Won't use and link with any Win32 function.\n   23: //#define IMGUI_DISABLE_FORMAT_STRING_FUNCTIONS             // Don't implement ImFormatString/ImFormatStringV so you can implement them yourself if you don't want to link with vsnprintf.\n   24  //#define IMGUI_DISABLE_MATH_FUNCTIONS                      // Don't implement ImFabs/ImSqrt/ImPow/ImFmod/ImCos/ImSin/ImAcos/ImAtan2 wrapper so you can implement them yourself. Declare your prototypes in imconfig.h.\n   25  //#define IMGUI_DISABLE_DEFAULT_ALLOCATORS                  // Don't implement default allocators calling malloc()/free() to avoid linking with them. You will need to call ImGui::SetAllocatorFunctions().\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui_impl_opengl3.cpp:\n  466      glGetShaderiv(handle, GL_INFO_LOG_LENGTH, &log_length);\n  467      if ((GLboolean)status == GL_FALSE)\n  468:         fprintf(stderr, \"ERROR: ImGui_ImplOpenGL3_CreateDeviceObjects: failed to compile %s!\\n\", desc);\n  469      if (log_length > 1)\n  470      {\n  ...\n  472          buf.resize((int)(log_length + 1));\n  473          glGetShaderInfoLog(handle, log_length, NULL, (GLchar*)buf.begin());\n  474:         fprintf(stderr, \"%s\\n\", buf.begin());\n  475      }\n  476      return (GLboolean)status == GL_TRUE;\n  ...\n  484      glGetProgramiv(handle, GL_INFO_LOG_LENGTH, &log_length);\n  485      if ((GLboolean)status == GL_FALSE)\n  486:         fprintf(stderr, \"ERROR: ImGui_ImplOpenGL3_CreateDeviceObjects: failed to link %s! (with GLSL '%s')\\n\", desc, g_GlslVersionString);\n  487      if (log_length > 1)\n  488      {\n  ...\n  490          buf.resize((int)(log_length + 1));\n  491          glGetProgramInfoLog(handle, log_length, NULL, (GLchar*)buf.begin());\n  492:         fprintf(stderr, \"%s\\n\", buf.begin());\n  493      }\n  494      return (GLboolean)status == GL_TRUE;\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui_impl_win32.cpp:\n   12  //#define IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS         // [Win32] Don't implement default IME handler. Won't use and link with ImmGetContext/ImmSetCompositionWindow.\n   13  //#define IMGUI_DISABLE_WIN32_FUNCTIONS                     // [Win32] Won't use and link with any Win32 function.\n   14: //#define IMGUI_DISABLE_FORMAT_STRING_FUNCTIONS             // Don't implement ImFormatString/ImFormatStringV so you can implement them yourself if you don't want to link with vsnprintf.\n   15  //#define IMGUI_DISABLE_MATH_FUNCTIONS                      // Don't implement ImFabs/ImSqrt/ImPow/ImFmod/ImCos/ImSin/ImAcos/ImAtan2 wrapper so you can implement them yourself. Declare your prototypes in imconfig.h.\n   16  //#define IMGUI_DISABLE_DEFAULT_ALLOCATORS                  // Don't implement default allocators calling malloc()/free() to avoid linking with them. You will need to call ImGui::SetAllocatorFunctions().\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui_internal.h:\n  169  // Debug Logging\n  170  #ifndef IMGUI_DEBUG_LOG\n  171: #define IMGUI_DEBUG_LOG(_FMT,...)       printf(\"[%05d] \" _FMT, GImGui->FrameCount, __VA_ARGS__)\n  172  #endif\n  173  \n  ...\n  805  {\n  806      size_t      Size;           // Size in byte\n  807:     const char* PrintFmt;       // Default printf format for the type\n  808      const char* ScanFmt;        // Default scanf format for the type\n  809  };\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui_widgets.cpp:\n   51  #ifdef _MSC_VER\n   52  #pragma warning (disable: 4127)     // condition expression is constant\n   53: #pragma warning (disable: 4996)     // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen\n   54  #if defined(_MSC_VER) && _MSC_VER >= 1922 // MSVC 2019 16.2 or later\n   55  #pragma warning (disable: 5054)     // operator '|': deprecated between enumerations of different types\n   ..\n   68  #pragma clang diagnostic ignored \"-Wsign-conversion\"                // warning: implicit conversion changes signedness\n   69  #pragma clang diagnostic ignored \"-Wzero-as-null-pointer-constant\"  // warning: zero as null pointer constant                    // some standard header variations use #define NULL 0\n   70: #pragma clang diagnostic ignored \"-Wdouble-promotion\"               // warning: implicit conversion from 'float' to 'double' when passing argument to function  // using printf() is a misery with this as C++ va_arg ellipsis changes float to double.\n   71  #pragma clang diagnostic ignored \"-Wenum-enum-conversion\"           // warning: bitwise operation between different enumeration types ('XXXFlags_' and 'XXXFlagsPrivate_')\n   72  #pragma clang diagnostic ignored \"-Wdeprecated-enum-enum-conversion\"// warning: bitwise operation between different enumeration types ('XXXFlags_' and 'XXXFlagsPrivate_') is deprecated\n   ..\n 1718          return \"%d\";\n 1719      const char* fmt_start = ImParseFormatFindStart(fmt);    // Find % (if any, and ignore %%)\n 1720:     const char* fmt_end = ImParseFormatFindEnd(fmt_start);  // Find end of format specifier, which itself is an exercise of confidence/recklessness (because snprintf is dependent on libc or user).\n 1721      if (fmt_end > fmt_start&& fmt_end[-1] == 'f')\n 1722      {\n ....\n 1876      else if (data_type == ImGuiDataType_Double)\n 1877      {\n 1878:         format = \"%lf\"; // scanf differentiate float/double unlike printf which forces everything to double because of ellipsis\n 1879          double* v = (double*)p_data;\n 1880          double arg0f = *v, arg1f = 0.0;\n ....\n 2165      // Default format string when passing NULL\n 2166      if (format == NULL)\n 2167:         format = DataTypeGetInfo(data_type)->PrintFmt;\n 2168      else if (data_type == ImGuiDataType_S32 && strcmp(format, \"%d\") != 0) // (FIXME-LEGACY: Patch old \"%.0f\" format string to use \"%d\", read function more details.)\n 2169          format = PatchFormatStringFloatToInt(format);\n ....\n 2619      // Default format string when passing NULL\n 2620      if (format == NULL)\n 2621:         format = DataTypeGetInfo(data_type)->PrintFmt;\n 2622      else if (data_type == ImGuiDataType_S32 && strcmp(format, \"%d\") != 0) // (FIXME-LEGACY: Patch old \"%.0f\" format string to use \"%d\", read function more details.)\n 2623          format = PatchFormatStringFloatToInt(format);\n ....\n 2782      // Default format string when passing NULL\n 2783      if (format == NULL)\n 2784:         format = DataTypeGetInfo(data_type)->PrintFmt;\n 2785      else if (data_type == ImGuiDataType_S32 && strcmp(format, \"%d\") != 0) // (FIXME-LEGACY: Patch old \"%.0f\" format string to use \"%d\", read function more details.)\n 2786          format = PatchFormatStringFloatToInt(format);\n ....\n 2868  const char* ImParseFormatFindEnd(const char* fmt)\n 2869  {\n 2870:     // Printf/scanf types modifiers: I/L/h/j/l/t/w/z. Other uppercase letters qualify as types aka end of the format.\n 2871      if (fmt[0] != '%')\n 2872          return fmt;\n ....\n 3005  \n 3006      if (format == NULL)\n 3007:         format = DataTypeGetInfo(data_type)->PrintFmt;\n 3008  \n 3009      char buf[64];\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\Main.cpp:\n    9  //#define IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS         // [Win32] Don't implement default IME handler. Won't use and link with ImmGetContext/ImmSetCompositionWindow.\n   10  //#define IMGUI_DISABLE_WIN32_FUNCTIONS                     // [Win32] Won't use and link with any Win32 function.\n   11: //#define IMGUI_DISABLE_FORMAT_STRING_FUNCTIONS             // Don't implement ImFormatString/ImFormatStringV so you can implement them yourself if you don't want to link with vsnprintf.\n   12  //#define IMGUI_DISABLE_MATH_FUNCTIONS                      // Don't implement ImFabs/ImSqrt/ImPow/ImFmod/ImCos/ImSin/ImAcos/ImAtan2 wrapper so you can implement them yourself. Declare your prototypes in imconfig.h.\n   13  //#define IMGUI_DISABLE_DEFAULT_ALLOCATORS                  // Don't implement default allocators calling malloc()/free() to avoid linking with them. You will need to call ImGui::SetAllocatorFunctions().\n   ..\n  438  \tif (!dc_window) {\n  439  \t\t// >TODO error handling\n  440: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n  441  \t\treturn;\n  442  \t}\n  ...\n  774  \t\t\tlogs.lock_and_write(entry);\n  775  \n  776: \t\t\tprintf(\"Opening\\n\");\n  777  \t\t\topened[(HWND)w_param] = get_microseconds_epoch();\n  778  \t\t\tbreak;\n  ...\n  962  \tif (!dc) {\n  963  \t\t// >TODO error handling\n  964: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n  965  \t\treturn std::nullopt;\n  966  \t}\n  ...\n  980  \tif (!suggested_pixel_format) {\n  981  \t\t// >TODO error handling\n  982: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n  983  \t\treturn std::nullopt;\n  984  \t}\n  ...\n  989  \tif (!result) {\n  990  \t\t// >TODO error handling\n  991: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n  992  \t\treturn std::nullopt;\n  993  \t}\n  ...\n  996  \tif (!SetPixelFormat(dc, suggested_pixel_format, &pixel_format)) {\n  997  \t\t// >TODO error handling\n  998: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n  999  \t\treturn std::nullopt;\n 1000  \t}\n ....\n 1005  \tif (!gl_context) {\n 1006  \t\t// >TODO error handling\n 1007: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n 1008  \t\treturn std::nullopt;\n 1009  \t}\n ....\n 1012  \t\twglDeleteContext(gl_context);\n 1013  \n 1014: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n 1015  \t\treturn std::nullopt;\n 1016  \t}\n ....\n 1019  \tglewExperimental = true; // Needed for core profile\n 1020  \tif (glewInit() != GLEW_OK) {\n 1021: \t\tprintf(\"Can't init glew\\n\");\n 1022  \t\treturn gl_context;\n 1023  \t}\n ....\n 1034  \tif (!gl) {\n 1035  \t\tauto err = glGetError();\n 1036: \t\tprintf(\"%s\", std::to_string(err).c_str());\n 1037  \n 1038  \t\treturn gl_context;\n ....\n 1053  \t// >TODO error handling\n 1054  \tif (!wglDeleteContext(gl_context)) {\n 1055: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n 1056  \t}\n 1057  }\n ....\n 1080  \n 1081  \tif (shared.mail_slot == INVALID_HANDLE_VALUE) {\n 1082: \t\tfprintf(stderr, \"Error creating mail slot\\n\");\n 1083  \t}\n 1084  }\n ....\n 1111  \n 1112  \tif (!fResult) {\n 1113: \t    fprintf(stderr, \"GetMailslotInfo failed with %d.\\n\", GetLastError()); \n 1114  \t    return std::nullopt;\n 1115  \t}\n ....\n 1132  \n 1133  \tif (!fResult) {\n 1134: \t    fprintf(stderr, \"ReadFile failed with %d.\\n\", GetLastError());\n 1135  \t    GlobalFree((HGLOBAL) lpszBuffer);\n 1136  \t    return std::nullopt;\n ....\n 1151  \n 1152  \tif (!fResult) {\n 1153: \t    fprintf(stderr, \"GetMailslotInfo failed (%d)\\n\", GetLastError());\n 1154  \t    return std::nullopt;\n 1155  \t}\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\GL\\glewinfo.c:\n   86  {\n   87    unsigned int i;\n   88:   fprintf(f, \"\\n%s:\", name);\n   89:   for (i=0; i<62-strlen(name); i++) fprintf(f, \" \");\n   90:   fprintf(f, \"%s \", def1 ? \"OK\" : \"MISSING\");\n   91    if (def1 != def2)\n   92:     fprintf(f, \"[%s] \", def2 ? \"OK\" : \"MISSING\");\n   93    if (def1 != def3)\n   94:     fprintf(f, \"[%s]\\n\", def3 ? \"OK\" : \"MISSING\");\n   95    else\n   96:     fprintf(f, \"\\n\");\n   97:   for (i=0; i<strlen(name)+1; i++) fprintf(f, \"-\");\n   98:   fprintf(f, \"\\n\");\n   99    fflush(f);\n  100  }\n  ...\n  103  {\n  104    unsigned int i;\n  105:   fprintf(f, \"  %s:\", name);\n  106:   for (i=0; i<60-strlen(name); i++) fprintf(f, \" \");\n  107:   fprintf(f, \"%s\\n\", undefined ? \"MISSING\" : \"OK\");\n  108    fflush(f);\n  109  }\n  ...\n 16314    if (glewParseArgs(argc-1, argv+1, &params))\n 16315    {\n 16316:     fprintf(stderr, \"Usage: glewinfo \"\n 16317  #if defined(GLEW_OSMESA)\n 16318  #elif defined(GLEW_EGL)\n .....\n 16332    if (GL_TRUE == glewCreateContext(&params))\n 16333    {\n 16334:     fprintf(stderr, \"Error: glewCreateContext failed\\n\");\n 16335      glewDestroyContext();\n 16336      return 1;\n .....\n 16340    if (GLEW_OK != err)\n 16341    {\n 16342:     fprintf(stderr, \"Error [main]: glewInit failed: %s\\n\", glewGetErrorString(err));\n 16343      glewDestroyContext();\n 16344      return 1;\n .....\n 16349    if (!getString)\n 16350    {\n 16351:     fprintf(stderr, \"Error: eglGetProcAddress failed to fetch glGetString\\n\");\n 16352      glewDestroyContext();\n 16353      return 1;\n .....\n 16366    f = stdout;\n 16367  #endif\n 16368:   fprintf(f, \"---------------------------\\n\");\n 16369:   fprintf(f, \"    GLEW Extension Info\\n\");\n 16370:   fprintf(f, \"---------------------------\\n\\n\");\n 16371:   fprintf(f, \"GLEW version %s\\n\", glewGetString(GLEW_VERSION));\n 16372  #if defined(GLEW_OSMESA)\n 16373  #elif defined(GLEW_EGL)\n 16374  #elif defined(_WIN32)\n 16375:   fprintf(f, \"Reporting capabilities of pixelformat %d\\n\", params.pixelformat);\n 16376  #elif !defined(__APPLE__) || defined(GLEW_APPLE_GLX)\n 16377:   fprintf(f, \"Reporting capabilities of display %s, visual 0x%x\\n\",\n 16378      params.display == NULL ? getenv(\"DISPLAY\") : params.display, params.visual);\n 16379  #endif\n 16380  #if defined(GLEW_EGL)\n 16381:   fprintf(f, \"Running on a %s from %s\\n\",\n 16382      getString(GL_RENDERER), getString(GL_VENDOR));\n 16383:   fprintf(f, \"OpenGL version %s is supported\\n\", getString(GL_VERSION));\n 16384  #else\n 16385:   fprintf(f, \"Running on a %s from %s\\n\",\n 16386      glGetString(GL_RENDERER), glGetString(GL_VENDOR));\n 16387:   fprintf(f, \"OpenGL version %s is supported\\n\", glGetString(GL_VERSION));\n 16388  #endif\n 16389    glewInfo();\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\GL\\visualinfo.c:\n  110    {\n  111  #if defined(_WIN32)\n  112:     fprintf(stderr, \"Usage: visualinfo [-a] [-s] [-h] [-pf <id>]\\n\");\n  113:     fprintf(stderr, \"        -a: show all visuals\\n\");\n  114:     fprintf(stderr, \"        -s: display to stdout instead of visualinfo.txt\\n\");\n  115:     fprintf(stderr, \"        -pf <id>: use given pixelformat\\n\");\n  116:     fprintf(stderr, \"        -h: this screen\\n\");\n  117  #else\n  118:     fprintf(stderr, \"Usage: visualinfo [-h] [-display <display>] [-visual <id>]\\n\");\n  119:     fprintf(stderr, \"        -h: this screen\\n\");\n  120:     fprintf(stderr, \"        -display <display>: use given display\\n\");\n  121:     fprintf(stderr, \"        -visual <id>: use given visual\\n\");\n  122  #endif\n  123      return 1;\n  ...\n  129    if (GL_TRUE == CreateContext(&ctx))\n  130    {\n  131:     fprintf(stderr, \"Error: CreateContext failed\\n\");\n  132      DestroyContext(&ctx);\n  133      return 1;\n  ...\n  149    if (GLEW_OK != err)\n  150    {\n  151:     fprintf(stderr, \"Error [main]: glewInit failed: %s\\n\", glewGetErrorString(err));\n  152      DestroyContext(&ctx);\n  153      return 1;\n  ...\n  175    /* output header information */\n  176    /* OpenGL extensions */\n  177:   fprintf(file, \"OpenGL vendor string: %s\\n\", glGetString(GL_VENDOR));\n  178:   fprintf(file, \"OpenGL renderer string: %s\\n\", glGetString(GL_RENDERER));\n  179:   fprintf(file, \"OpenGL version string: %s\\n\", glGetString(GL_VERSION));\n  180:   fprintf(file, \"OpenGL extensions (GL_): \\n\");\n  181    PrintExtensions((const char*)glGetString(GL_EXTENSIONS));\n  182  \n  183  #ifndef GLEW_NO_GLU\n  184    /* GLU extensions */\n  185:   fprintf(file, \"GLU version string: %s\\n\", gluGetString(GLU_VERSION));\n  186:   fprintf(file, \"GLU extensions (GLU_): \\n\");\n  187    PrintExtensions((const char*)gluGetString(GLU_EXTENSIONS));\n  188  #endif\n  ...\n  196    if (WGLEW_ARB_extensions_string || WGLEW_EXT_extensions_string)\n  197    {\n  198:     fprintf(file, \"WGL extensions (WGL_): \\n\");\n  199      PrintExtensions(wglGetExtensionsStringARB ? \n  200                      (const char*)wglGetExtensionsStringARB(ctx.dc) :\n  ...\n  209  #else\n  210    /* GLX extensions */\n  211:   fprintf(file, \"GLX extensions (GLX_): \\n\");\n  212    PrintExtensions(glXQueryExtensionsString(glXGetCurrentDisplay(), \n  213                                             DefaultScreen(glXGetCurrentDisplay())));\n  ...\n  253      {\n  254        *p = t[i] = '\\0';\n  255:       fprintf(file, \"    %s\\n\", t);\n  256        p++;\n  257        i = (int)strlen(p);\n  ...\n  265    }\n  266    t[i] = '\\0';\n  267:   fprintf(file, \"    %s.\\n\", t);\n  268  }\n  269  \n  ...\n  349    {\n  350      /* print table header */\n  351:     fprintf(file, \" +-----+-------------------------+-----------------+----------+-----------------+----------+\\n\");\n  352:     fprintf(file, \" |     |          visual         |      color      | ax dp st |      accum      |   layer  |\\n\");\n  353:     fprintf(file, \" |  id | tp ac gd fm db sw st ms |  sz  r  g  b  a | bf th cl |  sz  r  g  b  a | ov un sw |\\n\");\n  354:     fprintf(file, \" +-----+-------------------------+-----------------+----------+-----------------+----------+\\n\");\n  355      /* loop through all the pixel formats */\n  356      for(i = 1; i <= maxpf; i++)\n  ...\n  366        /* print out the information for this visual */\n  367        /* visual id */\n  368:       fprintf(file, \" |% 4d | \", i);\n  369        /* visual type */\n  370        if (value[1])\n  371        {\n  372: \tif (WGLEW_ARB_pbuffer && value[n_pbuffer]) fprintf(file, \"wp \");\n  373: \telse fprintf(file, \"wn \");\n  374        }\n  375        else\n  376        {\n  377: \tif (value[2]) fprintf(file, \"bm \");\n  378: \telse if (WGLEW_ARB_pbuffer && value[n_pbuffer]) fprintf(file, \"pb \");\n  379        }\n  380        /* acceleration */\n  381:       fprintf(file, \"%s \", value[3] == WGL_FULL_ACCELERATION_ARB ? \"fu\" : \n  382  \t      value[3] == WGL_GENERIC_ACCELERATION_ARB ? \"ge\" :\n  383  \t      value[3] == WGL_NO_ACCELERATION_ARB ? \"no\" : \". \");\n  384        /* gdi support */\n  385:       fprintf(file, \" %c \", value[25] ? 'y' : '.');\n  386        /* format */\n  387:       if (WGLEW_NV_float_buffer && value[n_float]) fprintf(file, \" f \");\n  388:       else if (WGLEW_ATI_pixel_format_float && value[7] == WGL_TYPE_RGBA_FLOAT_ATI) fprintf(file, \" f \");\n  389:       else if (value[7] == WGL_TYPE_RGBA_ARB) fprintf(file, \" i \");\n  390:       else if (value[7] == WGL_TYPE_COLORINDEX_ARB) fprintf(file, \" c \");\n  391:       else if (value[7] == WGL_TYPE_RGBA_UNSIGNED_FLOAT_EXT) fprintf(file,\" p \");\n  392:       else fprintf(file,\" ? \");\n  393        /* double buffer */\n  394:       fprintf(file, \" %c \", value[5] ? 'y' : '.');\n  395        /* swap method */\n  396:       if (value[4] == WGL_SWAP_EXCHANGE_ARB) fprintf(file, \" x \");\n  397:       else if (value[4] == WGL_SWAP_COPY_ARB) fprintf(file, \" c \");\n  398:       else if (value[4] == WGL_SWAP_UNDEFINED_ARB) fprintf(file, \" . \");\n  399:       else fprintf(file, \" . \");\n  400        /* stereo */\n  401:       fprintf(file, \" %c \", value[6] ? 'y' : '.');\n  402        /* multisample */\n  403        if (value[24] > 0)\n  404: \tfprintf(file, \"%2d | \", value[24]);\n  405        else\n  406: \tfprintf(file, \" . | \");\n  407        /* color size */\n  408:       if (value[8]) fprintf(file, \"%3d \", value[8]);\n  409:       else fprintf(file, \"  . \");\n  410        /* red */\n  411:       if (value[9]) fprintf(file, \"%2d \", value[9]); \n  412:       else fprintf(file, \" . \");\n  413        /* green */\n  414:       if (value[10]) fprintf(file, \"%2d \", value[10]); \n  415:       else fprintf(file, \" . \");\n  416        /* blue */\n  417:       if (value[11]) fprintf(file, \"%2d \", value[11]);\n  418:       else fprintf(file, \" . \");\n  419        /* alpha */\n  420:       if (value[12]) fprintf(file, \"%2d | \", value[12]); \n  421:       else fprintf(file, \" . | \");\n  422        /* aux buffers */\n  423:       if (value[20]) fprintf(file, \"%2d \", value[20]);\n  424:       else fprintf(file, \" . \");\n  425        /* depth */\n  426:       if (value[18]) fprintf(file, \"%2d \", value[18]);\n  427:       else fprintf(file, \" . \");\n  428        /* stencil */\n  429:       if (value[19]) fprintf(file, \"%2d | \", value[19]);\n  430:       else fprintf(file, \" . | \");\n  431        /* accum size */\n  432:       if (value[13]) fprintf(file, \"%3d \", value[13]);\n  433:       else fprintf(file, \"  . \");\n  434        /* accum red */\n  435:       if (value[14]) fprintf(file, \"%2d \", value[14]);\n  436:       else fprintf(file, \" . \");\n  437        /* accum green */\n  438:       if (value[15]) fprintf(file, \"%2d \", value[15]);\n  439:       else fprintf(file, \" . \");\n  440        /* accum blue */\n  441:       if (value[16]) fprintf(file, \"%2d \", value[16]);\n  442:       else fprintf(file, \" . \");\n  443        /* accum alpha */\n  444:       if (value[17]) fprintf(file, \"%2d | \", value[17]);\n  445:       else fprintf(file, \" . | \");\n  446        /* overlay */\n  447:       if (value[21]) fprintf(file, \"%2d \", value[21]);\n  448:       else fprintf(file, \" . \");\n  449        /* underlay */\n  450:       if (value[22]) fprintf(file, \"%2d \", value[22]);\n  451:       else fprintf(file, \" . \");\n  452        /* layer swap */\n  453:       if (value[23]) fprintf(file, \"y \");\n  454:       else fprintf(file, \" . \");\n  455:       fprintf(file, \"|\\n\");\n  456      }\n  457      /* print table footer */\n  458:     fprintf(file, \" +-----+-------------------------+-----------------+----------+-----------------+----------+\\n\");\n  459:     fprintf(file, \" |     |          visual         |      color      | ax dp st |      accum      |   layer  |\\n\");\n  460:     fprintf(file, \" |  id | tp ac gd fm db sw st ms |  sz  r  g  b  a | bf th cl |  sz  r  g  b  a | ov un sw |\\n\");\n  461:     fprintf(file, \" +-----+-------------------------+-----------------+----------+-----------------+----------+\\n\");\n  462    }\n  463    else /* verbose */\n  464    {\n  465  #if 0\n  466:     fprintf(file, \"\\n\");\n  467      /* loop through all the pixel formats */\n  468      for(i = 1; i <= maxpf; i++)\n  ...\n  472        if(!(pfd.dwFlags & PFD_SUPPORT_OPENGL)\n  473  \t || (drawableonly && !(pfd.dwFlags & PFD_DRAW_TO_WINDOW))) continue;\n  474:       fprintf(file, \"Visual ID: %2d  depth=%d  class=%s\\n\", i, pfd.cDepthBits, \n  475  \t     pfd.cColorBits <= 8 ? \"PseudoColor\" : \"TrueColor\");\n  476:       fprintf(file, \"    bufferSize=%d level=%d renderType=%s doubleBuffer=%d stereo=%d\\n\", pfd.cColorBits, pfd.bReserved, pfd.iPixelType == PFD_TYPE_RGBA ? \"rgba\" : \"ci\", pfd.dwFlags & PFD_DOUBLEBUFFER, pfd.dwFlags & PFD_STEREO);\n  477:       fprintf(file, \"    generic=%d generic accelerated=%d\\n\", (pfd.dwFlags & PFD_GENERIC_FORMAT) == PFD_GENERIC_FORMAT, (pfd.dwFlags & PFD_GENERIC_ACCELERATED) == PFD_GENERIC_ACCELERATED);\n  478:       fprintf(file, \"    rgba: redSize=%d greenSize=%d blueSize=%d alphaSize=%d\\n\", pfd.cRedBits, pfd.cGreenBits, pfd.cBlueBits, pfd.cAlphaBits);\n  479:       fprintf(file, \"    auxBuffers=%d depthSize=%d stencilSize=%d\\n\", pfd.cAuxBuffers, pfd.cDepthBits, pfd.cStencilBits);\n  480:       fprintf(file, \"    accum: redSize=%d greenSize=%d blueSize=%d alphaSize=%d\\n\", pfd.cAccumRedBits, pfd.cAccumGreenBits, pfd.cAccumBlueBits, pfd.cAccumAlphaBits);\n  481:       fprintf(file, \"    multiSample=%d multisampleBuffers=%d\\n\", 0, 0);\n  482:       fprintf(file, \"    Opaque.\\n\");\n  483      }\n  484  #endif\n  ...\n  498    if (!verbose)\n  499    {\n  500:     fprintf(file, \"-----------------------------------------------------------------------------\\n\");\n  501:     fprintf(file, \"   visual   x  bf  lv rg d st ge ge  r  g  b a  ax dp st   accum buffs    ms \\n\");\n  502:     fprintf(file, \" id  dep tp sp sz  l  ci b ro ne ac sz sz sz sz bf th cl  sz  r  g  b  a ns b\\n\");\n  503:     fprintf(file, \"-----------------------------------------------------------------------------\\n\");\n  504  \n  505      /* loop through all the pixel formats */\n  ...\n  527        */\n  528        /* print out the information for this pixel format */\n  529:       fprintf(file, \"0x%02x \", i);\n  530:       fprintf(file, \"%3d \", pfd.cColorBits);\n  531:       if(pfd.dwFlags & PFD_DRAW_TO_WINDOW) fprintf(file, \"wn \");\n  532:       else if(pfd.dwFlags & PFD_DRAW_TO_BITMAP) fprintf(file, \"bm \");\n  533:       else fprintf(file, \"pb \");\n  534        /* should find transparent pixel from LAYERPLANEDESCRIPTOR */\n  535:       fprintf(file, \" . \"); \n  536:       fprintf(file, \"%3d \", pfd.cColorBits);\n  537        /* bReserved field indicates number of over/underlays */\n  538:       if(pfd.bReserved) fprintf(file, \" %d \", pfd.bReserved);\n  539:       else fprintf(file, \" . \"); \n  540:       fprintf(file, \" %c \", pfd.iPixelType == PFD_TYPE_RGBA ? 'r' : 'c');\n  541:       fprintf(file, \"%c \", pfd.dwFlags & PFD_DOUBLEBUFFER ? 'y' : '.');\n  542:       fprintf(file, \" %c \", pfd.dwFlags & PFD_STEREO ? 'y' : '.');\n  543        /* added: */\n  544:       fprintf(file, \" %c \", pfd.dwFlags & PFD_GENERIC_FORMAT ? 'y' : '.');\n  545:       fprintf(file, \" %c \", pfd.dwFlags & PFD_GENERIC_ACCELERATED ? 'y' : '.');\n  546        if(pfd.cRedBits && pfd.iPixelType == PFD_TYPE_RGBA) \n  547: \tfprintf(file, \"%2d \", pfd.cRedBits);\n  548:       else fprintf(file, \" . \");\n  549        if(pfd.cGreenBits && pfd.iPixelType == PFD_TYPE_RGBA) \n  550: \tfprintf(file, \"%2d \", pfd.cGreenBits);\n  551:       else fprintf(file, \" . \");\n  552        if(pfd.cBlueBits && pfd.iPixelType == PFD_TYPE_RGBA) \n  553: \tfprintf(file, \"%2d \", pfd.cBlueBits);\n  554:       else fprintf(file, \" . \");\n  555        if(pfd.cAlphaBits && pfd.iPixelType == PFD_TYPE_RGBA) \n  556: \tfprintf(file, \"%2d \", pfd.cAlphaBits);\n  557:       else fprintf(file, \" . \");\n  558:       if(pfd.cAuxBuffers)     fprintf(file, \"%2d \", pfd.cAuxBuffers);\n  559:       else fprintf(file, \" . \");\n  560:       if(pfd.cDepthBits)      fprintf(file, \"%2d \", pfd.cDepthBits);\n  561:       else fprintf(file, \" . \");\n  562:       if(pfd.cStencilBits)    fprintf(file, \"%2d \", pfd.cStencilBits);\n  563:       else fprintf(file, \" . \");\n  564:       if(pfd.cAccumBits)   fprintf(file, \"%3d \", pfd.cAccumBits);\n  565:       else fprintf(file, \"  . \");\n  566:       if(pfd.cAccumRedBits)   fprintf(file, \"%2d \", pfd.cAccumRedBits);\n  567:       else fprintf(file, \" . \");\n  568:       if(pfd.cAccumGreenBits) fprintf(file, \"%2d \", pfd.cAccumGreenBits);\n  569:       else fprintf(file, \" . \");\n  570:       if(pfd.cAccumBlueBits)  fprintf(file, \"%2d \", pfd.cAccumBlueBits);\n  571:       else fprintf(file, \" . \");\n  572:       if(pfd.cAccumAlphaBits) fprintf(file, \"%2d \", pfd.cAccumAlphaBits);\n  573:       else fprintf(file, \" . \");\n  574        /* no multisample in win32 */\n  575:       fprintf(file, \" . .\\n\");\n  576      }\n  577      /* print table footer */\n  578:     fprintf(file, \"-----------------------------------------------------------------------------\\n\");\n  579:     fprintf(file, \"   visual   x  bf  lv rg d st ge ge  r  g  b a  ax dp st   accum buffs    ms \\n\");\n  580:     fprintf(file, \" id  dep tp sp sz  l  ci b ro ne ac sz sz sz sz bf th cl  sz  r  g  b  a ns b\\n\");\n  581:     fprintf(file, \"-----------------------------------------------------------------------------\\n\");\n  582    }\n  583    else /* verbose */\n  584    {\n  585:     fprintf(file, \"\\n\");\n  586      /* loop through all the pixel formats */\n  587      for(i = 1; i <= maxpf; i++)\n  ...\n  591        if(!(pfd.dwFlags & PFD_SUPPORT_OPENGL)\n  592  \t || (drawableonly && !(pfd.dwFlags & PFD_DRAW_TO_WINDOW))) continue;\n  593:       fprintf(file, \"Visual ID: %2d  depth=%d  class=%s\\n\", i, pfd.cDepthBits, \n  594  \t     pfd.cColorBits <= 8 ? \"PseudoColor\" : \"TrueColor\");\n  595:       fprintf(file, \"    bufferSize=%d level=%d renderType=%s doubleBuffer=%ld stereo=%ld\\n\", pfd.cColorBits, pfd.bReserved, pfd.iPixelType == PFD_TYPE_RGBA ? \"rgba\" : \"ci\", pfd.dwFlags & PFD_DOUBLEBUFFER, pfd.dwFlags & PFD_STEREO);\n  596:       fprintf(file, \"    generic=%d generic accelerated=%d\\n\", (pfd.dwFlags & PFD_GENERIC_FORMAT) == PFD_GENERIC_FORMAT, (pfd.dwFlags & PFD_GENERIC_ACCELERATED) == PFD_GENERIC_ACCELERATED);\n  597:       fprintf(file, \"    rgba: redSize=%d greenSize=%d blueSize=%d alphaSize=%d\\n\", pfd.cRedBits, pfd.cGreenBits, pfd.cBlueBits, pfd.cAlphaBits);\n  598:       fprintf(file, \"    auxBuffers=%d depthSize=%d stencilSize=%d\\n\", pfd.cAuxBuffers, pfd.cDepthBits, pfd.cStencilBits);\n  599:       fprintf(file, \"    accum: redSize=%d greenSize=%d blueSize=%d alphaSize=%d\\n\", pfd.cAccumRedBits, pfd.cAccumGreenBits, pfd.cAccumBlueBits, pfd.cAccumAlphaBits);\n  600:       fprintf(file, \"    multiSample=%d multisampleBuffers=%d\\n\", 0, 0);\n  601:       fprintf(file, \"    Opaque.\\n\");\n  602      }\n  603    }\n  ...\n  628    {\n  629      aglDescribePixelFormat(pf, GL_RGBA, &value);\n  630:     fprintf(stderr, \"%d\\n\", value);\n  631      pf = aglNextPixelFormat(pf);\n  632    }\n  ...\n  660      {\n  661        /* print table header */\n  662:       fprintf(file, \" +-----+-------------------------+-----------------+----------+-------------+-------+------+\\n\");\n  663:       fprintf(file, \" |     |        visual           |      color      | ax dp st |    accum    |   ms  |  cav |\\n\");\n  664:       fprintf(file, \" |  id | tp xr cl fm db st lv xp |  sz  r  g  b  a | bf th cl | r  g  b  a  | ns  b |  eat |\\n\");\n  665:       fprintf(file, \" +-----+-------------------------+-----------------+----------+-------------+-------+------+\\n\");\n  666        /* loop through all the fbcs */\n  667        for (i=0; i<n_fbc; i++)\n  ...\n  672          if (ret != Success)\n  673          {\n  674:           fprintf(file, \"|  ?  |\");\n  675          }\n  676          else\n  677          {\n  678:           fprintf(file, \" |% 4d | \", value);\n  679          }\n  680          /* visual type */\n  ...\n  682          if (ret != Success)\n  683          {\n  684:           fprintf(file, \" ? \");\n  685          }\n  686          else\n  ...\n  690              if (value & GLX_PBUFFER_BIT)\n  691              {\n  692:               fprintf(file, \"wp \");\n  693              }\n  694              else\n  695              {\n  696:               fprintf(file, \"wn \");\n  697              }\n  698            }\n  ...\n  701              if (value & GLX_PBUFFER_BIT)\n  702              {\n  703:               fprintf(file, \"pb \");\n  704              }\n  705              else if (value & GLX_PIXMAP_BIT)\n  706              {\n  707:               fprintf(file, \"pm \");\n  708              }\n  709              else\n  710              {\n  711:               fprintf(file, \" ? \");\n  712              }\n  713            }\n  ...\n  717          if (ret != Success)\n  718          {\n  719:           fprintf(file, \" ? \");\n  720          }\n  721          else\n  722          {\n  723:           fprintf(file, value ? \" y \" : \" n \");\n  724          }\n  725          /* class */\n  ...\n  727          if (ret != Success)\n  728          {\n  729:           fprintf(file, \" ? \");\n  730          }\n  731          else\n  732          {\n  733            if (GLX_TRUE_COLOR == value)\n  734:             fprintf(file, \"tc \");\n  735            else if (GLX_DIRECT_COLOR == value)\n  736:             fprintf(file, \"dc \");\n  737            else if (GLX_PSEUDO_COLOR == value)\n  738:             fprintf(file, \"pc \");\n  739            else if (GLX_STATIC_COLOR == value)\n  740:             fprintf(file, \"sc \");\n  741            else if (GLX_GRAY_SCALE == value)\n  742:             fprintf(file, \"gs \");\n  743            else if (GLX_STATIC_GRAY == value)\n  744:             fprintf(file, \"sg \");\n  745            else if (GLX_X_VISUAL_TYPE == value)\n  746:             fprintf(file, \" . \");\n  747            else\n  748:             fprintf(file, \" ? \");\n  749          }\n  750          /* format */\n  ...\n  752          if (ret != Success)\n  753          {\n  754:           fprintf(file, \" ? \");\n  755          }\n  756          else\n  ...\n  762              if (Success == ret2 && GL_TRUE == value2)\n  763              {\n  764:               fprintf(file, \" f \");\n  765              }\n  766              else if (value & GLX_RGBA_BIT)\n  767:               fprintf(file, \" i \");\n  768              else if (value & GLX_COLOR_INDEX_BIT)\n  769:               fprintf(file, \" c \");\n  770              else\n  771:               fprintf(file, \" ? \");\n  772            }\n  773            else\n  774            {\n  775              if (value & GLX_RGBA_FLOAT_ATI_BIT)\n  776:               fprintf(file, \" f \");\n  777              else if (value & GLX_RGBA_BIT)\n  778:               fprintf(file, \" i \");\n  779              else if (value & GLX_COLOR_INDEX_BIT)\n  780:               fprintf(file, \" c \");\n  781              else\n  782:               fprintf(file, \" ? \");\n  783            }\n  784          }\n  785          /* double buffer */\n  786          ret = glXGetFBConfigAttrib(ctx->dpy, fbc[i], GLX_DOUBLEBUFFER, &value);\n  787:         fprintf(file, \" %c \", Success != ret ? '?' : (value ? 'y' : '.'));\n  788          /* stereo */\n  789          ret = glXGetFBConfigAttrib(ctx->dpy, fbc[i], GLX_STEREO, &value);\n  790:         fprintf(file, \" %c \", Success != ret ? '?' : (value ? 'y' : '.'));\n  791          /* level */\n  792          ret = glXGetFBConfigAttrib(ctx->dpy, fbc[i], GLX_LEVEL, &value);\n  793          if (Success != ret)\n  794          {\n  795:           fprintf(file, \" ? \");\n  796          }\n  797          else\n  798          {\n  799:           fprintf(file, \"%2d \", value);\n  800          }\n  801          /* transparency */\n  ...\n  803          if (Success != ret)\n  804          {\n  805:           fprintf(file, \" ? | \");\n  806          }\n  807          else\n  808          {\n  809            if (GLX_TRANSPARENT_RGB == value)\n  810:             fprintf(file, \" r | \");\n  811            else if (GLX_TRANSPARENT_INDEX == value)\n  812:             fprintf(file, \" i | \");\n  813            else if (GLX_NONE == value)\n  814:             fprintf(file, \" . | \");\n  815            else\n  816:             fprintf(file, \" ? | \");\n  817          }\n  818          /* color size */\n  ...\n  820          if (Success != ret)\n  821          {\n  822:           fprintf(file, \"  ? \");\n  823          }\n  824          else\n  825          {\n  826            if (value)\n  827:             fprintf(file, \"%3d \", value);\n  828            else\n  829:             fprintf(file, \"  . \");\n  830          }\n  831          /* red size */\n  ...\n  833          if (Success != ret)\n  834          {\n  835:           fprintf(file, \" ? \");\n  836          }\n  837          else\n  838          {\n  839            if (value)\n  840:             fprintf(file, \"%2d \", value);\n  841            else\n  842:             fprintf(file, \" . \");\n  843          }\n  844          /* green size */\n  ...\n  846          if (Success != ret)\n  847          {\n  848:           fprintf(file, \" ? \");\n  849          }\n  850          else\n  851          {\n  852            if (value)\n  853:             fprintf(file, \"%2d \", value);\n  854            else\n  855:             fprintf(file, \" . \");\n  856          }\n  857          /* blue size */\n  ...\n  859          if (Success != ret)\n  860          {\n  861:           fprintf(file, \" ? \");\n  862          }\n  863          else\n  864          {\n  865            if (value)\n  866:             fprintf(file, \"%2d \", value);\n  867            else\n  868:             fprintf(file, \" . \");\n  869          }\n  870          /* alpha size */\n  ...\n  872          if (Success != ret)\n  873          {\n  874:           fprintf(file, \" ? | \");\n  875          }\n  876          else\n  877          {\n  878            if (value)\n  879:             fprintf(file, \"%2d | \", value);\n  880            else\n  881:             fprintf(file, \" . | \");\n  882          }\n  883          /* aux buffers */\n  ...\n  885          if (Success != ret)\n  886          {\n  887:           fprintf(file, \" ? \");\n  888          }\n  889          else\n  890          {\n  891            if (value)\n  892:             fprintf(file, \"%2d \", value);\n  893            else\n  894:             fprintf(file, \" . \");\n  895          }\n  896          /* depth size */\n  ...\n  898          if (Success != ret)\n  899          {\n  900:           fprintf(file, \" ? \");\n  901          }\n  902          else\n  903          {\n  904            if (value)\n  905:             fprintf(file, \"%2d \", value);\n  906            else\n  907:             fprintf(file, \" . \");\n  908          }\n  909          /* stencil size */\n  ...\n  911          if (Success != ret)\n  912          {\n  913:           fprintf(file, \" ? | \");\n  914          }\n  915          else\n  916          {\n  917            if (value)\n  918:             fprintf(file, \"%2d | \", value);\n  919            else\n  920:             fprintf(file, \" . | \");\n  921          }\n  922          /* accum red size */\n  ...\n  924          if (Success != ret)\n  925          {\n  926:           fprintf(file, \" ? \");\n  927          }\n  928          else\n  929          {\n  930            if (value)\n  931:             fprintf(file, \"%2d \", value);\n  932            else\n  933:             fprintf(file, \" . \");\n  934          }\n  935          /* accum green size */\n  ...\n  937          if (Success != ret)\n  938          {\n  939:           fprintf(file, \" ? \");\n  940          }\n  941          else\n  942          {\n  943            if (value)\n  944:             fprintf(file, \"%2d \", value);\n  945            else\n  946:             fprintf(file, \" . \");\n  947          }\n  948          /* accum blue size */\n  ...\n  950          if (Success != ret)\n  951          {\n  952:           fprintf(file, \" ? \");\n  953          }\n  954          else\n  955          {\n  956            if (value)\n  957:             fprintf(file, \"%2d \", value);\n  958            else\n  959:             fprintf(file, \" . \");\n  960          }\n  961          /* accum alpha size */\n  ...\n  963          if (Success != ret)\n  964          {\n  965:           fprintf(file, \" ? | \");\n  966          }\n  967          else\n  968          {\n  969            if (value)\n  970:             fprintf(file, \"%2d | \", value);\n  971            else\n  972:             fprintf(file, \" . | \");\n  973          }\n  974          /* multisample */\n  ...\n  976          if (Success != ret)\n  977          {\n  978:           fprintf(file, \" ? \");\n  979          }\n  980          else\n  981          {\n  982:           fprintf(file, \"%2d \", value);\n  983          }\n  984          ret = glXGetFBConfigAttrib(ctx->dpy, fbc[i], GLX_SAMPLE_BUFFERS, &value);\n  985          if (Success != ret)\n  986          {\n  987:           fprintf(file, \" ? | \");\n  988          }\n  989          else\n  990          {\n  991:           fprintf(file, \"%2d | \", value);\n  992          }\n  993          /* caveat */\n  ...\n  995          if (Success != ret)\n  996          {\n  997:           fprintf(file, \"???? |\");\n  998          }\n  999          else\n 1000          {\n 1001            if (GLX_NONE == value)\n 1002:             fprintf(file, \"none |\\n\");\n 1003            else if (GLX_SLOW_CONFIG == value)\n 1004:             fprintf(file, \"slow |\\n\");\n 1005            else if (GLX_NON_CONFORMANT_CONFIG == value)\n 1006:             fprintf(file, \"ncft |\\n\");\n 1007            else\n 1008:             fprintf(file, \"???? |\\n\");\n 1009          }\n 1010        }\n 1011        /* print table footer */\n 1012:       fprintf(file, \" +-----+-------------------------+-----------------+----------+-------------+-------+------+\\n\");\n 1013:       fprintf(file, \" |  id | tp xr cl fm db st lv xp |  sz  r  g  b  a | bf th cl | r  g  b  a  | ns  b |  eat |\\n\");\n 1014:       fprintf(file, \" |     |        visual           |      color      | ax dp st |    accum    |   ms  |  cav |\\n\");\n 1015:       fprintf(file, \" +-----+-------------------------+-----------------+----------+-------------+-------+------+\\n\");\n 1016      }\n 1017    }\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\Main.cpp:\n    9  //#define IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS         // [Win32] Don't implement default IME handler. Won't use and link with ImmGetContext/ImmSetCompositionWindow.\n   10  //#define IMGUI_DISABLE_WIN32_FUNCTIONS                     // [Win32] Won't use and link with any Win32 function.\n   11: //#define IMGUI_DISABLE_FORMAT_STRING_FUNCTIONS             // Don't implement ImFormatString/ImFormatStringV so you can implement them yourself if you don't want to link with vsnprintf.\n   12  //#define IMGUI_DISABLE_MATH_FUNCTIONS                      // Don't implement ImFabs/ImSqrt/ImPow/ImFmod/ImCos/ImSin/ImAcos/ImAtan2 wrapper so you can implement them yourself. Declare your prototypes in imconfig.h.\n   13  //#define IMGUI_DISABLE_DEFAULT_ALLOCATORS                  // Don't implement default allocators calling malloc()/free() to avoid linking with them. You will need to call ImGui::SetAllocatorFunctions().\n   ..\n  406  \tif (!dc_window) {\n  407  \t\t// >TODO error handling\n  408: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n  409  \t\treturn;\n  410  \t}\n  ...\n  957  \tif (!dc) {\n  958  \t\t// >TODO error handling\n  959: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n  960  \t\treturn std::nullopt;\n  961  \t}\n  ...\n  975  \tif (!suggested_pixel_format) {\n  976  \t\t// >TODO error handling\n  977: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n  978  \t\treturn std::nullopt;\n  979  \t}\n  ...\n  984  \tif (!result) {\n  985  \t\t// >TODO error handling\n  986: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n  987  \t\treturn std::nullopt;\n  988  \t}\n  ...\n  991  \tif (!SetPixelFormat(dc, suggested_pixel_format, &pixel_format)) {\n  992  \t\t// >TODO error handling\n  993: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n  994  \t\treturn std::nullopt;\n  995  \t}\n  ...\n 1000  \tif (!gl_context) {\n 1001  \t\t// >TODO error handling\n 1002: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n 1003  \t\treturn std::nullopt;\n 1004  \t}\n ....\n 1007  \t\twglDeleteContext(gl_context);\n 1008  \n 1009: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n 1010  \t\treturn std::nullopt;\n 1011  \t}\n ....\n 1014  \tglewExperimental = true; // Needed for core profile\n 1015  \tif (glewInit() != GLEW_OK) {\n 1016: \t\tprintf(\"Can't init glew\\n\");\n 1017  \t\treturn gl_context;\n 1018  \t}\n ....\n 1029  \tif (!gl) {\n 1030  \t\tauto err = glGetError();\n 1031: \t\tprintf(\"%s\", std::to_string(err).c_str());\n 1032  \n 1033  \t\treturn gl_context;\n ....\n 1047  void destroy_gl_context(HGLRC gl_context) noexcept {\n 1048  \t// >TODO error handling\n 1049: \tprintf(\"deleting... \");\n 1050  \tif (!wglDeleteContext(gl_context)) {\n 1051: \t\tprintf(\"%s\", get_last_error_message()->c_str());\n 1052  \t}\n 1053  }\n\nC:\\Users\\Tackwin\\Documents\\Code\\sans-peine\\Client\\src\\Main.cpp:\n  313  \n  314  \tif (state.mail_slot == INVALID_HANDLE_VALUE) {\n  315: \t\tfprintf(stderr, \"Error creating mail slot\\n\");\n  316  \t\tstd::terminate();\n  317  \t}\n  ...\n  344   \n  345      if (!fResult) {\n  346:         fprintf(stderr, \"GetMailslotInfo failed with %d.\\n\", GetLastError()); \n  347          return std::nullopt;\n  348      }\n  ...\n  365  \n  366      if (!fResult) {\n  367:         fprintf(stderr, \"ReadFile failed with %d.\\n\", GetLastError());\n  368          GlobalFree((HGLOBAL) lpszBuffer);\n  369          return std::nullopt;\n  ...\n  384  \n  385      if (!fResult) {\n  386:         fprintf(stderr, \"GetMailslotInfo failed (%d)\\n\", GetLastError());\n  387          return std::nullopt;\n  388      }\n\nC:\\Users\\Tackwin\\Documents\\Code\\sans-peine\\Simulation\\src\\Main.cpp:\n  328  \t);\n  329  \tif (state.mail_slot == INVALID_HANDLE_VALUE) {\n  330: \t\tfprintf(stderr, \"CreateFile failed with %d.\\n\", GetLastError());\n  331  \t\treturn;\n  332  \t}\n  ...\n  344  \t);\n  345  \n  346: \tif (!fResult) fprintf(stderr, \"Write failed with %d.\\n\", GetLastError());\n  347  }\n  348  \n\n354 matches across 18 files\n\n\nSearching 154 files for \"dirty\"\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\Event.cpp:\n  150  \tmodifications_since_save++;\n  151  \n  152: \tcache.dirty = true;\n  153  \n  154  \tcheck_resave();\n  ...\n  209  \t}\n  210  \n  211: \tif (state->cache.dirty) {\n  212  \t\tstate->cache.doc_to_time.clear();\n  213  \t\tstate->cache.exe_to_time.clear();\n  ...\n  220  \t\t\tstate->cache.exe_to_docs[x.exe_name].insert(x.doc_name);\n  221  \t\t}\n  222: \t\tstate->cache.dirty = false;\n  223  \t}\n  224  \n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\Event.hpp:\n   26  \n   27  struct EventCache {\n   28: \tbool dirty = true;\n   29  \tstd::map<AppUsage::Stack_String, uint64_t> exe_to_time;\n   30  \tstd::map<AppUsage::Stack_String, uint64_t> doc_to_time;\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\Mouse.hpp:\n   40  \ttemplate<typename T>\n   41  \tstruct Cached {\n   42: \t\tbool dirty = true;\n   43  \t\tT v;\n   44  \t};\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\render_stats.cpp:\n  185  void render_keyboard_activity_timeline(const KeyboardState& ks) noexcept {\n  186  \treturn;\n  187: \tstatic bool dirty{true};\n  188  \tstatic int day_step{1};\n  189  \tstatic std::vector<float> occ;\n  190  \n  191  \tif (ImGui::SliderInt(\"Day step\", &day_step, 1, 31)) {\n  192: \t\tdirty = true;\n  193  \t}\n  194  \tif (ks.key_entries.empty()) return;\n  195  \n  196: \tif (dirty) {\n  197  \t\tauto time_start = ks.key_entries.front().timestamp;\n  198  \t\tauto time_end = ks.key_entries.back().timestamp;\n  ...\n  208  \t\t}\n  209  \n  210: \t\tdirty = false;\n  211  \t}\n  212  \n  ...\n  261  \tauto& it = ms.cache.n_keys[d.unique_hash_char];\n  262  \n  263: \tif (it.dirty) {\n  264  \t\tsize_t sum = 0;\n  265  \t\tfor (size_t i = 0; i < ms.click_entries.size(); ++i) {\n  ...\n  274  \n  275  \t\tit.v = sum;\n  276: \t\tit.dirty = false;\n  277  \t}\n  278  \n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui\\imgui.cpp:\n 3453              if (moving_window->Pos.x != pos.x || moving_window->Pos.y != pos.y)\n 3454              {\n 3455:                 MarkIniSettingsDirty(moving_window);\n 3456                  SetWindowPos(moving_window, pos, ImGuiCond_Always);\n 3457                  if (moving_window->ViewportOwned) // Synchronize viewport immediately because some overlays may relies on clipping rectangle before we Begin() into the window.\n ....\n 5511      {\n 5512          window->SizeFull = size_target;\n 5513:         MarkIniSettingsDirty(window);\n 5514      }\n 5515      if (pos_target.x != FLT_MAX)\n 5516      {\n 5517          window->Pos = ImFloor(pos_target);\n 5518:         MarkIniSettingsDirty(window);\n 5519      }\n 5520  \n ....\n 6043              {\n 6044                  window->Collapsed = !window->Collapsed;\n 6045:                 MarkIniSettingsDirty(window);\n 6046                  FocusWindow(window);\n 6047              }\n ....\n 6088              }\n 6089              if (!window->Collapsed)\n 6090:                 MarkIniSettingsDirty(window);\n 6091          }\n 6092  \n ....\n 6151              {\n 6152                  window->Pos = window->Viewport->Pos;\n 6153:                 MarkIniSettingsDirty(window);\n 6154              }\n 6155              else if (memcmp(&window->Viewport->Pos, &window->Pos, sizeof(window->Pos)) != 0)\n ....\n 6162              {\n 6163                  window->Size = window->SizeFull = window->Viewport->Size;\n 6164:                 MarkIniSettingsDirty(window);\n 6165              }\n 6166              else if (memcmp(&window->Viewport->Size, &window->Size, sizeof(window->Size)) != 0)\n ....\n 6735          g.NavWindow = window;\n 6736          if (window && g.NavDisableMouseHover)\n 6737:             g.NavMousePosDirty = true;\n 6738          g.NavInitRequest = false;\n 6739          g.NavId = window ? window->NavLastIds[0] : 0; // Restore NavId\n ....\n 8773      SetNavID(id, nav_layer, focus_scope_id);\n 8774      g.NavWindow->NavRectRel[nav_layer] = rect_rel;\n 8775:     g.NavMousePosDirty = true;\n 8776      g.NavDisableHighlight = false;\n 8777      g.NavDisableMouseHover = true;\n ....\n 9272  \n 9273      // Apply application mouse position movement, after we had a chance to process move request result.\n 9274:     if (g.NavMousePosDirty && g.NavIdIsAlive)\n 9275      {\n 9276          // Set mouse position given our knowledge of the navigated item position from last frame\n ....\n 9283              }\n 9284          }\n 9285:         g.NavMousePosDirty = false;\n 9286      }\n 9287      g.NavIdIsAlive = false;\n ....\n 9321              g.NavIdIsAlive = false;     // -V1048\n 9322              if (g.NavDisableMouseHover)\n 9323:                 g.NavMousePosDirty = true;\n 9324          }\n 9325          else if (g.OpenPopupStack.Size > 0)\n ....\n 9811              SetWindowPos(g.NavWindowingTarget->RootWindow, g.NavWindowingTarget->RootWindow->Pos + move_delta * move_speed, ImGuiCond_Always);\n 9812              g.NavDisableMouseHover = true;\n 9813:             MarkIniSettingsDirty(g.NavWindowingTarget);\n 9814          }\n 9815      }\n ....\n 10426  //-----------------------------------------------------------------------------\n 10427  // - UpdateSettings() [Internal]\n 10428: // - MarkIniSettingsDirty() [Internal]\n 10429  // - CreateNewWindowSettings() [Internal]\n 10430  // - FindWindowSettings() [Internal]\n .....\n 10453  \n 10454      // Save settings (with a delay after the last modification, so we don't spam disk too much)\n 10455:     if (g.SettingsDirtyTimer > 0.0f)\n 10456      {\n 10457:         g.SettingsDirtyTimer -= g.IO.DeltaTime;\n 10458:         if (g.SettingsDirtyTimer <= 0.0f)\n 10459          {\n 10460              if (g.IO.IniFilename != NULL)\n .....\n 10462              else\n 10463                  g.IO.WantSaveIniSettings = true;  // Let user know they can call SaveIniSettingsToMemory(). user will need to clear io.WantSaveIniSettings themselves.\n 10464:             g.SettingsDirtyTimer = 0.0f;\n 10465          }\n 10466      }\n 10467  }\n 10468  \n 10469: void ImGui::MarkIniSettingsDirty()\n 10470  {\n 10471      ImGuiContext& g = *GImGui;\n 10472:     if (g.SettingsDirtyTimer <= 0.0f)\n 10473:         g.SettingsDirtyTimer = g.IO.IniSavingRate;\n 10474  }\n 10475  \n 10476: void ImGui::MarkIniSettingsDirty(ImGuiWindow* window)\n 10477  {\n 10478      ImGuiContext& g = *GImGui;\n 10479      if (!(window->Flags & ImGuiWindowFlags_NoSavedSettings))\n 10480:         if (g.SettingsDirtyTimer <= 0.0f)\n 10481:             g.SettingsDirtyTimer = g.IO.IniSavingRate;\n 10482  }\n 10483  \n .....\n 10623  {\n 10624      ImGuiContext& g = *GImGui;\n 10625:     g.SettingsDirtyTimer = 0.0f;\n 10626      if (!ini_filename)\n 10627          return;\n .....\n 10640  {\n 10641      ImGuiContext& g = *GImGui;\n 10642:     g.SettingsDirtyTimer = 0.0f;\n 10643      g.SettingsIniData.Buf.resize(0);\n 10644      g.SettingsIniData.Buf.push_back(0);\n .....\n 12245      if (ImGuiTabBar* tab_bar = node->TabBar)\n 12246          tab_bar->NextSelectedTabId = next_selected_id;\n 12247:     MarkIniSettingsDirty();\n 12248  }\n 12249  \n .....\n 12259      window->DockIsActive = false;\n 12260      window->DockTabIsVisible = false;\n 12261:     MarkIniSettingsDirty();\n 12262  }\n 12263  \n .....\n 12290      node->AuthorityForPos = node->AuthorityForSize = ImGuiDataAuthority_Window;\n 12291      node->WantMouseMove = true;\n 12292:     MarkIniSettingsDirty();\n 12293  }\n 12294  \n .....\n 13961                      DockNodeTreeUpdatePosSize(child_0, child_0->Pos, child_0->Size);\n 13962                      DockNodeTreeUpdatePosSize(child_1, child_1->Pos, child_1->Size);\n 13963:                     MarkIniSettingsDirty();\n 13964                  }\n 13965              }\n .....\n 15811          else\n 15812              ImGui::TextUnformatted(\"<NULL>\");\n 15813:         ImGui::Text(\"SettingsDirtyTimer %.2f\", g.SettingsDirtyTimer);\n 15814          if (ImGui::TreeNode(\"SettingsHandlers\", \"Settings handlers: (%d)\", g.SettingsHandlers.Size))\n 15815          {\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui\\imgui.h:\n 1695      // Arguments for the different callback events\n 1696      // - To modify the text buffer in a callback, prefer using the InsertChars() / DeleteChars() function. InsertChars() will take care of calling the resize callback if necessary.\n 1697:     // - If you know your edits are not going to resize the underlying buffer allocation, you may modify the contents of 'Buf[]' directly. You need to update 'BufTextLen' accordingly (0 <= BufTextLen < BufSize) and set 'BufDirty'' to true so InputText can update its internal state.\n 1698      ImWchar             EventChar;      // Character input                      // Read-write   // [CharFilter] Replace character with another one, or set to zero to drop. return 1 is equivalent to setting EventChar=0;\n 1699      ImGuiKey            EventKey;       // Key pressed (Up/Down/TAB)            // Read-only    // [Completion,History]\n ....\n 1701      int                 BufTextLen;     // Text length (in bytes)               // Read-write   // [Resize,Completion,History,Always] Exclude zero-terminator storage. In C land: == strlen(some_text), in C++ land: string.length()\n 1702      int                 BufSize;        // Buffer size (in bytes) = capacity+1  // Read-only    // [Resize,Completion,History,Always] Include zero-terminator storage. In C land == ARRAYSIZE(my_char_array), in C++ land: string.capacity()+1\n 1703:     bool                BufDirty;       // Set if you modify Buf/BufTextLen!    // Write        // [Completion,History,Always]\n 1704      int                 CursorPos;      //                                      // Read-write   // [Completion,History,Always]\n 1705      int                 SelectionStart; //                                      // Read-write   // [Completion,History,Always] == to SelectionEnd when no selection)\n ....\n 2451      ImWchar                     FallbackChar;       // 2     // in  // = '?'      // Replacement character if a glyph isn't found. Only set via SetFallbackChar()\n 2452      ImWchar                     EllipsisChar;       // 2     // out // = -1       // Character used for ellipsis rendering.\n 2453:     bool                        DirtyLookupTables;  // 1     // out //\n 2454      float                       Scale;              // 4     // in  // = 1.f      // Base font scale, multiplied by the per-window font scale which you can adjust with SetWindowFontScale()\n 2455      float                       Ascent, Descent;    // 4+4   // out //            // Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui\\imgui_draw.cpp:\n 2365      // Build all fonts lookup tables\n 2366      for (int i = 0; i < atlas->Fonts.Size; i++)\n 2367:         if (atlas->Fonts[i]->DirtyLookupTables)\n 2368              atlas->Fonts[i]->BuildLookupTable();\n 2369  \n ....\n 2658      ConfigData = NULL;\n 2659      ConfigDataCount = 0;\n 2660:     DirtyLookupTables = false;\n 2661      Scale = 1.0f;\n 2662      Ascent = Descent = 0.0f;\n ....\n 2679      FallbackGlyph = NULL;\n 2680      ContainerAtlas = NULL;\n 2681:     DirtyLookupTables = true;\n 2682      Ascent = Descent = 0.0f;\n 2683      MetricsTotalSurface = 0;\n ....\n 2694      IndexAdvanceX.clear();\n 2695      IndexLookup.clear();\n 2696:     DirtyLookupTables = false;\n 2697      memset(Used4kPagesMap, 0, sizeof(Used4kPagesMap));\n 2698      GrowIndex(max_codepoint + 1);\n ....\n 2790  \n 2791      // Compute rough surface usage metrics (+1 to account for average padding, +0.99 to round)\n 2792:     DirtyLookupTables = true;\n 2793      MetricsTotalSurface += (int)((glyph.U1 - glyph.U0) * ContainerAtlas->TexWidth + 1.99f) * (int)((glyph.V1 - glyph.V0) * ContainerAtlas->TexHeight + 1.99f);\n 2794  }\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui\\imgui_internal.h:\n 1374      int                     NavIdTabCounter;                    // == NavWindow->DC.FocusIdxTabCounter at time of NavId processing\n 1375      bool                    NavIdIsAlive;                       // Nav widget has been seen this frame ~~ NavRefRectRel is valid\n 1376:     bool                    NavMousePosDirty;                   // When set we will update mouse position if (io.ConfigFlags & ImGuiConfigFlags_NavEnableSetMousePos) if set (NB: this not enabled by default)\n 1377      bool                    NavDisableHighlight;                // When user starts using mouse, we hide gamepad/keyboard highlight (NB: but they are still available, which is why NavDisableHighlight isn't always != NavDisableMouseHover)\n 1378      bool                    NavDisableMouseHover;               // When user starts using gamepad/keyboard, we hide mouse hovering highlight until mouse is touched again.\n ....\n 1451      float                   ColorEditLastColor[3];\n 1452      ImVec4                  ColorPickerRef;                     // Initial/reference color at the time of opening the color picker.\n 1453:     bool                    DragCurrentAccumDirty;\n 1454      float                   DragCurrentAccum;                   // Accumulator for dragging modification. Always high-precision, not rounded by end-user precision settings\n 1455      float                   DragSpeedDefaultRatio;              // If speed == 0.0f, uses (max-min) * DragSpeedDefaultRatio\n ....\n 1470      // Settings\n 1471      bool                    SettingsLoaded;\n 1472:     float                   SettingsDirtyTimer;                 // Save .ini Settings to memory when time reaches zero\n 1473      ImGuiTextBuffer         SettingsIniData;                    // In memory .ini settings\n 1474      ImVector<ImGuiSettingsHandler>      SettingsHandlers;       // List of .ini settings handlers\n ....\n 1566          NavIdTabCounter = INT_MAX;\n 1567          NavIdIsAlive = false;\n 1568:         NavMousePosDirty = false;\n 1569          NavDisableHighlight = true;\n 1570          NavDisableMouseHover = false;\n ....\n 1613          ColorEditLastHue = ColorEditLastSat = 0.0f;\n 1614          ColorEditLastColor[0] = ColorEditLastColor[1] = ColorEditLastColor[2] = FLT_MAX;\n 1615:         DragCurrentAccumDirty = false;\n 1616          DragCurrentAccum = 0.0f;\n 1617          DragSpeedDefaultRatio = 1.0f / 100.0f;\n ....\n 1623  \n 1624          SettingsLoaded = false;\n 1625:         SettingsDirtyTimer = 0.0f;\n 1626  \n 1627          LogEnabled = false;\n ....\n 1891      ImGuiTabBarFlags_DockNode = 1 << 20,  // Part of a dock node [we don't use this in the master branch but it facilitate branch syncing to keep this around]\n 1892      ImGuiTabBarFlags_IsFocused = 1 << 21,\n 1893:     ImGuiTabBarFlags_SaveSettings = 1 << 22   // FIXME: Settings are handled by the docking system, this only request the tab bar to mark settings dirty when reordering tabs\n 1894  };\n 1895  \n ....\n 2021  \n 2022      // Settings\n 2023:     IMGUI_API void                  MarkIniSettingsDirty();\n 2024:     IMGUI_API void                  MarkIniSettingsDirty(ImGuiWindow* window);\n 2025      IMGUI_API void                  ClearIniSettings();\n 2026      IMGUI_API ImGuiWindowSettings* CreateNewWindowSettings(const char* name);\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui\\imgui_widgets.cpp:\n 2047      {\n 2048          g.DragCurrentAccum = 0.0f;\n 2049:         g.DragCurrentAccumDirty = false;\n 2050      }\n 2051      else if (adjust_delta != 0.0f)\n 2052      {\n 2053          g.DragCurrentAccum += adjust_delta;\n 2054:         g.DragCurrentAccumDirty = true;\n 2055      }\n 2056  \n 2057:     if (!g.DragCurrentAccumDirty)\n 2058          return false;\n 2059  \n ....\n 2078  \n 2079      // Preserve remainder after rounding has been applied. This also allow slow tweaking of values.\n 2080:     g.DragCurrentAccumDirty = false;\n 2081      if (is_power)\n 2082      {\n ....\n 3419          CursorPos = pos;\n 3420      SelectionStart = SelectionEnd = CursorPos;\n 3421:     BufDirty = true;\n 3422      BufTextLen -= bytes_count;\n 3423  }\n ....\n 3451          CursorPos += new_text_len;\n 3452      SelectionStart = SelectionEnd = CursorPos;\n 3453:     BufDirty = true;\n 3454      BufTextLen += new_text_len;\n 3455  }\n ....\n 3970              // Note that as soon as the input box is active, the in-widget value gets priority over any underlying modification of the input buffer\n 3971              // FIXME: We actually always render 'buf' when calling DrawList->AddText, making the comment above incorrect.\n 3972:             // FIXME-OPT: CPU waste to do this every time the widget is active, should mark dirty state from the stb_textedit callbacks.\n 3973              if (!is_readonly)\n 3974              {\n ....\n 4016                      callback_data.BufTextLen = state->CurLenA;\n 4017                      callback_data.BufSize = state->BufCapacityA;\n 4018:                     callback_data.BufDirty = false;\n 4019  \n 4020                      // We have to convert from wchar-positions to UTF-8-positions, which can be pretty slow (an incentive to ditch the ImWchar buffer, see https://github.com/nothings/stb/issues/188)\n ....\n 4034                      if (callback_data.SelectionStart != utf8_selection_start) { state->Stb.select_start = ImTextCountCharsFromUtf8(callback_data.Buf, callback_data.Buf + callback_data.SelectionStart); }\n 4035                      if (callback_data.SelectionEnd != utf8_selection_end) { state->Stb.select_end = ImTextCountCharsFromUtf8(callback_data.Buf, callback_data.Buf + callback_data.SelectionEnd); }\n 4036:                     if (callback_data.BufDirty)\n 4037                      {\n 4038                          IM_ASSERT(callback_data.BufTextLen == (int)strlen(callback_data.Buf)); // You need to maintain BufTextLen if you change the text!\n ....\n 6773              }\n 6774              if (tab_bar->Flags & ImGuiTabBarFlags_SaveSettings)\n 6775:                 MarkIniSettingsDirty();\n 6776          }\n 6777          tab_bar->ReorderRequestTabId = 0;\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui.h:\n 1695      // Arguments for the different callback events\n 1696      // - To modify the text buffer in a callback, prefer using the InsertChars() / DeleteChars() function. InsertChars() will take care of calling the resize callback if necessary.\n 1697:     // - If you know your edits are not going to resize the underlying buffer allocation, you may modify the contents of 'Buf[]' directly. You need to update 'BufTextLen' accordingly (0 <= BufTextLen < BufSize) and set 'BufDirty'' to true so InputText can update its internal state.\n 1698      ImWchar             EventChar;      // Character input                      // Read-write   // [CharFilter] Replace character with another one, or set to zero to drop. return 1 is equivalent to setting EventChar=0;\n 1699      ImGuiKey            EventKey;       // Key pressed (Up/Down/TAB)            // Read-only    // [Completion,History]\n ....\n 1701      int                 BufTextLen;     // Text length (in bytes)               // Read-write   // [Resize,Completion,History,Always] Exclude zero-terminator storage. In C land: == strlen(some_text), in C++ land: string.length()\n 1702      int                 BufSize;        // Buffer size (in bytes) = capacity+1  // Read-only    // [Resize,Completion,History,Always] Include zero-terminator storage. In C land == ARRAYSIZE(my_char_array), in C++ land: string.capacity()+1\n 1703:     bool                BufDirty;       // Set if you modify Buf/BufTextLen!    // Write        // [Completion,History,Always]\n 1704      int                 CursorPos;      //                                      // Read-write   // [Completion,History,Always]\n 1705      int                 SelectionStart; //                                      // Read-write   // [Completion,History,Always] == to SelectionEnd when no selection)\n ....\n 2451      ImWchar                     FallbackChar;       // 2     // in  // = '?'      // Replacement character if a glyph isn't found. Only set via SetFallbackChar()\n 2452      ImWchar                     EllipsisChar;       // 2     // out // = -1       // Character used for ellipsis rendering.\n 2453:     bool                        DirtyLookupTables;  // 1     // out //\n 2454      float                       Scale;              // 4     // in  // = 1.f      // Base font scale, multiplied by the per-window font scale which you can adjust with SetWindowFontScale()\n 2455      float                       Ascent, Descent;    // 4+4   // out //            // Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]\n\n73 matches across 10 files\n\n\nSearching 157 files for \"defer\"\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\Common.hpp:\n    6  namespace details {\n    7  \ttemplate<typename Callable>\n    8: \tstruct Defer {\n    9: \t\t~Defer() noexcept { todo(); }\n   10: \t\tDefer(Callable todo) noexcept : todo(todo) {};\n   11  \tprivate:\n   12  \t\tCallable todo;\n   ..\n   14  };\n   15  \n   16: #define defer details::Defer _CONCAT(defer_, __COUNTER__) = [&]\n   17  #define BEG(x) std::begin(x)\n   18  #define BEG_END(x) std::begin(x), std::end(x)\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\Event.cpp:\n  169  void EventWindow::render(std::optional<EventState>& state) noexcept {\n  170  \tImGui::Begin(\"Event\");\n  171: \tdefer { ImGui::End(); };\n  172  \n  173  \tif (reset_time_start == 0 && ImGui::Button(\"Reset\")) {\n  ...\n  240  \n  241  \t\tif (open) {\n  242: \t\t\tdefer { ImGui::TreePop(); };\n  243  \t\t\tfor (auto& doc : state->cache.exe_to_docs[name]) {\n  244  \t\t\t\tImGuiTreeNodeFlags flags =\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\File_Win.cpp:\n   44  \t\treturn std::filesystem::current_path();\n   45  \t}\n   46: \tdefer{ CoTaskMemFree(buffer); };\n   47  \n   48  \tauto str = std::wstring{ buffer };\n   ..\n   68  \t\treturn std::nullopt;\n   69  \t}\n   70: \tdefer{ fclose(file); };\n   71  \n   72  \tfseek(file, 0, SEEK_END);\n   ..\n   89  \tauto err = fopen_s(&f, path.generic_string().c_str(), \"rb+\");\n   90  \tif (!f || err) return err;\n   91: \tdefer{ fclose(f); };\n   92  \n   93  \tauto wrote = fwrite(bytes.data(), 1, bytes.size(), f);\n   ..\n  107  \t\treturn err;\n  108  \t}\n  109: \tdefer{ fclose(f); };\n  110  \n  111  \tauto wrote = fwrite(bytes.data(), 1, bytes.size(), f);\n  ...\n  123  \t\treturn std::nullopt;\n  124  \t}\n  125: \tdefer{ fclose(f); };\n  126  \n  127  \tfseek(f, 0, SEEK_END);\n  ...\n  154  \tauto err = fopen_s(&f, path.generic_string().c_str(), \"rb+\");\n  155  \tif (!f || err) return err;\n  156: \tdefer{ fclose(f); };\n  157  \n  158  \tfseek(f, offset, SEEK_CUR);\n  ...\n  183  \tauto err = fopen_s(&f, path.generic_string().c_str(), \"rb+\");\n  184  \tif (!f || err) return err;\n  185: \tdefer{ fclose(f); };\n  186  \n  187  \tfseek(f, 0, SEEK_END);\n  ...\n  226  \tauto err = fopen_s(&f, path.generic_string().c_str(), \"rb+\");\n  227  \tif (!f || err) return err;\n  228: \tdefer{ fclose(f); };\n  229  \n  230  \tfseek(f, 0, SEEK_END);\n  ...\n  248  \t\treturn std::nullopt;\n  249  \t}\n  250: \tdefer{ fclose(f); };\n  251  \n  252  \terr = fseek(f, 0, SEEK_END);\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\keyboard.cpp:\n  172  \n  173  \tImGui::Begin(\"Keyboard\");\n  174: \tdefer{ ImGui::End(); };\n  175  \tif (reset_time_start == 0 && ImGui::Button(\"Reset\")) {\n  176  \t\treset_time_start = time(nullptr);\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\Logs.cpp:\n   33  \n   34  \tImGui::Begin(\"Log\", &open);\n   35: \tdefer{ ImGui::End(); };\n   36  \n   37  \tauto window_width = ImGui::GetWindowContentRegionWidth();\n   ..\n   42  \tfor (size_t i = l.entries.size() - 1; i + 1 > 0; --i) {\n   43  \t\tImGui::PushID(i);\n   44: \t\tdefer{ ImGui::PopID(); };\n   45  \n   46  \t\tauto& x = l.entries[i];\n   ..\n   76  \tfor (size_t i = l.errors.size() - 1; i + 1 > 0; --i) {\n   77  \t\tImGui::PushID(i);\n   78: \t\tdefer{ ImGui::PopID(); };\n   79  \n   80  \t\tauto& x = l.errors[i];\n   ..\n  107  \t\tif (ImGui::BeginPopup(\"Complete\")) {\n  108  \t\t\tImGui::PushItemWidth(200);\n  109: \t\t\tdefer{\n  110  \t\t\t\tImGui::PopItemWidth();\n  111  \t\t\t\tImGui::EndPopup();\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\Main.cpp:\n  249  \t\tEventState::load_from_file(get_app_data_path() / EventState::Default_Path);\n  250  \n  251: \tdefer{\n  252  \t\tif (shared.keyboard_state) {\n  253  \t\t\t(void)shared.keyboard_state->save_to_file(get_app_data_path() / Default_Keyboard_Path);\n  ...\n  283  \n  284  \tRegisterClassEx(&wc);\n  285: \tdefer{ UnregisterClass(hook_class_name, wc.hInstance); };\n  286  \tHWND hwnd = CreateWindow(\n  287  \t\thook_class_name,\n  ...\n  304  \tstd::thread{ event_queue_process }.detach();\n  305  \n  306: \tdefer{ DestroyWindow(hwnd); };\n  307: \tdefer{ shared.hook_window = nullptr; };\n  308  \n  309  #if REGISTER_HOOKS\n  ...\n  321  \tmake_mail();\n  322  \tinstall_hook();\n  323: \tdefer { uninstall_hook(); };\n  324  #endif\n  325  #endif\n  ...\n  332  \tsys_tray_icon.add();\n  333  \tsys_tray_icon.show();\n  334: \tdefer{ sys_tray_icon.remove(); };\n  335  \n  336  \tLogEntry entry;\n  ...\n  393  \tshared.visu_window = hwnd;\n  394  \n  395: \tdefer{\n  396  \t\tUnregisterClass(visu_class_name, wc.hInstance);\n  397  \t\tDestroyWindow(hwnd);\n  ...\n  401  \n  402  \tauto gl_context = *create_gl_context(hwnd);\n  403: \tdefer{ destroy_gl_context(gl_context); };\n  404  \n  405  \t// Setup Dear ImGui context\n  ...\n  437  \t}\n  438  \t\n  439: \tdefer{\n  440  \t\tImGui_ImplOpenGL3_Shutdown();\n  441  \t\tImGui_ImplWin32_Shutdown();\n  ...\n  508  \n  509  \t\tif (ImGui::BeginPopup(\"Error Prompt\")) {\n  510: \t\t\tdefer{ ImGui::EndPopup(); };\n  511  \n  512  \t\t\tImGui::Text(\"The last action ended with an error see the logs for more details.\");\n  ...\n  631  \n  632  \tauto time_start = get_microseconds_epoch();\n  633: \tdefer{\n  634  \t\tauto time_end = get_microseconds_epoch();\n  635  \t\tauto dt = time_end - time_start;\n  ...\n  662  \n  663  \tif (!key_entries_to_add.empty() && event_queue_cache.mutex.try_lock()) {\n  664: \t\tdefer{\n  665  \t\t\tevent_queue_cache.mutex.unlock();\n  666  \t\t\tevent_queue_cache.wait_var.notify_all();\n  ...\n  678  \n  679  \tauto time_start = get_microseconds_epoch();\n  680: \tdefer{\n  681  \t\tauto time_end = get_microseconds_epoch();\n  682  \t\tauto dt = time_end - time_start;\n  ...\n  741  \n  742  \tif (!click_entries_to_add.empty() && event_queue_cache.mutex.try_lock()) {\n  743: \t\tdefer{\n  744  \t\t\tevent_queue_cache.mutex.unlock();\n  745  \t\t\tevent_queue_cache.wait_var.notify_all();\n  ...\n  823  \n  824  \tif (!entries_to_add.empty() && event_queue_cache.mutex.try_lock()) {\n  825: \t\tdefer {\n  826  \t\t\tentries_to_add.clear();\n  827  \t\t\tevent_queue_cache.mutex.unlock();\n  ...\n  857  \t\t\tshared.mut_mouse_state.try_lock()\n  858  \t\t) {\n  859: \t\t\tdefer{ shared.mut_mouse_state.unlock(); };\n  860  \n  861  \t\t\tfor (auto& x : event_queue_cache.click) {\n  ...\n  872  \t\t\tshared.mut_keyboard_state.try_lock()\n  873  \t\t) {\n  874: \t\t\tdefer{ shared.mut_keyboard_state.unlock(); };\n  875  \t\t\t\t\n  876  \t\t\tfor (auto x : event_queue_cache.keyboard) shared.keyboard_state->increment_key(x);\n  ...\n  883  \t\t\tshared.mut_event_state.try_lock()\n  884  \t\t) {\n  885: \t\t\tdefer{ shared.mut_event_state.unlock(); };\n  886  \n  887  \t\t\tfor (auto& x : event_queue_cache.app_usages)\n  ...\n  971  \t\treturn std::nullopt;\n  972  \t}\n  973: \tdefer{ ReleaseDC(handle_window, dc); };\n  974  \n  975  \tPROFILER_SEQ(\"Pixel\");\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\Mouse.cpp:\n  131  \n  132  \tImGui::Begin(\"Mouse\");\n  133: \tdefer{ ImGui::End(); };\n  134  \n  135  \tif (reset_time_start == 0 && ImGui::Button(\"Reset\")) {\n  ...\n  179  \t\t\tif (*x.custom_name) name = x.custom_name;\n  180  \t\t\tImGui::PushID(i);\n  181: \t\t\tdefer { ImGui::PopID(); };\n  182  \n  183  \t\t\tif (display_list_focused && display_list_selected == i) {\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\render_stats.cpp:\n  241  void render_mouse_plot(const MouseState& ms) noexcept {\n  242  \tif (!ImPlot::BeginPlot(\"Mouse usage\", \"Time\", \"Usage\")) return;\n  243: \tdefer { ImPlot::EndPlot(); };\n  244  \n  245  \tms.cache.usage_plot.dirty |= ImGui::SliderSize(\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\Settings.cpp:\n   92  \t\t\treturn false;\n   93  \t\t}\n   94: \t\tdefer{ RegCloseKey(hkey); };\n   95  \n   96  \t\tresult = RegSetValueExW(\n   ..\n  130  \t\t}\n  131  \n  132: \t\tdefer { RegCloseKey(hkey); };\n  133  \n  134  \t\tresult = RegDeleteValueW(hkey, Reg_Value);\n  ...\n  151  \n  152  \tImGui::Begin(\"System\");\n  153: \tdefer{ ImGui::End(); };\n  154  \n  155  \tif (ImGui::Checkbox(\"Start on startup\", &settings.start_on_startup)) {\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui\\imgui.cpp:\n 2583          need_clipping |= (pos.x < clip_min->x) || (pos.y < clip_min->y);\n 2584  \n 2585:     // Align whole block. We should defer that to the better rendering function when we'll have support for individual line alignment.\n 2586      if (align.x > 0.0f) pos.x = ImMax(pos.x, pos.x + (pos_max.x - pos.x - text_size.x) * align.x);\n 2587      if (align.y > 0.0f) pos.y = ImMax(pos.y, pos.y + (pos_max.y - pos.y - text_size.y) * align.y);\n ....\n 5726      if (has_collapse_button)\n 5727          if (CollapseButton(window->GetID(\"#COLLAPSE\"), collapse_button_pos, NULL))\n 5728:             window->WantCollapseToggle = true; // Defer actual collapsing to next frame as we are too far in the Begin() function\n 5729  \n 5730      // Close button\n ....\n 11065              // Scale our window moving pivot so that the window will rescale roughly around the mouse position.\n 11066              // FIXME-VIEWPORT: This currently creates a resizing feedback loop when a window is straddling a DPI transition border.\n 11067:             // (Minor: since our sizes do not perfectly linearly scale, deferring the click offset scale until we know the actual window scale ratio may get us slightly more precise mouse positioning.)\n 11068              //if (g.MovingWindow != NULL && g.MovingWindow->Viewport == viewport)\n 11069              //    g.ActiveIdClickOffset = ImFloor(g.ActiveIdClickOffset * scale_factor);\n .....\n 12800      }\n 12801  \n 12802:     // In some circumstance we will defer creating the host window (so everything will be kept hidden),\n 12803      // while the expected visible window is resizing itself.\n 12804      // This is important for first-time (no ini settings restored) single window when io.ConfigDockingAlwaysTabBar is enabled,\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui\\imgui.h:\n  847      ImGuiWindowFlags_NoNavInputs = 1 << 18,  // No gamepad/keyboard navigation within the window\n  848      ImGuiWindowFlags_NoNavFocus = 1 << 19,  // No focusing toward this window with gamepad/keyboard navigation (e.g. skipped by CTRL+TAB)\n  849:     ImGuiWindowFlags_UnsavedDocument = 1 << 20,  // Append '*' to title without affecting the ID, as a convenience to avoid using the ### operator. When used in a tab/docking context, tab is selected on closure and closure is deferred by one frame to allow code to cancel the closure (with a confirmation popup, etc.) without flicker.\n  850      ImGuiWindowFlags_NoDocking = 1 << 21,  // Disable docking of this window\n  851  \n  ...\n  983  {\n  984      ImGuiTabItemFlags_None = 0,\n  985:     ImGuiTabItemFlags_UnsavedDocument = 1 << 0,   // Append '*' to title without affecting the ID, as a convenience to avoid using the ### operator. Also: tab is selected on closure and closure is deferred by one frame to allow code to undo it without flicker.\n  986      ImGuiTabItemFlags_SetSelected = 1 << 1,   // Trigger flag to programmatically make the tab selected when calling BeginTabItem()\n  987      ImGuiTabItemFlags_NoCloseWithMiddleMouseButton = 1 << 2,   // Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false.\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\Main.cpp:\n  219  \t\tEventState::load_from_file(get_app_data_path() / EventState::Default_Path);\n  220  \n  221: \tdefer{\n  222  \t\tif (shared.keyboard_state) {\n  223  \t\t\t(void)shared.keyboard_state->save_to_file(get_app_data_path() / Default_Keyboard_Path);\n  ...\n  254  \n  255  \tRegisterClassEx(&wc);\n  256: \tdefer{ UnregisterClass(hook_class_name, wc.hInstance); };\n  257  \tHWND hwnd = CreateWindow(\n  258  \t\thook_class_name,\n  ...\n  275  \tstd::thread{ event_queue_process }.detach();\n  276  \n  277: \tdefer{ DestroyWindow(hwnd); };\n  278: \tdefer{ shared.hook_window = nullptr; };\n  279  \n  280  #if REGISTER_HOOKS\n  ...\n  305  \tsys_tray_icon.add();\n  306  \tsys_tray_icon.show();\n  307: \tdefer{ sys_tray_icon.remove(); };\n  308  \n  309  \tLogEntry entry;\n  ...\n  366  \tshared.visu_window = hwnd;\n  367  \n  368: \tdefer{\n  369  \t\tUnregisterClass(visu_class_name, wc.hInstance);\n  370  \t\tDestroyWindow(hwnd);\n  ...\n  374  \n  375  \tauto gl_context = *create_gl_context(hwnd);\n  376: \tdefer{ destroy_gl_context(gl_context); };\n  377  \n  378  \t// Setup Dear ImGui context\n  ...\n  410  \t}\n  411  \t\n  412: \tdefer{\n  413  \t\tImGui_ImplOpenGL3_Shutdown();\n  414  \t\tImGui_ImplWin32_Shutdown();\n  ...\n  481  \n  482  \t\tif (ImGui::BeginPopup(\"Error Prompt\")) {\n  483: \t\t\tdefer{ ImGui::EndPopup(); };\n  484  \n  485  \t\t\tImGui::Text(\"The last action ended with an error see the logs for more details.\");\n  ...\n  604  \n  605  \tauto time_start = get_microseconds_epoch();\n  606: \tdefer{\n  607  \t\tauto time_end = get_microseconds_epoch();\n  608  \t\tauto dt = time_end - time_start;\n  ...\n  635  \n  636  \tif (!key_entries_to_add.empty() && event_queue_cache.mutex.try_lock()) {\n  637: \t\tdefer{\n  638  \t\t\tevent_queue_cache.mutex.unlock();\n  639  \t\t\tevent_queue_cache.wait_var.notify_all();\n  ...\n  651  \n  652  \tauto time_start = get_microseconds_epoch();\n  653: \tdefer{\n  654  \t\tauto time_end = get_microseconds_epoch();\n  655  \t\tauto dt = time_end - time_start;\n  ...\n  714  \n  715  \tif (!click_entries_to_add.empty() && event_queue_cache.mutex.try_lock()) {\n  716: \t\tdefer{\n  717  \t\t\tevent_queue_cache.mutex.unlock();\n  718  \t\t\tevent_queue_cache.wait_var.notify_all();\n  ...\n  734  \tParams* params = (Params*)ptr;\n  735  \tauto dc = GetWindowDC(handle);\n  736: \tdefer { ReleaseDC(handle, dc); };\n  737  \n  738  \tRECT r;\n  ...\n  775  \n  776  \tif (!open_windows.empty() && event_queue_cache.mutex.try_lock()) {\n  777: \t\tdefer {\n  778  \t\t\tevent_queue_cache.mutex.unlock();\n  779  \t\t\tevent_queue_cache.wait_var.notify_all();\n  ...\n  807  \t\t\tshared.mut_mouse_state.try_lock()\n  808  \t\t) {\n  809: \t\t\tdefer{ shared.mut_mouse_state.unlock(); };\n  810  \n  811  \t\t\tfor (auto& x : event_queue_cache.click) {\n  ...\n  822  \t\t\tshared.mut_keyboard_state.try_lock()\n  823  \t\t) {\n  824: \t\t\tdefer{ shared.mut_keyboard_state.unlock(); };\n  825  \t\t\t\t\n  826  \t\t\tfor (auto x : event_queue_cache.keyboard) shared.keyboard_state->increment_key(x);\n  ...\n  833  \t\t\tshared.mut_event_state.try_lock()\n  834  \t\t) {\n  835: \t\t\tdefer{ shared.mut_event_state.unlock(); };\n  836  \n  837  \t\t\tstd::set<std::string> searching_windows;\n  ...\n  960  \t\treturn std::nullopt;\n  961  \t}\n  962: \tdefer{ ReleaseDC(handle_window, dc); };\n  963  \n  964  \tPROFILER_SEQ(\"Pixel\");\n\nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches\\src\\imgui.h:\n  847      ImGuiWindowFlags_NoNavInputs = 1 << 18,  // No gamepad/keyboard navigation within the window\n  848      ImGuiWindowFlags_NoNavFocus = 1 << 19,  // No focusing toward this window with gamepad/keyboard navigation (e.g. skipped by CTRL+TAB)\n  849:     ImGuiWindowFlags_UnsavedDocument = 1 << 20,  // Append '*' to title without affecting the ID, as a convenience to avoid using the ### operator. When used in a tab/docking context, tab is selected on closure and closure is deferred by one frame to allow code to cancel the closure (with a confirmation popup, etc.) without flicker.\n  850      ImGuiWindowFlags_NoDocking = 1 << 21,  // Disable docking of this window\n  851  \n  ...\n  983  {\n  984      ImGuiTabItemFlags_None = 0,\n  985:     ImGuiTabItemFlags_UnsavedDocument = 1 << 0,   // Append '*' to title without affecting the ID, as a convenience to avoid using the ### operator. Also: tab is selected on closure and closure is deferred by one frame to allow code to undo it without flicker.\n  986      ImGuiTabItemFlags_SetSelected = 1 << 1,   // Trigger flag to programmatically make the tab selected when calling BeginTabItem()\n  987      ImGuiTabItemFlags_NoCloseWithMiddleMouseButton = 1 << 2,   // Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false.\n\n74 matches across 13 files\n",
			"settings":
			{
				"buffer_size": 137087,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "src/render_stats.hpp",
			"settings":
			{
				"buffer_size": 480,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/render_stats.cpp",
			"settings":
			{
				"buffer_size": 8211,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Microsoft Windows [version 10.0.18362.1016]                                           \n(c) 2019 Microsoft Corporation. Tous droits réservés.                                 \n                                                                                      \nC:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches>cd ..                                                             \n                                                                                                              \nC:\\Users\\Tackwin\\Documents\\Code>cd ..                                                                         \n                                                                                                              \nC:\\Users\\Tackwin\\Documents>cd ..                                                                              \n                                                                                                              \nC:\\Users\\Tackwin>cd Documents                                                                                 \n                                                                                                              \nC:\\Users\\Tackwin\\Documents>cd Soft                                                                            \n                                                                                                              \nC:\\Users\\Tackwin\\Documents\\Soft>ls                                                                            \n'ls' n’est pas reconnu en tant que commande interne                                                           \nou externe, un programme exécutable ou un fichier de commandes.                                               \n                                                                                                              \nC:\\Users\\Tackwin\\Documents\\Soft>dir                                                                           \n Le volume dans le lecteur C n’a pas de nom.                                                                  \n Le numéro de série du volume est F055-88D0                                                                   \n                                                                                                              \n Répertoire de C:\\Users\\Tackwin\\Documents\\Soft                                                                \n                                                                                                              \n16/08/2020  21:28    <DIR>          .                                                                         \n16/08/2020  21:28    <DIR>          ..                                                                        \n06/08/2020  19:50    <DIR>          Autoruns                                                                  \n11/06/2019  09:54           251 392 baregrep.exe                                                              \n06/08/2020  20:34    <DIR>          cmake-3.18.1-win64-x64                                                    \n09/08/2020  16:48           914 992 Dbgview.exe                                                               \n06/08/2020  19:55           605 952 handle64.exe                                                              \n12/08/2020  00:09           587 776 Injector.exe                                                              \n06/08/2020  19:56           220 336 Listdlls64.exe                                                            \n12/08/2020  01:22               885 LoadedDllsView.cfg                                                        \n09/08/2020  16:57           134 864 LoadedDllsView.exe                                                        \n14/08/2020  19:15    <DIR>          MEW-CX-v5.7.5                                                             \n06/08/2020  19:52    <DIR>          Milton_1.9.1_Standalone_x64                                               \n16/08/2020  21:32    <DIR>          nim-1.2.6                                                                 \n06/08/2020  19:52    <DIR>          procexp                                                                   \n28/06/2019  15:28           659 728 RAMMap.exe                                                                \n06/08/2020  21:13        15 376 552 SumatraPDF-3.2-64.exe                                                     \n12/08/2020  02:42             3 267 SumatraPDF-settings.txt                                                   \n11/08/2020  00:08    <DIR>          sumatrapdfcache                                                           \n06/08/2020  20:05    <DIR>          thk.003mk6_pw                                                             \n06/08/2020  20:02         2 827 323 thk.003mk6_pw.zip                                                         \n06/08/2020  19:52    <DIR>          Tracy-0.7.0                                                               \n07/08/2020  02:38    <DIR>          zig                                                                       \n              11 fichier(s)       21 583 067 octets                                                           \n              12 Rép(s)  881 480 687 616 octets libres                                                        \n                                                                                                              \nC:\\Users\\Tackwin\\Documents\\Soft>cd nim-1.2.6                                                                  \n                                                                                                              \nC:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6>cd examples                                                         \n                                                                                                              \nC:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\examples>ls                                                         \n'ls' n’est pas reconnu en tant que commande interne                                                           \nou externe, un programme exécutable ou un fichier de commandes.                                               \n                                                                                                              \nC:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\examples>dir                                                        \n Le volume dans le lecteur C n’a pas de nom.                                                                  \n Le numéro de série du volume est F055-88D0                                                                   \n                                                                                                              \n Répertoire de C:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\examples                                             \n                                                                                                              \n16/08/2020  21:29    <DIR>          .                                                                         \n16/08/2020  21:29    <DIR>          ..                                                                        \n16/08/2020  21:29               472 allany.nim                                                                \n16/08/2020  21:29               197 extract_keyval_pairs_pegs.nim                                             \n16/08/2020  21:29               173 extract_keyval_pairs_re.nim                                               \n16/08/2020  21:29                45 hallo.nim                                                                 \n16/08/2020  21:29               232 maximum.nim                                                               \n16/08/2020  21:29                84 myfile.txt                                                                \n16/08/2020  21:29                82 readme.txt                                                                \n16/08/2020  21:29             1 672 statcsv.nim                                                               \n16/08/2020  21:29    <DIR>          talk                                                                      \n16/08/2020  21:29               745 tunit.nim                                                                 \n               9 fichier(s)            3 702 octets                                                           \n               3 Rép(s)  881 480 687 616 octets libres                                                        \n                                                                                                              \nC:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\examples>cd talk                                                    \n                                                                                                              \nC:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\examples\\talk>clear                                                 \n'clear' n’est pas reconnu en tant que commande interne                                                        \nou externe, un programme exécutable ou un fichier de commandes.                                               \n                                                                                                              \nC:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\examples\\talk>cls                                                   \n                                                                                                              \nC:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\examples\\talk>powershell                                            \nWindows PowerShell                                                                                            \nCopyright (C) Microsoft Corporation. Tous droits réservés.                                                    \n                                                                                                              \nTestez le nouveau système multiplateforme PowerShell https://aka.ms/pscore6                                   \n                                                                                                              \nPS C:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\examples\\talk> nim                                               \nnim : Le terme «nim» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou         \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère Ligne:1 : 1                                                                                      \n+ nim                                                                                                         \n+ ~~~                                                                                                         \n    + CategoryInfo          : ObjectNotFound: (nim:String) [], CommandNotFoundException                       \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nPS C:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\examples\\talk> nim                                               \nnim : Le terme «nim» n'est pas reconnu comme nom d'applet de commande, fonction, fichier de script ou         \nprogramme exécutable. Vérifiez l'orthographe du nom, ou si un chemin d'accès existe, vérifiez que le chemin   \nd'accès est correct et réessayez.                                                                             \nAu caractère Ligne:1 : 1                                                                                      \n+ nim                                                                                                         \n+ ~~~                                                                                                         \n    + CategoryInfo          : ObjectNotFound: (nim:String) [], CommandNotFoundException                       \n    + FullyQualifiedErrorId : CommandNotFoundException                                                        \n                                                                                                              \nPS C:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\examples\\talk> ..\\..\\bin\\nim.exe                                 \nNim Compiler Version 1.2.6 [Windows: amd64]                                                                   \nCompiled at 2020-07-29                                                                                        \nCopyright (c) 2006-2020 by Andreas Rumpf                                                                      \n::                                                                                                            \n                                                                                                              \n    nim command [options] [projectfile] [arguments]                                                           \n                                                                                                              \nCommand:                                                                                                      \n  compile, c                compile project with default code generator (C)                                   \n  doc                       generate the documentation for inputfile                                          \n                                                                                                              \nArguments:                                                                                                    \n  arguments are passed to the program being run (if --run option is selected)                                 \n                                                                                                              \nOptions:                                                                                                      \n  -p, --path:PATH           add path to search paths                                                          \n  -d, --define:SYMBOL(:VAL)                                                                                   \n                            define a conditional symbol                                                       \n                            (Optionally: Define the value for that symbol,                                    \n                            see: \"compile time define pragmas\")                                               \n  -u, --undef:SYMBOL        undefine a conditional symbol                                                     \n  -f, --forceBuild:on|off   force rebuilding of all modules                                                   \n  --stackTrace:on|off       turn stack tracing on|off                                                         \n  --lineTrace:on|off        turn line tracing on|off                                                          \n  --threads:on|off          turn support for multi-threading on|off                                           \n  -x, --checks:on|off       turn all runtime checks on|off                                                    \n  -a, --assertions:on|off   turn assertions on|off                                                            \n  --opt:none|speed|size     optimize not at all or for speed|size                                             \n                            Note: use -d:release for a release build!                                         \n  --debugger:native         Use native debugger (gdb)                                                         \n  --app:console|gui|lib|staticlib                                                                             \n                            generate a console app|GUI app|DLL|static library                                 \n  -r, --run                 run the compiled program with given arguments                                     \n  --fullhelp                show all command line switches                                                    \n  -h, --help                show this help                                                                    \n  -v, --version             show detailed version information                                                 \n                                                                                                              \nNote, single letter options that take an argument require a colon. E.g. -p:PATH.                              \n                                                                                                              \nPS C:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\examples\\talk> ..\\..\\bin\\nim.exe c .\\dsl.nim                     \nHint: used config file 'C:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\config\\nim.cfg' [Conf]                      \nHint: system [Processing]                                                                                     \nHint: widestrs [Processing]                                                                                   \nHint: io [Processing]                                                                                         \nHint: dsl [Processing]                                                                                        \nHint: strutils [Processing]                                                                                   \nHint: parseutils [Processing]                                                                                 \nHint: math [Processing]                                                                                       \nHint: bitops [Processing]                                                                                     \nHint: macros [Processing]                                                                                     \nHint: algorithm [Processing]                                                                                  \nHint: unicode [Processing]                                                                                    \nCC: stdlib_io.nim                                                                                             \nCC: stdlib_system.nim                                                                                         \nCC: stdlib_strutils.nim                                                                                       \nCC: dsl.nim                                                                                                   \nHint:  [Link]                                                                                                 \nHint: 26192 LOC; 1.260 sec; 38.105MiB peakmem; Debug build; proj: C:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\ex​‌​\namples\\talk\\dsl.nim; out: C:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\examples\\talk\\dsl.exe [SuccessX]          \nPS C:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\examples\\talk>                                                   \nPS C:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\examples\\talk> .\\dsl.exe                                         \n<html><head><title>now look at this</title></head><body><ul><li>Nim is quite capable</li></ul></body></html>  \nPS C:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\examples\\talk> .\\dsl.exe                                         \n<html><head><title>now look at this</title></head><body><ul><li>Nim is quite capable</li></ul></body></html>  \nPS C:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\examples\\talk> ..\\..\\bin\\nim.exe c .\\dsl.nim                     \nHint: used config file 'C:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\config\\nim.cfg' [Conf]                      \nHint: system [Processing]                                                                                     \nHint: widestrs [Processing]                                                                                   \nHint: io [Processing]                                                                                         \nHint: dsl [Processing]                                                                                        \nHint: strutils [Processing]                                                                                   \nHint: parseutils [Processing]                                                                                 \nHint: math [Processing]                                                                                       \nHint: bitops [Processing]                                                                                     \nHint: macros [Processing]                                                                                     \nHint: algorithm [Processing]                                                                                  \n                                                                                                              \n                                                                                                              \n                                                                                                              \n                                                                                                t\\nim-1.2.6\\ex\n                                                                                                ssX]          \n                                                                                                              \n                                                                                                              \n                                                                                                              \n                                                                                                              \n                                                                                                              \n                                                                                                              \n                                                                                                              \n                                                                                                              \n                                                                                                              \nHint: io [Processing]                                                                                         \nHint: dsl [Processing]                                                                                        \nHint: strutils [Processing]                                                                                   \nHint: parseutils [Processing]                                                                                 \nHint: math [Processing]                                                                                       \nHint: bitops [Processing]                                                                                     \nHint: macros [Processing]                                                                                     \nHint: algorithm [Processing]                                                                                  \nHint: unicode [Processing]                                                                                    \nCC: dsl.nim                                                                                                   \n                                                                                                              \n                                                                                      uments\\Sof              \n                                                                                      ples\\talk\\              \n                                                                                                              \n                                                                                                              \n                                                                                                              \n                                                                                                              \n                                                                                                              \n                                                                                                              \n                                                                                                              \n                                                                                                              \n                                                                                                              \n                                                                                                t\\nim-1.2.6\\ex\n                                                                                  Hint          ssX]          ​‌​\n:  [Link]                                                                                                     \nHint: 26192 LOC; 0.450 sec; 38.105MiB peakmem; Debug build; proj: C:\\Users\\Tackwin\\Doc                        ​‌​\numents\\Soft\\nim-1.2.6\\examples\\talk\\dsl.nim; out: C:\\Users\\Tackwin\\Documents\\Soft\\nim-                        ​‌​\n1.2.6\\examples\\talk\\dsl.exe [SuccessX]                                                                        \nPS C:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\examples\\talk> .\\dsl.exe                                         \n<html>                                                                                                        \n<head>                                                                                nim                     \n<title>now look at this</title>                                                       f]                      \n</head><body>                                                                                                 \n<ul>                                                                                                          \n<li>Nim is quite capable</li>                                                                                 \n</ul></body></html>                                                                                           \nPS C:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\examples\\talk> .\\dsl.exe                                         \n<html>                                                                                                        \n<head>                                                                                          \n<title>now look at this</title>                                                                 \n</head><body>                                                                                   \n<ul>                                                                                            \n<li>Nim is quite capable</li>                                                                   \n</ul></body></html>                                                                             \nPS C:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\examples\\talk> ..\\..\\bin\\nim.exe c .\\dsl.          ​‌​\nnim                                                                                   uments\\Sof\nHint: used config file 'C:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\config\\nim.cfg' [Conples\\talk\\​‌​\nf]                                                                                              \nHint: system [Processing]                                                                       \nHint: widestrs [Processing]                                                                     \nHint: io [Processing]                                                                           \nHint: dsl [Processing]                                                                          \nHint: strutils [Processing]                                                                     \nHint: parseutils [Processing]                                                                   \nHint: math [Processing]                                                                         \nHint: bitops [Processing]                                                                       \nHint: macros [Processing]                                                                       \nHint: algorithm [Processing]                                                                    \nHint: unicode [Processing]                                                                      \nCC: dsl.nim                                                                                     \nHint:  [Link]                                                                                   \nHint: 26192 LOC; 0.460 sec; 38.105MiB peakmem; Debug build; proj: C:\\Users\\Tackwin\\Doc          ​‌​\numents\\Soft\\nim-1.2.6\\examples\\talk\\dsl.nim; out: C:\\Users\\Tackwin\\Documents\\Soft\\nim-​‌​\n1.2.6\\examples\\talk\\dsl.exe [SuccessX]                                                \nPS C:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\examples\\talk> .\\dsl.exe                 \n<html>                                                                                \n<head>                                                                                \n<title>now look at this</title>                                                       \n</head>                                                                               \n<body>                                                                                \n<ul>                                                                                  \n<li>Nim is quite capable</li>                                                         \n</ul>                                                                                 \n</body>                                                                               \n</html>                                                                               \n                                                                                      \nPS C:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\examples\\talk>                           \nPS C:\\Users\\Tackwin\\Documents\\Soft\\nim-1.2.6\\examples\\talk> ",
			"settings":
			{
				"buffer_size": 30396,
				"line_ending": "Windows",
				"name": "  - powershell",
				"scratch": true
			}
		},
		{
			"file": "/C/Users/Tackwin/Documents/Code/sans-peine/Client/src/imgui_ext.cpp",
			"settings":
			{
				"buffer_size": 13512,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Tackwin/Documents/Code/sans-peine/Client/src/imgui_ext.h",
			"settings":
			{
				"buffer_size": 3184,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/Settings.cpp",
			"settings":
			{
				"buffer_size": 4714,
				"line_ending": "Windows"
			}
		},
		{
			"file": "eject.ps1",
			"settings":
			{
				"buffer_size": 166,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "$processes = Get-Process | Select id"
			}
		},
		{
			"file": "/C/Users/Tackwin/Documents/Code/sans-peine/Simulation/src/Main.cpp",
			"settings":
			{
				"buffer_size": 9880,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Tackwin/Documents/Code/sans-peine/Client/src/Main.cpp",
			"settings":
			{
				"buffer_size": 13187,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "{\n\t\"shell_cmd\": \"make\"\n}\n",
			"settings":
			{
				"buffer_size": 25,
				"line_ending": "Windows",
				"name": "untitled.sublime-build"
			}
		},
		{
			"file": "/C/Users/Tackwin/AppData/Roaming/Sublime Text 3/Packages/User/cmake.sublime-build",
			"settings":
			{
				"buffer_size": 885,
				"line_ending": "Windows"
			}
		},
		{
			"file": "win_hook.lib",
			"settings":
			{
				"buffer_size": 5055,
				"encoding": "Hexadecimal",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "",
			"file": "src/imconfig.h",
			"file_size": 0,
			"file_write_time": 132413670476920707,
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/User/cmake.sublime-build",
					""
				],
				[
					"Packages/User/cmake.sublime-build",
					"Release"
				],
				[
					"Packages/User/cmake.sublime-build",
					"Debug"
				],
				[
					"Packages/User/cmake.sublime-build",
					"Clear"
				],
				[
					"Packages/User/cmake.sublime-build",
					"Run"
				]
			],
			[
				"Packages/User/cmake.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"termin",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"nim",
				"Nimpretty: Format this file"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Package Control: Add Channel"
			],
			[
				"run",
				"Build With: cmake - Run"
			],
			[
				"rele",
				"Build With: cmake - Release"
			],
			[
				"debug",
				"Build With: cmake - Debug"
			],
			[
				"rel",
				"Build With: cmake - Release"
			],
			[
				"re",
				"Build With: cmake - Release"
			],
			[
				"r",
				"Build With: cmake - Run"
			],
			[
				"keybi",
				"Preferences: Key Bindings"
			],
			[
				"ru",
				"Build With: cmake - Run"
			],
			[
				"ter",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"termi",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"- ck",
				"Build With: cmake - Clear"
			],
			[
				"debu",
				"Build With: cmake - Debug"
			],
			[
				"prefer",
				"Preferences: Settings"
			],
			[
				"wor",
				"Word Wrap: Toggle"
			],
			[
				"term",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"deb",
				"Build With: cmake - Debug"
			],
			[
				"TERMUN",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"TERM",
				"Terminus: Close"
			],
			[
				"- ",
				"Build With: cmake - Clear"
			],
			[
				"cmak",
				"Build With: cmake - Clear"
			],
			[
				"clea",
				"Bookmarks: Clear All"
			],
			[
				"buil",
				"Build: New Build System"
			],
			[
				"cma",
				"Build With: cmake - Release"
			],
			[
				"set s",
				"Set Syntax: C++"
			],
			[
				"keyb",
				"Preferences: Key Bindings"
			],
			[
				"s",
				"Set Syntax: C++"
			],
			[
				"side",
				"View: Toggle Side Bar"
			],
			[
				"key",
				"Preferences: Key Bindings"
			],
			[
				"terminus",
				"Preferences: Terminus Settings"
			],
			[
				"te",
				"Terminus: Toggle Panel"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"rem",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"shelle",
				"Sheller: Open shell window at Project Root"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"new",
				"Build: New Build System"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"reler",
				"Set Syntax: Regular Expression"
			],
			[
				"build",
				"Build With: cmake - Release"
			],
			[
				"b",
				"Build With: cmake - Release"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 157.0,
		"history":
		[
			"x",
			"x = 1",
			"os(\"zig\")",
			"exit()",
			"exit",
			"zig"
		]
	},
	"distraction_free":
	{
		"menu_visible": false,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Tackwin/Documents/Code/Mes_Touches",
		"/C/Users/Tackwin/Documents/Code/Mes_Touches/src"
	],
	"file_history":
	[
		"/N/Formatage décembre 2018/Crypto/Ethereum/private key",
		"/N/Formatage décembre 2018/Crypto/Ethereum/MetaMask Seed Words",
		"/C/Users/Tackwin/Documents/Code/Mes_Touches/src/Main.cpp",
		"/C/Users/Tackwin/Documents/Code/Calme/Cargo.toml",
		"/C/Users/Tackwin/Documents/Code/Calme/src/main.rs",
		"/C/Users/Tackwin/Documents/Code/Calme/.cargo/config.toml",
		"/C/Users/Tackwin/Documents/Code/Calme/src/vga_buffer.rs",
		"/C/Users/Tackwin/Documents/Code/Calme/src/x86_64-calme.json",
		"/C/Users/Tackwin/Documents/Code/Calme/Calme.sublime-project",
		"/C/Users/Tackwin/AppData/Roaming/Sublime Text 3/Packages/Default/Default (Windows).sublime-keymap"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
			"",
			"(?!imgui)",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"ImPlotLimits",
			"defer",
			"dirty",
			"di",
			"cache",
			"install",
			"event_hook",
			"current",
			"printf",
			"event_hook",
			"Mail_Arrived_Msg",
			"Mail_Ar",
			"Mail_Me",
			"get_last_er",
			"destroy_gl_context",
			"main",
			"event_hook(",
			"event_hook",
			"OpenedApp",
			"event_hoo",
			"WM_NOTIFY_MSG",
			"set_tooltip",
			"is software and associated documentation files (the \"Software\"), to\n  deal "
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"AppUsage"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2067,
						"regions":
						{
						},
						"selection":
						[
							[
								1106,
								1106
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 108.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/imgui/imgui_ext.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26474,
						"regions":
						{
						},
						"selection":
						[
							[
								26474,
								26474
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7156.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/C/Users/Tackwin/Documents/Soft/nim-1.2.6/examples/talk/dsl.nim",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 631,
						"regions":
						{
						},
						"selection":
						[
							[
								285,
								285
							]
						],
						"settings":
						{
							"syntax": "Packages/NimLime/Syntaxes/Nim.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/imgui/imgui_ext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 158657,
						"regions":
						{
						},
						"selection":
						[
							[
								5221,
								5221
							],
							[
								5563,
								5563
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1864.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/Mouse.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13520,
						"regions":
						{
						},
						"selection":
						[
							[
								12796,
								12796
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 7489.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/imgui.h",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 258376,
						"regions":
						{
						},
						"selection":
						[
							[
								1189,
								1189
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/resource.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 482,
						"regions":
						{
						},
						"selection":
						[
							[
								187,
								187
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/Event.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7524,
						"regions":
						{
						},
						"selection":
						[
							[
								7524,
								7524
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3547.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/keyboard.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10765,
						"regions":
						{
						},
						"selection":
						[
							[
								1078,
								1078
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 810.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/keyboard.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1241,
						"regions":
						{
						},
						"selection":
						[
							[
								213,
								213
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/Event.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1752,
						"regions":
						{
						},
						"selection":
						[
							[
								625,
								625
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 216.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/Mouse.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2744,
						"regions":
						{
						},
						"selection":
						[
							[
								1310,
								1310
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 864.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/imgui/imgui.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 258376,
						"regions":
						{
						},
						"selection":
						[
							[
								51611,
								51620
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 17200.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "src/xstd.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 345,
						"regions":
						{
						},
						"selection":
						[
							[
								345,
								345
							]
						],
						"settings":
						{
							"auto_name": "#pragma once",
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "src/cbt_hook.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2021,
						"regions":
						{
						},
						"selection":
						[
							[
								1023,
								1023
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 216.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "win_hook.exp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2317,
						"regions":
						{
						},
						"selection":
						[
							[
								279,
								279
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 16,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 138105,
						"regions":
						{
						},
						"selection":
						[
							[
								138105,
								138105
							]
						],
						"settings":
						{
							"__vi_external_disable": true,
							"auto_complete": false,
							"auto_complete_commit_on_tab": false,
							"bracket_highlighter.clone_locations":
							{
							},
							"bracket_highlighter.ignore": true,
							"color_scheme": "Terminus.hidden-color-scheme",
							"draw_centered": false,
							"draw_indent_guides": false,
							"draw_unicode_white_space": false,
							"draw_white_space": "none",
							"gutter": false,
							"highlight_line": false,
							"is_widget": true,
							"result_base_dir": "C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches",
							"result_file_regex": null,
							"result_line_regex": null,
							"rulers":
							[
								100,
								500
							],
							"scroll_past_end": true,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"terminus.highlight_counter": 3236,
							"terminus_view": true,
							"terminus_view.args":
							{
								"auto_close": true,
								"cancellable": false,
								"cmd":
								[
									"cmd.exe"
								],
								"config_name": "Command Prompt",
								"cwd": "C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches",
								"env":
								{
									"TERMINUS_SUBLIME": "1",
									"TERM_PROGRAM": "Terminus-Sublime"
								},
								"file_regex": null,
								"line_regex": null,
								"panel_name": null,
								"tag": null,
								"timeit": false,
								"title": null
							},
							"terminus_view.cancellable": false,
							"terminus_view.key.ctrl+k": true,
							"terminus_view.key.ctrl+p": true,
							"terminus_view.natural_keyboard": true,
							"terminus_view.panel_name": null,
							"terminus_view.tag": null,
							"terminus_view.viewport_y": 22356.0,
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 22356.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 17,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2192,
						"regions":
						{
						},
						"selection":
						[
							[
								2192,
								2192
							]
						],
						"settings":
						{
							"__vi_external_disable": true,
							"auto_complete": false,
							"auto_complete_commit_on_tab": false,
							"bracket_highlighter.clone_locations":
							{
							},
							"bracket_highlighter.ignore": true,
							"color_scheme": "Terminus.hidden-color-scheme",
							"draw_centered": false,
							"draw_indent_guides": false,
							"draw_unicode_white_space": false,
							"draw_white_space": "none",
							"gutter": false,
							"highlight_line": false,
							"is_widget": true,
							"result_base_dir": "C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches",
							"result_file_regex": null,
							"result_line_regex": null,
							"rulers":
							[
								100,
								500
							],
							"scroll_past_end": true,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"terminus_view": true,
							"terminus_view.args":
							{
								"auto_close": true,
								"cancellable": false,
								"cmd":
								[
									"cmd.exe"
								],
								"config_name": "Command Prompt",
								"cwd": "C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches",
								"env":
								{
									"TERMINUS_SUBLIME": "1",
									"TERM_PROGRAM": "Terminus-Sublime"
								},
								"file_regex": null,
								"line_regex": null,
								"panel_name": null,
								"tag": null,
								"timeit": false,
								"title": null
							},
							"terminus_view.cancellable": false,
							"terminus_view.key.ctrl+k": true,
							"terminus_view.key.ctrl+p": true,
							"terminus_view.natural_keyboard": true,
							"terminus_view.panel_name": null,
							"terminus_view.tag": null,
							"terminus_view.viewport_y": 0.0,
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "src/TimeInfo.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 223,
						"regions":
						{
						},
						"selection":
						[
							[
								223,
								223
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "src/Mes_Touches.rc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1701,
						"regions":
						{
						},
						"selection":
						[
							[
								1701,
								1701
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 877.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "src/Main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 32409,
						"regions":
						{
						},
						"selection":
						[
							[
								8960,
								8960
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 7139.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "src/cbt_hook.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "src/Logs.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 749,
						"regions":
						{
						},
						"selection":
						[
							[
								237,
								237
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 46,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "src/NotifyIcon.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2769,
						"regions":
						{
						},
						"selection":
						[
							[
								2688,
								2688
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1523.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "src/NotifyIcon.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 567,
						"regions":
						{
						},
						"selection":
						[
							[
								539,
								539
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				}
			]
		},
		{
			"selected": 12,
			"sheets":
			[
				{
					"buffer": 25,
					"file": "dbg.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10571,
						"regions":
						{
						},
						"selection":
						[
							[
								1436,
								1436
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 324.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "Main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30268,
						"regions":
						{
						},
						"selection":
						[
							[
								8737,
								8737
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6354.0,
						"zoom_level": 1.0
					},
					"stack_index": 51,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "/C/Users/Tackwin/Documents/Code/sans-peine/Simulation/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1551,
						"regions":
						{
						},
						"selection":
						[
							[
								1379,
								1277
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 47,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "src/NotifyIcon.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 567,
						"regions":
						{
						},
						"selection":
						[
							[
								95,
								95
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 45,
					"type": "text"
				},
				{
					"buffer": 28,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 137087,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										195,
										206
									],
									[
										441,
										452
									],
									[
										547,
										558
									],
									[
										852,
										863
									],
									[
										1130,
										1141
									],
									[
										1584,
										1590
									],
									[
										1859,
										1865
									],
									[
										2139,
										2145
									],
									[
										2363,
										2369
									],
									[
										2379,
										2385
									],
									[
										2732,
										2738
									],
									[
										2743,
										2749
									],
									[
										3470,
										3476
									],
									[
										3979,
										3985
									],
									[
										4095,
										4101
									],
									[
										4221,
										4227
									],
									[
										4304,
										4310
									],
									[
										4351,
										4357
									],
									[
										4659,
										4665
									],
									[
										4710,
										4716
									],
									[
										4737,
										4743
									],
									[
										4781,
										4787
									],
									[
										4857,
										4863
									],
									[
										4883,
										4889
									],
									[
										4894,
										4900
									],
									[
										5015,
										5021
									],
									[
										5050,
										5056
									],
									[
										5124,
										5130
									],
									[
										5327,
										5333
									],
									[
										5362,
										5368
									],
									[
										5436,
										5442
									],
									[
										5643,
										5649
									],
									[
										6088,
										6094
									],
									[
										6206,
										6212
									],
									[
										6240,
										6246
									],
									[
										6345,
										6351
									],
									[
										6552,
										6558
									],
									[
										6568,
										6574
									],
									[
										6978,
										6984
									],
									[
										6989,
										6995
									],
									[
										7464,
										7470
									],
									[
										8277,
										8283
									],
									[
										8921,
										8927
									],
									[
										9215,
										9221
									],
									[
										9449,
										9455
									],
									[
										9779,
										9785
									],
									[
										10434,
										10440
									],
									[
										11045,
										11051
									],
									[
										11216,
										11222
									],
									[
										11243,
										11249
									],
									[
										11632,
										11638
									],
									[
										11643,
										11649
									],
									[
										12350,
										12356
									],
									[
										13100,
										13106
									],
									[
										13356,
										13362
									],
									[
										13651,
										13657
									],
									[
										14037,
										14043
									],
									[
										14423,
										14429
									],
									[
										14752,
										14758
									],
									[
										15017,
										15023
									],
									[
										15605,
										15611
									],
									[
										16121,
										16127
									],
									[
										16259,
										16265
									],
									[
										16424,
										16430
									],
									[
										16600,
										16606
									],
									[
										16760,
										16766
									],
									[
										16971,
										16977
									],
									[
										17135,
										17141
									],
									[
										17286,
										17292
									],
									[
										17487,
										17493
									],
									[
										17622,
										17628
									],
									[
										17793,
										17799
									],
									[
										17941,
										17947
									],
									[
										18057,
										18063
									],
									[
										18221,
										18227
									],
									[
										18413,
										18419
									],
									[
										18629,
										18635
									],
									[
										18699,
										18705
									],
									[
										18725,
										18731
									],
									[
										18807,
										18813
									],
									[
										18891,
										18897
									],
									[
										18963,
										18969
									],
									[
										19023,
										19029
									],
									[
										19049,
										19055
									],
									[
										19145,
										19151
									],
									[
										19215,
										19221
									],
									[
										19241,
										19247
									],
									[
										19404,
										19410
									],
									[
										19588,
										19594
									],
									[
										19759,
										19765
									],
									[
										19953,
										19959
									],
									[
										20138,
										20144
									],
									[
										20193,
										20199
									],
									[
										20244,
										20250
									],
									[
										20301,
										20307
									],
									[
										20468,
										20474
									],
									[
										20617,
										20623
									],
									[
										20827,
										20833
									],
									[
										20936,
										20942
									],
									[
										21031,
										21037
									],
									[
										21144,
										21150
									],
									[
										21369,
										21375
									],
									[
										21446,
										21452
									],
									[
										21508,
										21514
									],
									[
										21597,
										21603
									],
									[
										21670,
										21676
									],
									[
										21740,
										21746
									],
									[
										21832,
										21838
									],
									[
										21889,
										21895
									],
									[
										21968,
										21974
									],
									[
										22137,
										22143
									],
									[
										22298,
										22304
									],
									[
										22522,
										22528
									],
									[
										22600,
										22606
									],
									[
										22682,
										22688
									],
									[
										22762,
										22768
									],
									[
										22949,
										22955
									],
									[
										23028,
										23034
									],
									[
										23256,
										23262
									],
									[
										23490,
										23496
									],
									[
										23763,
										23769
									],
									[
										23892,
										23898
									],
									[
										24004,
										24010
									],
									[
										24128,
										24134
									],
									[
										24252,
										24258
									],
									[
										24376,
										24382
									],
									[
										24689,
										24695
									],
									[
										24844,
										24850
									],
									[
										24879,
										24885
									],
									[
										24971,
										24977
									],
									[
										25049,
										25055
									],
									[
										25131,
										25137
									],
									[
										25374,
										25380
									],
									[
										25504,
										25510
									],
									[
										25617,
										25623
									],
									[
										25692,
										25698
									],
									[
										25773,
										25779
									],
									[
										25863,
										25869
									],
									[
										25902,
										25908
									],
									[
										25969,
										25975
									],
									[
										26097,
										26103
									],
									[
										26172,
										26178
									],
									[
										26252,
										26258
									],
									[
										26292,
										26298
									],
									[
										26353,
										26359
									],
									[
										26469,
										26475
									],
									[
										26531,
										26537
									],
									[
										26612,
										26618
									],
									[
										26663,
										26669
									],
									[
										26736,
										26742
									],
									[
										26788,
										26794
									],
									[
										26863,
										26869
									],
									[
										26916,
										26922
									],
									[
										26990,
										26996
									],
									[
										27042,
										27048
									],
									[
										27117,
										27123
									],
									[
										27172,
										27178
									],
									[
										27255,
										27261
									],
									[
										27307,
										27313
									],
									[
										27382,
										27388
									],
									[
										27434,
										27440
									],
									[
										27511,
										27517
									],
									[
										27565,
										27571
									],
									[
										27647,
										27653
									],
									[
										27699,
										27705
									],
									[
										27779,
										27785
									],
									[
										27831,
										27837
									],
									[
										27912,
										27918
									],
									[
										27964,
										27970
									],
									[
										28044,
										28050
									],
									[
										28096,
										28102
									],
									[
										28177,
										28183
									],
									[
										28231,
										28237
									],
									[
										28310,
										28316
									],
									[
										28362,
										28368
									],
									[
										28440,
										28446
									],
									[
										28492,
										28498
									],
									[
										28572,
										28578
									],
									[
										28611,
										28617
									],
									[
										28646,
										28652
									],
									[
										28728,
										28734
									],
									[
										28852,
										28858
									],
									[
										28976,
										28982
									],
									[
										29100,
										29106
									],
									[
										29287,
										29293
									],
									[
										29547,
										29553
									],
									[
										29699,
										29705
									],
									[
										29937,
										29943
									],
									[
										30134,
										30140
									],
									[
										30287,
										30293
									],
									[
										30417,
										30423
									],
									[
										30591,
										30597
									],
									[
										30671,
										30677
									],
									[
										30781,
										30787
									],
									[
										30890,
										30896
									],
									[
										30999,
										31005
									],
									[
										31108,
										31114
									],
									[
										31368,
										31374
									],
									[
										31410,
										31416
									],
									[
										31499,
										31505
									],
									[
										31576,
										31582
									],
									[
										31616,
										31622
									],
									[
										31726,
										31732
									],
									[
										31762,
										31768
									],
									[
										31902,
										31908
									],
									[
										31958,
										31964
									],
									[
										31994,
										32000
									],
									[
										32075,
										32081
									],
									[
										32154,
										32160
									],
									[
										32254,
										32260
									],
									[
										32336,
										32342
									],
									[
										32484,
										32490
									],
									[
										32539,
										32545
									],
									[
										32637,
										32643
									],
									[
										32694,
										32700
									],
									[
										32791,
										32797
									],
									[
										32847,
										32853
									],
									[
										32945,
										32951
									],
									[
										33002,
										33008
									],
									[
										33061,
										33067
									],
									[
										33119,
										33125
									],
									[
										33178,
										33184
									],
									[
										33235,
										33241
									],
									[
										33294,
										33300
									],
									[
										33353,
										33359
									],
									[
										33409,
										33415
									],
									[
										33466,
										33472
									],
									[
										33526,
										33532
									],
									[
										33586,
										33592
									],
									[
										33645,
										33651
									],
									[
										33707,
										33713
									],
									[
										33766,
										33772
									],
									[
										33827,
										33833
									],
									[
										33886,
										33892
									],
									[
										33948,
										33954
									],
									[
										34026,
										34032
									],
									[
										34111,
										34117
									],
									[
										34220,
										34226
									],
									[
										34329,
										34335
									],
									[
										34438,
										34444
									],
									[
										34597,
										34603
									],
									[
										34857,
										34863
									],
									[
										35009,
										35015
									],
									[
										35249,
										35255
									],
									[
										35446,
										35452
									],
									[
										35599,
										35605
									],
									[
										35729,
										35735
									],
									[
										35903,
										35909
									],
									[
										35983,
										35989
									],
									[
										36123,
										36129
									],
									[
										36276,
										36282
									],
									[
										36402,
										36408
									],
									[
										36528,
										36534
									],
									[
										36654,
										36660
									],
									[
										36924,
										36930
									],
									[
										37021,
										37027
									],
									[
										37181,
										37187
									],
									[
										37336,
										37342
									],
									[
										37445,
										37451
									],
									[
										37603,
										37609
									],
									[
										37740,
										37746
									],
									[
										37849,
										37855
									],
									[
										37986,
										37992
									],
									[
										38079,
										38085
									],
									[
										38236,
										38242
									],
									[
										38377,
										38383
									],
									[
										38471,
										38477
									],
									[
										38565,
										38571
									],
									[
										38659,
										38665
									],
									[
										38751,
										38757
									],
									[
										38844,
										38850
									],
									[
										38939,
										38945
									],
									[
										39002,
										39008
									],
									[
										39144,
										39150
									],
									[
										39312,
										39318
									],
									[
										39426,
										39432
									],
									[
										39526,
										39532
									],
									[
										39593,
										39599
									],
									[
										39751,
										39757
									],
									[
										39844,
										39850
									],
									[
										39944,
										39950
									],
									[
										40011,
										40017
									],
									[
										40206,
										40212
									],
									[
										40397,
										40403
									],
									[
										40640,
										40646
									],
									[
										40733,
										40739
									],
									[
										40889,
										40895
									],
									[
										41037,
										41043
									],
									[
										41138,
										41144
									],
									[
										41226,
										41232
									],
									[
										41291,
										41297
									],
									[
										41439,
										41445
									],
									[
										41563,
										41569
									],
									[
										41634,
										41640
									],
									[
										41779,
										41785
									],
									[
										41902,
										41908
									],
									[
										41973,
										41979
									],
									[
										42119,
										42125
									],
									[
										42242,
										42248
									],
									[
										42313,
										42319
									],
									[
										42458,
										42464
									],
									[
										42581,
										42587
									],
									[
										42652,
										42658
									],
									[
										42798,
										42804
									],
									[
										42923,
										42929
									],
									[
										42996,
										43002
									],
									[
										43145,
										43151
									],
									[
										43268,
										43274
									],
									[
										43339,
										43345
									],
									[
										43485,
										43491
									],
									[
										43608,
										43614
									],
									[
										43679,
										43685
									],
									[
										43827,
										43833
									],
									[
										43952,
										43958
									],
									[
										44025,
										44031
									],
									[
										44177,
										44183
									],
									[
										44300,
										44306
									],
									[
										44371,
										44377
									],
									[
										44523,
										44529
									],
									[
										44646,
										44652
									],
									[
										44717,
										44723
									],
									[
										44868,
										44874
									],
									[
										44991,
										44997
									],
									[
										45062,
										45068
									],
									[
										45214,
										45220
									],
									[
										45339,
										45345
									],
									[
										45412,
										45418
									],
									[
										45561,
										45567
									],
									[
										45654,
										45660
									],
									[
										45859,
										45865
									],
									[
										45954,
										45960
									],
									[
										46106,
										46112
									],
									[
										46244,
										46250
									],
									[
										46342,
										46348
									],
									[
										46450,
										46456
									],
									[
										46518,
										46524
									],
									[
										46628,
										46634
									],
									[
										46754,
										46760
									],
									[
										46880,
										46886
									],
									[
										47006,
										47012
									],
									[
										47683,
										47689
									],
									[
										48199,
										48205
									],
									[
										48342,
										48348
									],
									[
										48518,
										48524
									],
									[
										48678,
										48684
									],
									[
										48889,
										48895
									],
									[
										49053,
										49059
									],
									[
										49204,
										49210
									],
									[
										49405,
										49411
									],
									[
										49540,
										49546
									],
									[
										49725,
										49731
									],
									[
										49803,
										49809
									],
									[
										50009,
										50015
									],
									[
										50150,
										50156
									],
									[
										50326,
										50332
									],
									[
										50530,
										50536
									],
									[
										50789,
										50795
									],
									[
										50928,
										50934
									],
									[
										51382,
										51388
									],
									[
										51657,
										51663
									],
									[
										51937,
										51943
									],
									[
										52161,
										52167
									],
									[
										52177,
										52183
									],
									[
										52530,
										52536
									],
									[
										52541,
										52547
									],
									[
										53268,
										53274
									],
									[
										53777,
										53783
									],
									[
										53893,
										53899
									],
									[
										54019,
										54025
									],
									[
										54102,
										54108
									],
									[
										54149,
										54155
									],
									[
										54457,
										54463
									],
									[
										54508,
										54514
									],
									[
										54535,
										54541
									],
									[
										54579,
										54585
									],
									[
										54655,
										54661
									],
									[
										54681,
										54687
									],
									[
										54692,
										54698
									],
									[
										54813,
										54819
									],
									[
										54848,
										54854
									],
									[
										54922,
										54928
									],
									[
										55125,
										55131
									],
									[
										55160,
										55166
									],
									[
										55234,
										55240
									],
									[
										55441,
										55447
									],
									[
										55886,
										55892
									],
									[
										56004,
										56010
									],
									[
										56038,
										56044
									],
									[
										56143,
										56149
									],
									[
										56350,
										56356
									],
									[
										56366,
										56372
									],
									[
										56776,
										56782
									],
									[
										56787,
										56793
									],
									[
										57262,
										57268
									],
									[
										58075,
										58081
									],
									[
										58719,
										58725
									],
									[
										59013,
										59019
									],
									[
										59247,
										59253
									],
									[
										59577,
										59583
									],
									[
										60232,
										60238
									],
									[
										60843,
										60849
									],
									[
										61014,
										61020
									],
									[
										61041,
										61047
									],
									[
										61430,
										61436
									],
									[
										61441,
										61447
									],
									[
										62148,
										62154
									],
									[
										62898,
										62904
									],
									[
										63154,
										63160
									],
									[
										63449,
										63455
									],
									[
										63835,
										63841
									],
									[
										64221,
										64227
									],
									[
										64550,
										64556
									],
									[
										64815,
										64821
									],
									[
										65403,
										65409
									],
									[
										65919,
										65925
									],
									[
										66057,
										66063
									],
									[
										66222,
										66228
									],
									[
										66398,
										66404
									],
									[
										66558,
										66564
									],
									[
										66769,
										66775
									],
									[
										66933,
										66939
									],
									[
										67084,
										67090
									],
									[
										67285,
										67291
									],
									[
										67420,
										67426
									],
									[
										67591,
										67597
									],
									[
										67739,
										67745
									],
									[
										67855,
										67861
									],
									[
										68019,
										68025
									],
									[
										68211,
										68217
									],
									[
										68427,
										68433
									],
									[
										68497,
										68503
									],
									[
										68523,
										68529
									],
									[
										68605,
										68611
									],
									[
										68689,
										68695
									],
									[
										68761,
										68767
									],
									[
										68821,
										68827
									],
									[
										68847,
										68853
									],
									[
										68943,
										68949
									],
									[
										69013,
										69019
									],
									[
										69039,
										69045
									],
									[
										69202,
										69208
									],
									[
										69386,
										69392
									],
									[
										69557,
										69563
									],
									[
										69751,
										69757
									],
									[
										69936,
										69942
									],
									[
										69991,
										69997
									],
									[
										70042,
										70048
									],
									[
										70099,
										70105
									],
									[
										70266,
										70272
									],
									[
										70415,
										70421
									],
									[
										70625,
										70631
									],
									[
										70734,
										70740
									],
									[
										70829,
										70835
									],
									[
										70942,
										70948
									],
									[
										71167,
										71173
									],
									[
										71244,
										71250
									],
									[
										71306,
										71312
									],
									[
										71395,
										71401
									],
									[
										71468,
										71474
									],
									[
										71538,
										71544
									],
									[
										71630,
										71636
									],
									[
										71687,
										71693
									],
									[
										71766,
										71772
									],
									[
										71935,
										71941
									],
									[
										72096,
										72102
									],
									[
										72320,
										72326
									],
									[
										72398,
										72404
									],
									[
										72480,
										72486
									],
									[
										72560,
										72566
									],
									[
										72747,
										72753
									],
									[
										72826,
										72832
									],
									[
										73054,
										73060
									],
									[
										73288,
										73294
									],
									[
										73561,
										73567
									],
									[
										73690,
										73696
									],
									[
										73802,
										73808
									],
									[
										73926,
										73932
									],
									[
										74050,
										74056
									],
									[
										74174,
										74180
									],
									[
										74487,
										74493
									],
									[
										74642,
										74648
									],
									[
										74677,
										74683
									],
									[
										74769,
										74775
									],
									[
										74847,
										74853
									],
									[
										74929,
										74935
									],
									[
										75172,
										75178
									],
									[
										75302,
										75308
									],
									[
										75415,
										75421
									],
									[
										75490,
										75496
									],
									[
										75571,
										75577
									],
									[
										75661,
										75667
									],
									[
										75700,
										75706
									],
									[
										75767,
										75773
									],
									[
										75895,
										75901
									],
									[
										75970,
										75976
									],
									[
										76050,
										76056
									],
									[
										76090,
										76096
									],
									[
										76151,
										76157
									],
									[
										76267,
										76273
									],
									[
										76329,
										76335
									],
									[
										76410,
										76416
									],
									[
										76461,
										76467
									],
									[
										76534,
										76540
									],
									[
										76586,
										76592
									],
									[
										76661,
										76667
									],
									[
										76714,
										76720
									],
									[
										76788,
										76794
									],
									[
										76840,
										76846
									],
									[
										76915,
										76921
									],
									[
										76970,
										76976
									],
									[
										77053,
										77059
									],
									[
										77105,
										77111
									],
									[
										77180,
										77186
									],
									[
										77232,
										77238
									],
									[
										77309,
										77315
									],
									[
										77363,
										77369
									],
									[
										77445,
										77451
									],
									[
										77497,
										77503
									],
									[
										77577,
										77583
									],
									[
										77629,
										77635
									],
									[
										77710,
										77716
									],
									[
										77762,
										77768
									],
									[
										77842,
										77848
									],
									[
										77894,
										77900
									],
									[
										77975,
										77981
									],
									[
										78029,
										78035
									],
									[
										78108,
										78114
									],
									[
										78160,
										78166
									],
									[
										78238,
										78244
									],
									[
										78290,
										78296
									],
									[
										78370,
										78376
									],
									[
										78409,
										78415
									],
									[
										78444,
										78450
									],
									[
										78526,
										78532
									],
									[
										78650,
										78656
									],
									[
										78774,
										78780
									],
									[
										78898,
										78904
									],
									[
										79085,
										79091
									],
									[
										79345,
										79351
									],
									[
										79497,
										79503
									],
									[
										79735,
										79741
									],
									[
										79932,
										79938
									],
									[
										80085,
										80091
									],
									[
										80215,
										80221
									],
									[
										80389,
										80395
									],
									[
										80469,
										80475
									],
									[
										80579,
										80585
									],
									[
										80688,
										80694
									],
									[
										80797,
										80803
									],
									[
										80906,
										80912
									],
									[
										81166,
										81172
									],
									[
										81208,
										81214
									],
									[
										81297,
										81303
									],
									[
										81374,
										81380
									],
									[
										81414,
										81420
									],
									[
										81524,
										81530
									],
									[
										81560,
										81566
									],
									[
										81700,
										81706
									],
									[
										81756,
										81762
									],
									[
										81792,
										81798
									],
									[
										81873,
										81879
									],
									[
										81952,
										81958
									],
									[
										82052,
										82058
									],
									[
										82134,
										82140
									],
									[
										82282,
										82288
									],
									[
										82337,
										82343
									],
									[
										82435,
										82441
									],
									[
										82492,
										82498
									],
									[
										82589,
										82595
									],
									[
										82645,
										82651
									],
									[
										82743,
										82749
									],
									[
										82800,
										82806
									],
									[
										82859,
										82865
									],
									[
										82917,
										82923
									],
									[
										82976,
										82982
									],
									[
										83033,
										83039
									],
									[
										83092,
										83098
									],
									[
										83151,
										83157
									],
									[
										83207,
										83213
									],
									[
										83264,
										83270
									],
									[
										83324,
										83330
									],
									[
										83384,
										83390
									],
									[
										83443,
										83449
									],
									[
										83505,
										83511
									],
									[
										83564,
										83570
									],
									[
										83625,
										83631
									],
									[
										83684,
										83690
									],
									[
										83746,
										83752
									],
									[
										83824,
										83830
									],
									[
										83909,
										83915
									],
									[
										84018,
										84024
									],
									[
										84127,
										84133
									],
									[
										84236,
										84242
									],
									[
										84395,
										84401
									],
									[
										84655,
										84661
									],
									[
										84807,
										84813
									],
									[
										85047,
										85053
									],
									[
										85244,
										85250
									],
									[
										85397,
										85403
									],
									[
										85527,
										85533
									],
									[
										85701,
										85707
									],
									[
										85781,
										85787
									],
									[
										85921,
										85927
									],
									[
										86074,
										86080
									],
									[
										86200,
										86206
									],
									[
										86326,
										86332
									],
									[
										86452,
										86458
									],
									[
										86722,
										86728
									],
									[
										86819,
										86825
									],
									[
										86979,
										86985
									],
									[
										87134,
										87140
									],
									[
										87243,
										87249
									],
									[
										87401,
										87407
									],
									[
										87538,
										87544
									],
									[
										87647,
										87653
									],
									[
										87784,
										87790
									],
									[
										87877,
										87883
									],
									[
										88034,
										88040
									],
									[
										88175,
										88181
									],
									[
										88269,
										88275
									],
									[
										88363,
										88369
									],
									[
										88457,
										88463
									],
									[
										88549,
										88555
									],
									[
										88642,
										88648
									],
									[
										88737,
										88743
									],
									[
										88800,
										88806
									],
									[
										88942,
										88948
									],
									[
										89110,
										89116
									],
									[
										89224,
										89230
									],
									[
										89324,
										89330
									],
									[
										89391,
										89397
									],
									[
										89549,
										89555
									],
									[
										89642,
										89648
									],
									[
										89742,
										89748
									],
									[
										89809,
										89815
									],
									[
										90004,
										90010
									],
									[
										90195,
										90201
									],
									[
										90438,
										90444
									],
									[
										90531,
										90537
									],
									[
										90687,
										90693
									],
									[
										90835,
										90841
									],
									[
										90936,
										90942
									],
									[
										91024,
										91030
									],
									[
										91089,
										91095
									],
									[
										91237,
										91243
									],
									[
										91361,
										91367
									],
									[
										91432,
										91438
									],
									[
										91577,
										91583
									],
									[
										91700,
										91706
									],
									[
										91771,
										91777
									],
									[
										91917,
										91923
									],
									[
										92040,
										92046
									],
									[
										92111,
										92117
									],
									[
										92256,
										92262
									],
									[
										92379,
										92385
									],
									[
										92450,
										92456
									],
									[
										92596,
										92602
									],
									[
										92721,
										92727
									],
									[
										92794,
										92800
									],
									[
										92943,
										92949
									],
									[
										93066,
										93072
									],
									[
										93137,
										93143
									],
									[
										93283,
										93289
									],
									[
										93406,
										93412
									],
									[
										93477,
										93483
									],
									[
										93625,
										93631
									],
									[
										93750,
										93756
									],
									[
										93823,
										93829
									],
									[
										93975,
										93981
									],
									[
										94098,
										94104
									],
									[
										94169,
										94175
									],
									[
										94321,
										94327
									],
									[
										94444,
										94450
									],
									[
										94515,
										94521
									],
									[
										94666,
										94672
									],
									[
										94789,
										94795
									],
									[
										94860,
										94866
									],
									[
										95012,
										95018
									],
									[
										95137,
										95143
									],
									[
										95210,
										95216
									],
									[
										95359,
										95365
									],
									[
										95452,
										95458
									],
									[
										95657,
										95663
									],
									[
										95752,
										95758
									],
									[
										95904,
										95910
									],
									[
										96042,
										96048
									],
									[
										96140,
										96146
									],
									[
										96248,
										96254
									],
									[
										96316,
										96322
									],
									[
										96426,
										96432
									],
									[
										96552,
										96558
									],
									[
										96678,
										96684
									],
									[
										96804,
										96810
									],
									[
										97481,
										97487
									],
									[
										97997,
										98003
									],
									[
										98140,
										98146
									],
									[
										98316,
										98322
									],
									[
										98476,
										98482
									],
									[
										98687,
										98693
									],
									[
										98851,
										98857
									],
									[
										99002,
										99008
									],
									[
										99203,
										99209
									],
									[
										99338,
										99344
									],
									[
										99523,
										99529
									],
									[
										99601,
										99607
									],
									[
										99807,
										99813
									],
									[
										99948,
										99954
									],
									[
										100124,
										100130
									],
									[
										100328,
										100334
									],
									[
										100587,
										100593
									],
									[
										100726,
										100732
									],
									[
										100983,
										100988
									],
									[
										101078,
										101083
									],
									[
										101279,
										101284
									],
									[
										101420,
										101425
									],
									[
										101689,
										101694
									],
									[
										101913,
										101918
									],
									[
										102076,
										102081
									],
									[
										102164,
										102169
									],
									[
										102326,
										102331
									],
									[
										102444,
										102449
									],
									[
										102589,
										102594
									],
									[
										102834,
										102839
									],
									[
										103210,
										103215
									],
									[
										103371,
										103376
									],
									[
										103535,
										103540
									],
									[
										103723,
										103728
									],
									[
										103888,
										103893
									],
									[
										104170,
										104175
									],
									[
										104437,
										104442
									],
									[
										104710,
										104715
									],
									[
										104961,
										104966
									],
									[
										105175,
										105180
									],
									[
										105384,
										105389
									],
									[
										105706,
										105711
									],
									[
										105928,
										105933
									],
									[
										106188,
										106193
									],
									[
										106247,
										106252
									],
									[
										106307,
										106312
									],
									[
										106632,
										106637
									],
									[
										106737,
										106742
									],
									[
										106820,
										106825
									],
									[
										106866,
										106871
									],
									[
										106953,
										106958
									],
									[
										107128,
										107133
									],
									[
										107178,
										107183
									],
									[
										107308,
										107313
									],
									[
										107460,
										107465
									],
									[
										107722,
										107727
									],
									[
										107872,
										107877
									],
									[
										108062,
										108067
									],
									[
										108326,
										108331
									],
									[
										108502,
										108507
									],
									[
										108530,
										108535
									],
									[
										109210,
										109215
									],
									[
										110145,
										110150
									],
									[
										110896,
										110901
									],
									[
										111491,
										111496
									],
									[
										111653,
										111658
									],
									[
										111825,
										111830
									],
									[
										112006,
										112011
									],
									[
										112263,
										112268
									],
									[
										112857,
										112862
									],
									[
										113702,
										113707
									],
									[
										114142,
										114147
									],
									[
										114539,
										114544
									],
									[
										114834,
										114839
									],
									[
										115019,
										115024
									],
									[
										115456,
										115461
									],
									[
										115596,
										115601
									],
									[
										115663,
										115668
									],
									[
										116001,
										116006
									],
									[
										116168,
										116173
									],
									[
										116237,
										116242
									],
									[
										116431,
										116436
									],
									[
										116590,
										116595
									],
									[
										116767,
										116772
									],
									[
										117218,
										117223
									],
									[
										117513,
										117518
									],
									[
										118208,
										118213
									],
									[
										118541,
										118546
									],
									[
										119150,
										119155
									],
									[
										120085,
										120090
									],
									[
										120836,
										120841
									],
									[
										121426,
										121431
									],
									[
										121444,
										121449
									],
									[
										121482,
										121487
									],
									[
										121609,
										121614
									],
									[
										121624,
										121629
									],
									[
										121638,
										121643
									],
									[
										121930,
										121935
									],
									[
										122071,
										122076
									],
									[
										122329,
										122334
									],
									[
										122467,
										122472
									],
									[
										122652,
										122657
									],
									[
										122789,
										122794
									],
									[
										122935,
										122940
									],
									[
										123114,
										123119
									],
									[
										123298,
										123303
									],
									[
										123477,
										123482
									],
									[
										123591,
										123596
									],
									[
										123770,
										123775
									],
									[
										124011,
										124016
									],
									[
										124215,
										124220
									],
									[
										124387,
										124392
									],
									[
										124552,
										124557
									],
									[
										124783,
										124788
									],
									[
										124978,
										124983
									],
									[
										125171,
										125176
									],
									[
										125210,
										125215
									],
									[
										125343,
										125348
									],
									[
										125473,
										125478
									],
									[
										125596,
										125601
									],
									[
										125764,
										125769
									],
									[
										125883,
										125888
									],
									[
										126040,
										126045
									],
									[
										126244,
										126249
									],
									[
										126448,
										126453
									],
									[
										126624,
										126629
									],
									[
										126830,
										126835
									],
									[
										127032,
										127037
									],
									[
										127191,
										127196
									],
									[
										127370,
										127375
									],
									[
										127594,
										127599
									],
									[
										127754,
										127759
									],
									[
										127940,
										127945
									],
									[
										128131,
										128136
									],
									[
										128444,
										128449
									],
									[
										128645,
										128650
									],
									[
										128750,
										128755
									],
									[
										128894,
										128899
									],
									[
										129202,
										129207
									],
									[
										129702,
										129707
									],
									[
										130163,
										130168
									],
									[
										130554,
										130559
									],
									[
										131372,
										131377
									],
									[
										131831,
										131836
									],
									[
										132476,
										132481
									],
									[
										132671,
										132676
									],
									[
										132864,
										132869
									],
									[
										132903,
										132908
									],
									[
										133050,
										133055
									],
									[
										133173,
										133178
									],
									[
										133341,
										133346
									],
									[
										133460,
										133465
									],
									[
										133617,
										133622
									],
									[
										133821,
										133826
									],
									[
										134025,
										134030
									],
									[
										134201,
										134206
									],
									[
										134407,
										134412
									],
									[
										134601,
										134606
									],
									[
										134757,
										134762
									],
									[
										134933,
										134938
									],
									[
										135112,
										135117
									],
									[
										135336,
										135341
									],
									[
										135492,
										135497
									],
									[
										136111,
										136116
									],
									[
										136570,
										136575
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								121255,
								121255
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 6,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 57402.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/imgui/imgui_ext.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26474,
						"regions":
						{
						},
						"selection":
						[
							[
								25538,
								25538
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7759.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/imgui/imgui_ext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 158657,
						"regions":
						{
						},
						"selection":
						[
							[
								5067,
								5067
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1535.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "src/Main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 32409,
						"regions":
						{
						},
						"selection":
						[
							[
								11153,
								11153
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false,
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 7434.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/Mouse.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13520,
						"regions":
						{
						},
						"selection":
						[
							[
								6219,
								6219
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3898.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/keyboard.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10765,
						"regions":
						{
						},
						"selection":
						[
							[
								2757,
								2757
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 603.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "src/render_stats.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 480,
						"regions":
						{
						},
						"selection":
						[
							[
								397,
								397
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "src/render_stats.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8211,
						"regions":
						{
						},
						"selection":
						[
							[
								7196,
								7196
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4278.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 31,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30396,
						"regions":
						{
						},
						"selection":
						[
							[
								30396,
								30396
							]
						],
						"settings":
						{
							"__vi_external_disable": true,
							"auto_complete": false,
							"auto_complete_commit_on_tab": false,
							"bracket_highlighter.clone_locations":
							{
							},
							"bracket_highlighter.ignore": true,
							"color_scheme": "Terminus.hidden-color-scheme",
							"draw_centered": false,
							"draw_indent_guides": false,
							"draw_unicode_white_space": false,
							"draw_white_space": "none",
							"gutter": false,
							"highlight_line": false,
							"is_widget": true,
							"result_base_dir": "C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches",
							"result_file_regex": null,
							"result_line_regex": null,
							"rulers":
							[
								100,
								500
							],
							"scroll_past_end": true,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"terminus.highlight_counter": 1682,
							"terminus_view": true,
							"terminus_view.args":
							{
								"auto_close": true,
								"cancellable": false,
								"cmd":
								[
									"cmd.exe"
								],
								"config_name": "Command Prompt",
								"cwd": "C:\\Users\\Tackwin\\Documents\\Code\\Mes_Touches",
								"env":
								{
									"TERMINUS_SUBLIME": "1",
									"TERM_PROGRAM": "Terminus-Sublime"
								},
								"file_regex": null,
								"line_regex": null,
								"panel_name": null,
								"tag": null,
								"timeit": false,
								"title": null
							},
							"terminus_view.cancellable": false,
							"terminus_view.key.ctrl+k": true,
							"terminus_view.key.ctrl+p": true,
							"terminus_view.natural_keyboard": true,
							"terminus_view.panel_name": null,
							"terminus_view.tag": null,
							"terminus_view.viewport_y": 4122.0,
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 4122.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "/C/Users/Tackwin/Documents/Code/sans-peine/Client/src/imgui_ext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13512,
						"regions":
						{
						},
						"selection":
						[
							[
								3393,
								3393
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4752.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "/C/Users/Tackwin/Documents/Code/sans-peine/Client/src/imgui_ext.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3184,
						"regions":
						{
						},
						"selection":
						[
							[
								377,
								377
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "src/Settings.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4714,
						"regions":
						{
						},
						"selection":
						[
							[
								4605,
								4612
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2629.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "eject.ps1",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 166,
						"regions":
						{
						},
						"selection":
						[
							[
								166,
								166
							]
						],
						"settings":
						{
							"auto_name": "$processes = Get-Process | Select id",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/Event.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1752,
						"regions":
						{
						},
						"selection":
						[
							[
								625,
								625
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/Event.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7524,
						"regions":
						{
						},
						"selection":
						[
							[
								6863,
								6863
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3943.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "/C/Users/Tackwin/Documents/Code/sans-peine/Simulation/src/Main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9880,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 170.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "/C/Users/Tackwin/Documents/Code/sans-peine/Client/src/Main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13187,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 4464.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "src/cbt_hook.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2021,
						"regions":
						{
						},
						"selection":
						[
							[
								815,
								815
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1120.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 38,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25,
						"regions":
						{
						},
						"selection":
						[
							[
								25,
								25
							]
						],
						"settings":
						{
							"default_dir": "C:\\Users\\Tackwin\\AppData\\Roaming\\Sublime Text 3\\Packages\\User",
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 50,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "/C/Users/Tackwin/AppData/Roaming/Sublime Text 3/Packages/User/cmake.sublime-build",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 885,
						"regions":
						{
						},
						"selection":
						[
							[
								263,
								263
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 49,
					"type": "text"
				},
				{
					"buffer": 0,
					"file": "CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2067,
						"regions":
						{
						},
						"selection":
						[
							[
								1188,
								1188
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 259.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "win_hook.lib",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5055,
						"regions":
						{
						},
						"selection":
						[
							[
								737,
								737
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 41,
					"file": "src/imconfig.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Deviot (Arduino IDE)/deviot.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 48,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.Terminus":
	{
		"height": 126.0
	},
	"output.exec":
	{
		"height": 367.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/cmake.sublime-build",
	"project": "Mes_Touches.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"render",
				"src\\render_stats.cpp"
			],
			[
				"main",
				"src\\Main.cpp"
			],
			[
				"im",
				"src\\imgui\\imgui_ext.h"
			],
			[
				"cmal",
				"CMakeLists.txt"
			],
			[
				"mouse",
				"src\\Mouse.cpp"
			],
			[
				"imgui_e",
				"src\\imgui\\imgui_ext.h"
			],
			[
				"imgui.h",
				"src\\imgui\\imgui.h"
			],
			[
				"sta",
				"src\\render_stats.cpp"
			],
			[
				"mo",
				"src\\Mouse.cpp"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"set",
				"src\\Settings.cpp"
			],
			[
				"event",
				"src\\Event.cpp"
			],
			[
				"even",
				"src\\Event.hpp"
			],
			[
				"xstd",
				"src\\xstd.hpp"
			],
			[
				"e",
				"src\\Event.cpp"
			],
			[
				"cm",
				"CMakeLists.txt"
			],
			[
				"cbt_",
				"src\\cbt_hook.cpp"
			],
			[
				"cbt",
				"src\\cbt_hook.cpp"
			],
			[
				"mai",
				"src\\Main.cpp"
			],
			[
				"MAIN",
				"src\\Main.cpp"
			],
			[
				"cb",
				"src\\cbt_hook.cpp"
			],
			[
				"cma",
				"CMakeLists.txt"
			],
			[
				"eve",
				"src\\Event.cpp"
			],
			[
				"time",
				"src\\TimeInfo.hpp"
			],
			[
				"keyb",
				"src\\keyboard.cpp"
			],
			[
				"ma",
				"src\\Main.cpp"
			],
			[
				"Mes_Touches.rc",
				"src\\Mes_Touches.rc"
			],
			[
				"noti",
				"src\\NotifyIcon.cpp"
			],
			[
				".rc",
				"src\\Mes_Touches.rc"
			],
			[
				"not",
				"src\\NotifyIcon.hpp"
			],
			[
				"",
				"src\\vga_buffer.rs"
			],
			[
				"vga",
				"src\\vga_buffer.rs"
			],
			[
				"conf",
				".cargo\\config.toml"
			],
			[
				"confi",
				".cargo\\config.toml"
			],
			[
				"cargo",
				"Cargo.toml"
			],
			[
				"carg",
				"Cargo.toml"
			],
			[
				"car",
				"Cargo.toml"
			],
			[
				"m",
				"src\\Main.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\Users\\Tackwin\\Documents\\Code\\sans-peine\\Client\\Client.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 245.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
